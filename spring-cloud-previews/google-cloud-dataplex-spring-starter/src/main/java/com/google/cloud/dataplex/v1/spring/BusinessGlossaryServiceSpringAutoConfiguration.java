/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.dataplex.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.dataplex.v1.BusinessGlossaryServiceClient;
import com.google.cloud.dataplex.v1.BusinessGlossaryServiceSettings;
import com.google.cloud.spring.autoconfigure.core.GcpContextAutoConfiguration;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.core.Retry;
import com.google.cloud.spring.core.util.RetryUtil;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.AutoConfigureAfter;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link BusinessGlossaryServiceClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@AutoConfigureAfter(GcpContextAutoConfiguration.class)
@ConditionalOnClass(BusinessGlossaryServiceClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.dataplex.v1.business-glossary-service.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties(BusinessGlossaryServiceSpringProperties.class)
public class BusinessGlossaryServiceSpringAutoConfiguration {
  private final BusinessGlossaryServiceSpringProperties clientProperties;
  private final CredentialsProvider credentialsProvider;
  private static final Log LOGGER =
      LogFactory.getLog(BusinessGlossaryServiceSpringAutoConfiguration.class);

  protected BusinessGlossaryServiceSpringAutoConfiguration(
      BusinessGlossaryServiceSpringProperties clientProperties,
      CredentialsProvider credentialsProvider)
      throws IOException {
    this.clientProperties = clientProperties;
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from BusinessGlossaryService-specific configuration");
      }
      this.credentialsProvider =
          ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    } else {
      this.credentialsProvider = credentialsProvider;
    }
  }

  /**
   * Provides a default transport channel provider bean, corresponding to the client library's
   * default transport channel provider. If the library supports both GRPC and REST transport, and
   * the useRest property is configured, the HTTP/JSON transport provider will be used instead of
   * GRPC.
   *
   * @return a default transport channel provider.
   */
  @Bean
  @ConditionalOnMissingBean(name = "defaultBusinessGlossaryServiceTransportChannelProvider")
  public TransportChannelProvider defaultBusinessGlossaryServiceTransportChannelProvider() {
    if (this.clientProperties.getUseRest()) {
      return BusinessGlossaryServiceSettings.defaultHttpJsonTransportProviderBuilder().build();
    }
    return BusinessGlossaryServiceSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a BusinessGlossaryServiceSettings bean configured to use a DefaultCredentialsProvider
   * and the client library's default transport channel provider
   * (defaultBusinessGlossaryServiceTransportChannelProvider()). It also configures the quota
   * project ID and executor thread count, if provided through properties.
   *
   * <p>Retry settings are also configured from service-level and method-level properties specified
   * in BusinessGlossaryServiceSpringProperties. Method-level properties will take precedence over
   * service-level properties if available, and client library defaults will be used if neither are
   * specified.
   *
   * @param defaultTransportChannelProvider TransportChannelProvider to use in the settings.
   * @return a {@link BusinessGlossaryServiceSettings} bean configured with {@link
   *     TransportChannelProvider} bean.
   */
  @Bean
  @ConditionalOnMissingBean
  public BusinessGlossaryServiceSettings businessGlossaryServiceSettings(
      @Qualifier("defaultBusinessGlossaryServiceTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    BusinessGlossaryServiceSettings.Builder clientSettingsBuilder;
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder = BusinessGlossaryServiceSettings.newHttpJsonBuilder();
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using REST (HTTP/JSON) transport.");
      }
    } else {
      clientSettingsBuilder = BusinessGlossaryServiceSettings.newBuilder();
    }
    clientSettingsBuilder
        .setCredentialsProvider(this.credentialsProvider)
        .setTransportChannelProvider(defaultTransportChannelProvider)
        .setEndpoint(BusinessGlossaryServiceSettings.getDefaultEndpoint())
        .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          BusinessGlossaryServiceSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    Retry serviceRetry = clientProperties.getRetry();
    if (serviceRetry != null) {
      RetrySettings getGlossaryRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getGlossarySettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getGlossarySettings().setRetrySettings(getGlossaryRetrySettings);

      RetrySettings listGlossariesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listGlossariesSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.listGlossariesSettings().setRetrySettings(listGlossariesRetrySettings);

      RetrySettings createGlossaryCategoryRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createGlossaryCategorySettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .createGlossaryCategorySettings()
          .setRetrySettings(createGlossaryCategoryRetrySettings);

      RetrySettings updateGlossaryCategoryRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateGlossaryCategorySettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .updateGlossaryCategorySettings()
          .setRetrySettings(updateGlossaryCategoryRetrySettings);

      RetrySettings deleteGlossaryCategoryRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteGlossaryCategorySettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .deleteGlossaryCategorySettings()
          .setRetrySettings(deleteGlossaryCategoryRetrySettings);

      RetrySettings getGlossaryCategoryRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getGlossaryCategorySettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .getGlossaryCategorySettings()
          .setRetrySettings(getGlossaryCategoryRetrySettings);

      RetrySettings listGlossaryCategoriesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listGlossaryCategoriesSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .listGlossaryCategoriesSettings()
          .setRetrySettings(listGlossaryCategoriesRetrySettings);

      RetrySettings createGlossaryTermRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createGlossaryTermSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .createGlossaryTermSettings()
          .setRetrySettings(createGlossaryTermRetrySettings);

      RetrySettings updateGlossaryTermRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateGlossaryTermSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .updateGlossaryTermSettings()
          .setRetrySettings(updateGlossaryTermRetrySettings);

      RetrySettings deleteGlossaryTermRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteGlossaryTermSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .deleteGlossaryTermSettings()
          .setRetrySettings(deleteGlossaryTermRetrySettings);

      RetrySettings getGlossaryTermRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getGlossaryTermSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .getGlossaryTermSettings()
          .setRetrySettings(getGlossaryTermRetrySettings);

      RetrySettings listGlossaryTermsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listGlossaryTermsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .listGlossaryTermsSettings()
          .setRetrySettings(listGlossaryTermsRetrySettings);

      RetrySettings listLocationsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listLocationsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.listLocationsSettings().setRetrySettings(listLocationsRetrySettings);

      RetrySettings getLocationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getLocationSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getLocationSettings().setRetrySettings(getLocationRetrySettings);

      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured service-level retry settings from properties.");
      }
    }
    Retry getGlossaryRetry = clientProperties.getGetGlossaryRetry();
    if (getGlossaryRetry != null) {
      RetrySettings getGlossaryRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getGlossarySettings().getRetrySettings(), getGlossaryRetry);
      clientSettingsBuilder.getGlossarySettings().setRetrySettings(getGlossaryRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getGlossary from properties.");
      }
    }
    Retry listGlossariesRetry = clientProperties.getListGlossariesRetry();
    if (listGlossariesRetry != null) {
      RetrySettings listGlossariesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listGlossariesSettings().getRetrySettings(),
              listGlossariesRetry);
      clientSettingsBuilder.listGlossariesSettings().setRetrySettings(listGlossariesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listGlossaries from properties.");
      }
    }
    Retry createGlossaryCategoryRetry = clientProperties.getCreateGlossaryCategoryRetry();
    if (createGlossaryCategoryRetry != null) {
      RetrySettings createGlossaryCategoryRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createGlossaryCategorySettings().getRetrySettings(),
              createGlossaryCategoryRetry);
      clientSettingsBuilder
          .createGlossaryCategorySettings()
          .setRetrySettings(createGlossaryCategoryRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for createGlossaryCategory from properties.");
      }
    }
    Retry updateGlossaryCategoryRetry = clientProperties.getUpdateGlossaryCategoryRetry();
    if (updateGlossaryCategoryRetry != null) {
      RetrySettings updateGlossaryCategoryRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateGlossaryCategorySettings().getRetrySettings(),
              updateGlossaryCategoryRetry);
      clientSettingsBuilder
          .updateGlossaryCategorySettings()
          .setRetrySettings(updateGlossaryCategoryRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for updateGlossaryCategory from properties.");
      }
    }
    Retry deleteGlossaryCategoryRetry = clientProperties.getDeleteGlossaryCategoryRetry();
    if (deleteGlossaryCategoryRetry != null) {
      RetrySettings deleteGlossaryCategoryRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteGlossaryCategorySettings().getRetrySettings(),
              deleteGlossaryCategoryRetry);
      clientSettingsBuilder
          .deleteGlossaryCategorySettings()
          .setRetrySettings(deleteGlossaryCategoryRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for deleteGlossaryCategory from properties.");
      }
    }
    Retry getGlossaryCategoryRetry = clientProperties.getGetGlossaryCategoryRetry();
    if (getGlossaryCategoryRetry != null) {
      RetrySettings getGlossaryCategoryRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getGlossaryCategorySettings().getRetrySettings(),
              getGlossaryCategoryRetry);
      clientSettingsBuilder
          .getGlossaryCategorySettings()
          .setRetrySettings(getGlossaryCategoryRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for getGlossaryCategory from properties.");
      }
    }
    Retry listGlossaryCategoriesRetry = clientProperties.getListGlossaryCategoriesRetry();
    if (listGlossaryCategoriesRetry != null) {
      RetrySettings listGlossaryCategoriesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listGlossaryCategoriesSettings().getRetrySettings(),
              listGlossaryCategoriesRetry);
      clientSettingsBuilder
          .listGlossaryCategoriesSettings()
          .setRetrySettings(listGlossaryCategoriesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listGlossaryCategories from properties.");
      }
    }
    Retry createGlossaryTermRetry = clientProperties.getCreateGlossaryTermRetry();
    if (createGlossaryTermRetry != null) {
      RetrySettings createGlossaryTermRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createGlossaryTermSettings().getRetrySettings(),
              createGlossaryTermRetry);
      clientSettingsBuilder
          .createGlossaryTermSettings()
          .setRetrySettings(createGlossaryTermRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for createGlossaryTerm from properties.");
      }
    }
    Retry updateGlossaryTermRetry = clientProperties.getUpdateGlossaryTermRetry();
    if (updateGlossaryTermRetry != null) {
      RetrySettings updateGlossaryTermRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateGlossaryTermSettings().getRetrySettings(),
              updateGlossaryTermRetry);
      clientSettingsBuilder
          .updateGlossaryTermSettings()
          .setRetrySettings(updateGlossaryTermRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for updateGlossaryTerm from properties.");
      }
    }
    Retry deleteGlossaryTermRetry = clientProperties.getDeleteGlossaryTermRetry();
    if (deleteGlossaryTermRetry != null) {
      RetrySettings deleteGlossaryTermRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteGlossaryTermSettings().getRetrySettings(),
              deleteGlossaryTermRetry);
      clientSettingsBuilder
          .deleteGlossaryTermSettings()
          .setRetrySettings(deleteGlossaryTermRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for deleteGlossaryTerm from properties.");
      }
    }
    Retry getGlossaryTermRetry = clientProperties.getGetGlossaryTermRetry();
    if (getGlossaryTermRetry != null) {
      RetrySettings getGlossaryTermRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getGlossaryTermSettings().getRetrySettings(),
              getGlossaryTermRetry);
      clientSettingsBuilder
          .getGlossaryTermSettings()
          .setRetrySettings(getGlossaryTermRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getGlossaryTerm from properties.");
      }
    }
    Retry listGlossaryTermsRetry = clientProperties.getListGlossaryTermsRetry();
    if (listGlossaryTermsRetry != null) {
      RetrySettings listGlossaryTermsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listGlossaryTermsSettings().getRetrySettings(),
              listGlossaryTermsRetry);
      clientSettingsBuilder
          .listGlossaryTermsSettings()
          .setRetrySettings(listGlossaryTermsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listGlossaryTerms from properties.");
      }
    }
    Retry listLocationsRetry = clientProperties.getListLocationsRetry();
    if (listLocationsRetry != null) {
      RetrySettings listLocationsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listLocationsSettings().getRetrySettings(), listLocationsRetry);
      clientSettingsBuilder.listLocationsSettings().setRetrySettings(listLocationsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listLocations from properties.");
      }
    }
    Retry getLocationRetry = clientProperties.getGetLocationRetry();
    if (getLocationRetry != null) {
      RetrySettings getLocationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getLocationSettings().getRetrySettings(), getLocationRetry);
      clientSettingsBuilder.getLocationSettings().setRetrySettings(getLocationRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getLocation from properties.");
      }
    }
    return clientSettingsBuilder.build();
  }

  /**
   * Provides a BusinessGlossaryServiceClient bean configured with BusinessGlossaryServiceSettings.
   *
   * @param businessGlossaryServiceSettings settings to configure an instance of client bean.
   * @return a {@link BusinessGlossaryServiceClient} bean configured with {@link
   *     BusinessGlossaryServiceSettings}
   */
  @Bean
  @ConditionalOnMissingBean
  public BusinessGlossaryServiceClient businessGlossaryServiceClient(
      BusinessGlossaryServiceSettings businessGlossaryServiceSettings) throws IOException {
    return BusinessGlossaryServiceClient.create(businessGlossaryServiceSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-business-glossary-service";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
