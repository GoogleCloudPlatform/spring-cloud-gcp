/*
 * Copyright 2024 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.dataplex.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.dataplex.v1.CatalogServiceClient;
import com.google.cloud.dataplex.v1.CatalogServiceSettings;
import com.google.cloud.spring.autoconfigure.core.GcpContextAutoConfiguration;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.core.Retry;
import com.google.cloud.spring.core.util.RetryUtil;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.AutoConfigureAfter;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link CatalogServiceClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@AutoConfigureAfter(GcpContextAutoConfiguration.class)
@ConditionalOnClass(CatalogServiceClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.dataplex.v1.catalog-service.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties(CatalogServiceSpringProperties.class)
public class CatalogServiceSpringAutoConfiguration {
  private final CatalogServiceSpringProperties clientProperties;
  private final CredentialsProvider credentialsProvider;
  private static final Log LOGGER = LogFactory.getLog(CatalogServiceSpringAutoConfiguration.class);

  protected CatalogServiceSpringAutoConfiguration(
      CatalogServiceSpringProperties clientProperties, CredentialsProvider credentialsProvider)
      throws IOException {
    this.clientProperties = clientProperties;
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from CatalogService-specific configuration");
      }
      this.credentialsProvider =
          ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    } else {
      this.credentialsProvider = credentialsProvider;
    }
  }

  /**
   * Provides a default transport channel provider bean, corresponding to the client library's
   * default transport channel provider. If the library supports both GRPC and REST transport, and
   * the useRest property is configured, the HTTP/JSON transport provider will be used instead of
   * GRPC.
   *
   * @return a default transport channel provider.
   */
  @Bean
  @ConditionalOnMissingBean(name = "defaultCatalogServiceTransportChannelProvider")
  public TransportChannelProvider defaultCatalogServiceTransportChannelProvider() {
    if (this.clientProperties.getUseRest()) {
      return CatalogServiceSettings.defaultHttpJsonTransportProviderBuilder().build();
    }
    return CatalogServiceSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a CatalogServiceSettings bean configured to use a DefaultCredentialsProvider and the
   * client library's default transport channel provider
   * (defaultCatalogServiceTransportChannelProvider()). It also configures the quota project ID and
   * executor thread count, if provided through properties.
   *
   * <p>Retry settings are also configured from service-level and method-level properties specified
   * in CatalogServiceSpringProperties. Method-level properties will take precedence over
   * service-level properties if available, and client library defaults will be used if neither are
   * specified.
   *
   * @param defaultTransportChannelProvider TransportChannelProvider to use in the settings.
   * @return a {@link CatalogServiceSettings} bean configured with {@link TransportChannelProvider}
   *     bean.
   */
  @Bean
  @ConditionalOnMissingBean
  public CatalogServiceSettings catalogServiceSettings(
      @Qualifier("defaultCatalogServiceTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    CatalogServiceSettings.Builder clientSettingsBuilder;
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder = CatalogServiceSettings.newHttpJsonBuilder();
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using REST (HTTP/JSON) transport.");
      }
    } else {
      clientSettingsBuilder = CatalogServiceSettings.newBuilder();
    }
    clientSettingsBuilder
        .setCredentialsProvider(this.credentialsProvider)
        .setTransportChannelProvider(defaultTransportChannelProvider)
        .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          CatalogServiceSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    Retry serviceRetry = clientProperties.getRetry();
    if (serviceRetry != null) {
      RetrySettings listEntryTypesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listEntryTypesSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.listEntryTypesSettings().setRetrySettings(listEntryTypesRetrySettings);

      RetrySettings getEntryTypeRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getEntryTypeSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getEntryTypeSettings().setRetrySettings(getEntryTypeRetrySettings);

      RetrySettings listAspectTypesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listAspectTypesSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .listAspectTypesSettings()
          .setRetrySettings(listAspectTypesRetrySettings);

      RetrySettings getAspectTypeRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getAspectTypeSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getAspectTypeSettings().setRetrySettings(getAspectTypeRetrySettings);

      RetrySettings listEntryGroupsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listEntryGroupsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .listEntryGroupsSettings()
          .setRetrySettings(listEntryGroupsRetrySettings);

      RetrySettings getEntryGroupRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getEntryGroupSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getEntryGroupSettings().setRetrySettings(getEntryGroupRetrySettings);

      RetrySettings createEntryRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createEntrySettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.createEntrySettings().setRetrySettings(createEntryRetrySettings);

      RetrySettings updateEntryRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateEntrySettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.updateEntrySettings().setRetrySettings(updateEntryRetrySettings);

      RetrySettings deleteEntryRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteEntrySettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.deleteEntrySettings().setRetrySettings(deleteEntryRetrySettings);

      RetrySettings listEntriesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listEntriesSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.listEntriesSettings().setRetrySettings(listEntriesRetrySettings);

      RetrySettings getEntryRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getEntrySettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getEntrySettings().setRetrySettings(getEntryRetrySettings);

      RetrySettings lookupEntryRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.lookupEntrySettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.lookupEntrySettings().setRetrySettings(lookupEntryRetrySettings);

      RetrySettings searchEntriesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.searchEntriesSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.searchEntriesSettings().setRetrySettings(searchEntriesRetrySettings);

      RetrySettings listLocationsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listLocationsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.listLocationsSettings().setRetrySettings(listLocationsRetrySettings);

      RetrySettings getLocationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getLocationSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getLocationSettings().setRetrySettings(getLocationRetrySettings);

      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured service-level retry settings from properties.");
      }
    }
    Retry listEntryTypesRetry = clientProperties.getListEntryTypesRetry();
    if (listEntryTypesRetry != null) {
      RetrySettings listEntryTypesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listEntryTypesSettings().getRetrySettings(),
              listEntryTypesRetry);
      clientSettingsBuilder.listEntryTypesSettings().setRetrySettings(listEntryTypesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listEntryTypes from properties.");
      }
    }
    Retry getEntryTypeRetry = clientProperties.getGetEntryTypeRetry();
    if (getEntryTypeRetry != null) {
      RetrySettings getEntryTypeRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getEntryTypeSettings().getRetrySettings(), getEntryTypeRetry);
      clientSettingsBuilder.getEntryTypeSettings().setRetrySettings(getEntryTypeRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getEntryType from properties.");
      }
    }
    Retry listAspectTypesRetry = clientProperties.getListAspectTypesRetry();
    if (listAspectTypesRetry != null) {
      RetrySettings listAspectTypesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listAspectTypesSettings().getRetrySettings(),
              listAspectTypesRetry);
      clientSettingsBuilder
          .listAspectTypesSettings()
          .setRetrySettings(listAspectTypesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listAspectTypes from properties.");
      }
    }
    Retry getAspectTypeRetry = clientProperties.getGetAspectTypeRetry();
    if (getAspectTypeRetry != null) {
      RetrySettings getAspectTypeRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getAspectTypeSettings().getRetrySettings(), getAspectTypeRetry);
      clientSettingsBuilder.getAspectTypeSettings().setRetrySettings(getAspectTypeRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getAspectType from properties.");
      }
    }
    Retry listEntryGroupsRetry = clientProperties.getListEntryGroupsRetry();
    if (listEntryGroupsRetry != null) {
      RetrySettings listEntryGroupsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listEntryGroupsSettings().getRetrySettings(),
              listEntryGroupsRetry);
      clientSettingsBuilder
          .listEntryGroupsSettings()
          .setRetrySettings(listEntryGroupsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listEntryGroups from properties.");
      }
    }
    Retry getEntryGroupRetry = clientProperties.getGetEntryGroupRetry();
    if (getEntryGroupRetry != null) {
      RetrySettings getEntryGroupRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getEntryGroupSettings().getRetrySettings(), getEntryGroupRetry);
      clientSettingsBuilder.getEntryGroupSettings().setRetrySettings(getEntryGroupRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getEntryGroup from properties.");
      }
    }
    Retry createEntryRetry = clientProperties.getCreateEntryRetry();
    if (createEntryRetry != null) {
      RetrySettings createEntryRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createEntrySettings().getRetrySettings(), createEntryRetry);
      clientSettingsBuilder.createEntrySettings().setRetrySettings(createEntryRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for createEntry from properties.");
      }
    }
    Retry updateEntryRetry = clientProperties.getUpdateEntryRetry();
    if (updateEntryRetry != null) {
      RetrySettings updateEntryRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateEntrySettings().getRetrySettings(), updateEntryRetry);
      clientSettingsBuilder.updateEntrySettings().setRetrySettings(updateEntryRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for updateEntry from properties.");
      }
    }
    Retry deleteEntryRetry = clientProperties.getDeleteEntryRetry();
    if (deleteEntryRetry != null) {
      RetrySettings deleteEntryRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteEntrySettings().getRetrySettings(), deleteEntryRetry);
      clientSettingsBuilder.deleteEntrySettings().setRetrySettings(deleteEntryRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for deleteEntry from properties.");
      }
    }
    Retry listEntriesRetry = clientProperties.getListEntriesRetry();
    if (listEntriesRetry != null) {
      RetrySettings listEntriesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listEntriesSettings().getRetrySettings(), listEntriesRetry);
      clientSettingsBuilder.listEntriesSettings().setRetrySettings(listEntriesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listEntries from properties.");
      }
    }
    Retry getEntryRetry = clientProperties.getGetEntryRetry();
    if (getEntryRetry != null) {
      RetrySettings getEntryRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getEntrySettings().getRetrySettings(), getEntryRetry);
      clientSettingsBuilder.getEntrySettings().setRetrySettings(getEntryRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getEntry from properties.");
      }
    }
    Retry lookupEntryRetry = clientProperties.getLookupEntryRetry();
    if (lookupEntryRetry != null) {
      RetrySettings lookupEntryRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.lookupEntrySettings().getRetrySettings(), lookupEntryRetry);
      clientSettingsBuilder.lookupEntrySettings().setRetrySettings(lookupEntryRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for lookupEntry from properties.");
      }
    }
    Retry searchEntriesRetry = clientProperties.getSearchEntriesRetry();
    if (searchEntriesRetry != null) {
      RetrySettings searchEntriesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.searchEntriesSettings().getRetrySettings(), searchEntriesRetry);
      clientSettingsBuilder.searchEntriesSettings().setRetrySettings(searchEntriesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for searchEntries from properties.");
      }
    }
    Retry listLocationsRetry = clientProperties.getListLocationsRetry();
    if (listLocationsRetry != null) {
      RetrySettings listLocationsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listLocationsSettings().getRetrySettings(), listLocationsRetry);
      clientSettingsBuilder.listLocationsSettings().setRetrySettings(listLocationsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listLocations from properties.");
      }
    }
    Retry getLocationRetry = clientProperties.getGetLocationRetry();
    if (getLocationRetry != null) {
      RetrySettings getLocationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getLocationSettings().getRetrySettings(), getLocationRetry);
      clientSettingsBuilder.getLocationSettings().setRetrySettings(getLocationRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getLocation from properties.");
      }
    }
    return clientSettingsBuilder.build();
  }

  /**
   * Provides a CatalogServiceClient bean configured with CatalogServiceSettings.
   *
   * @param catalogServiceSettings settings to configure an instance of client bean.
   * @return a {@link CatalogServiceClient} bean configured with {@link CatalogServiceSettings}
   */
  @Bean
  @ConditionalOnMissingBean
  public CatalogServiceClient catalogServiceClient(CatalogServiceSettings catalogServiceSettings)
      throws IOException {
    return CatalogServiceClient.create(catalogServiceSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-catalog-service";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
