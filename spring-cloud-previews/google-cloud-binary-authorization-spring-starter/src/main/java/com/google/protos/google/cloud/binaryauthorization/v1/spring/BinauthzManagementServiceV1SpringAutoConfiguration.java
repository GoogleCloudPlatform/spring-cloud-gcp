/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.protos.google.cloud.binaryauthorization.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.spring.autoconfigure.core.GcpContextAutoConfiguration;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.core.Retry;
import com.google.cloud.spring.core.util.RetryUtil;
import com.google.protos.google.cloud.binaryauthorization.v1.BinauthzManagementServiceV1Client;
import com.google.protos.google.cloud.binaryauthorization.v1.BinauthzManagementServiceV1Settings;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.AutoConfigureAfter;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link BinauthzManagementServiceV1Client}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@AutoConfigureAfter(GcpContextAutoConfiguration.class)
@ConditionalOnClass(BinauthzManagementServiceV1Client.class)
@ConditionalOnProperty(
    value =
        "com.google.protos.google.cloud.binaryauthorization.v1.binauthz-management-service-v1.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties(BinauthzManagementServiceV1SpringProperties.class)
public class BinauthzManagementServiceV1SpringAutoConfiguration {
  private final BinauthzManagementServiceV1SpringProperties clientProperties;
  private final CredentialsProvider credentialsProvider;
  private static final Log LOGGER =
      LogFactory.getLog(BinauthzManagementServiceV1SpringAutoConfiguration.class);

  protected BinauthzManagementServiceV1SpringAutoConfiguration(
      BinauthzManagementServiceV1SpringProperties clientProperties,
      CredentialsProvider credentialsProvider)
      throws IOException {
    this.clientProperties = clientProperties;
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from BinauthzManagementServiceV1-specific configuration");
      }
      this.credentialsProvider =
          ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    } else {
      this.credentialsProvider = credentialsProvider;
    }
  }

  /**
   * Provides a default transport channel provider bean. The default is gRPC and will default to it
   * unless the useRest option is provided to use HTTP transport instead
   *
   * @return a default transport channel provider.
   */
  @Bean
  @ConditionalOnMissingBean(name = "defaultBinauthzManagementServiceV1TransportChannelProvider")
  public TransportChannelProvider defaultBinauthzManagementServiceV1TransportChannelProvider() {
    if (this.clientProperties.getUseRest()) {
      return BinauthzManagementServiceV1Settings.defaultHttpJsonTransportProviderBuilder().build();
    }
    return BinauthzManagementServiceV1Settings.defaultTransportChannelProvider();
  }

  /**
   * Provides a BinauthzManagementServiceV1Settings bean configured to use a
   * DefaultCredentialsProvider and the client library's default transport channel provider
   * (defaultBinauthzManagementServiceV1TransportChannelProvider()). It also configures the quota
   * project ID and executor thread count, if provided through properties.
   *
   * <p>Retry settings are also configured from service-level and method-level properties specified
   * in BinauthzManagementServiceV1SpringProperties. Method-level properties will take precedence
   * over service-level properties if available, and client library defaults will be used if neither
   * are specified.
   *
   * @param defaultTransportChannelProvider TransportChannelProvider to use in the settings.
   * @return a {@link BinauthzManagementServiceV1Settings} bean configured with {@link
   *     TransportChannelProvider} bean.
   */
  @Bean
  @ConditionalOnMissingBean
  public BinauthzManagementServiceV1Settings binauthzManagementServiceV1Settings(
      @Qualifier("defaultBinauthzManagementServiceV1TransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    BinauthzManagementServiceV1Settings.Builder clientSettingsBuilder;
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder = BinauthzManagementServiceV1Settings.newHttpJsonBuilder();
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using REST (HTTP/JSON) transport.");
      }
    } else {
      clientSettingsBuilder = BinauthzManagementServiceV1Settings.newBuilder();
    }
    clientSettingsBuilder
        .setCredentialsProvider(this.credentialsProvider)
        .setTransportChannelProvider(defaultTransportChannelProvider)
        .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          BinauthzManagementServiceV1Settings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    Retry serviceRetry = clientProperties.getRetry();
    if (serviceRetry != null) {
      RetrySettings getPolicyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getPolicySettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getPolicySettings().setRetrySettings(getPolicyRetrySettings);

      RetrySettings updatePolicyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updatePolicySettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.updatePolicySettings().setRetrySettings(updatePolicyRetrySettings);

      RetrySettings createAttestorRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createAttestorSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.createAttestorSettings().setRetrySettings(createAttestorRetrySettings);

      RetrySettings getAttestorRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getAttestorSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getAttestorSettings().setRetrySettings(getAttestorRetrySettings);

      RetrySettings updateAttestorRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateAttestorSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.updateAttestorSettings().setRetrySettings(updateAttestorRetrySettings);

      RetrySettings listAttestorsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listAttestorsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.listAttestorsSettings().setRetrySettings(listAttestorsRetrySettings);

      RetrySettings deleteAttestorRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteAttestorSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.deleteAttestorSettings().setRetrySettings(deleteAttestorRetrySettings);

      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured service-level retry settings from properties.");
      }
    }
    Retry getPolicyRetry = clientProperties.getGetPolicyRetry();
    if (getPolicyRetry != null) {
      RetrySettings getPolicyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getPolicySettings().getRetrySettings(), getPolicyRetry);
      clientSettingsBuilder.getPolicySettings().setRetrySettings(getPolicyRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getPolicy from properties.");
      }
    }
    Retry updatePolicyRetry = clientProperties.getUpdatePolicyRetry();
    if (updatePolicyRetry != null) {
      RetrySettings updatePolicyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updatePolicySettings().getRetrySettings(), updatePolicyRetry);
      clientSettingsBuilder.updatePolicySettings().setRetrySettings(updatePolicyRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for updatePolicy from properties.");
      }
    }
    Retry createAttestorRetry = clientProperties.getCreateAttestorRetry();
    if (createAttestorRetry != null) {
      RetrySettings createAttestorRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createAttestorSettings().getRetrySettings(),
              createAttestorRetry);
      clientSettingsBuilder.createAttestorSettings().setRetrySettings(createAttestorRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for createAttestor from properties.");
      }
    }
    Retry getAttestorRetry = clientProperties.getGetAttestorRetry();
    if (getAttestorRetry != null) {
      RetrySettings getAttestorRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getAttestorSettings().getRetrySettings(), getAttestorRetry);
      clientSettingsBuilder.getAttestorSettings().setRetrySettings(getAttestorRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getAttestor from properties.");
      }
    }
    Retry updateAttestorRetry = clientProperties.getUpdateAttestorRetry();
    if (updateAttestorRetry != null) {
      RetrySettings updateAttestorRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateAttestorSettings().getRetrySettings(),
              updateAttestorRetry);
      clientSettingsBuilder.updateAttestorSettings().setRetrySettings(updateAttestorRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for updateAttestor from properties.");
      }
    }
    Retry listAttestorsRetry = clientProperties.getListAttestorsRetry();
    if (listAttestorsRetry != null) {
      RetrySettings listAttestorsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listAttestorsSettings().getRetrySettings(), listAttestorsRetry);
      clientSettingsBuilder.listAttestorsSettings().setRetrySettings(listAttestorsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listAttestors from properties.");
      }
    }
    Retry deleteAttestorRetry = clientProperties.getDeleteAttestorRetry();
    if (deleteAttestorRetry != null) {
      RetrySettings deleteAttestorRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteAttestorSettings().getRetrySettings(),
              deleteAttestorRetry);
      clientSettingsBuilder.deleteAttestorSettings().setRetrySettings(deleteAttestorRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for deleteAttestor from properties.");
      }
    }
    return clientSettingsBuilder.build();
  }

  /**
   * Provides a BinauthzManagementServiceV1Client bean configured with
   * BinauthzManagementServiceV1Settings.
   *
   * @param binauthzManagementServiceV1Settings settings to configure an instance of client bean.
   * @return a {@link BinauthzManagementServiceV1Client} bean configured with {@link
   *     BinauthzManagementServiceV1Settings}
   */
  @Bean
  @ConditionalOnMissingBean
  public BinauthzManagementServiceV1Client binauthzManagementServiceV1Client(
      BinauthzManagementServiceV1Settings binauthzManagementServiceV1Settings) throws IOException {
    return BinauthzManagementServiceV1Client.create(binauthzManagementServiceV1Settings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-binauthz-management-service-v1";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
