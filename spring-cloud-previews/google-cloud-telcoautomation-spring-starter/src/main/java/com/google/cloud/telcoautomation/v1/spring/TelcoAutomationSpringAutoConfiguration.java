/*
 * Copyright 2024 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.telcoautomation.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.spring.autoconfigure.core.GcpContextAutoConfiguration;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.core.Retry;
import com.google.cloud.spring.core.util.RetryUtil;
import com.google.cloud.telcoautomation.v1.TelcoAutomationClient;
import com.google.cloud.telcoautomation.v1.TelcoAutomationSettings;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.AutoConfigureAfter;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link TelcoAutomationClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@AutoConfigureAfter(GcpContextAutoConfiguration.class)
@ConditionalOnClass(TelcoAutomationClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.telcoautomation.v1.telco-automation.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties(TelcoAutomationSpringProperties.class)
public class TelcoAutomationSpringAutoConfiguration {
  private final TelcoAutomationSpringProperties clientProperties;
  private final CredentialsProvider credentialsProvider;
  private static final Log LOGGER = LogFactory.getLog(TelcoAutomationSpringAutoConfiguration.class);

  protected TelcoAutomationSpringAutoConfiguration(
      TelcoAutomationSpringProperties clientProperties, CredentialsProvider credentialsProvider)
      throws IOException {
    this.clientProperties = clientProperties;
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from TelcoAutomation-specific configuration");
      }
      this.credentialsProvider =
          ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    } else {
      this.credentialsProvider = credentialsProvider;
    }
  }

  /**
   * Provides a default transport channel provider bean, corresponding to the client library's
   * default transport channel provider. If the library supports both GRPC and REST transport, and
   * the useRest property is configured, the HTTP/JSON transport provider will be used instead of
   * GRPC.
   *
   * @return a default transport channel provider.
   */
  @Bean
  @ConditionalOnMissingBean(name = "defaultTelcoAutomationTransportChannelProvider")
  public TransportChannelProvider defaultTelcoAutomationTransportChannelProvider() {
    if (this.clientProperties.getUseRest()) {
      return TelcoAutomationSettings.defaultHttpJsonTransportProviderBuilder().build();
    }
    return TelcoAutomationSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a TelcoAutomationSettings bean configured to use a DefaultCredentialsProvider and the
   * client library's default transport channel provider
   * (defaultTelcoAutomationTransportChannelProvider()). It also configures the quota project ID and
   * executor thread count, if provided through properties.
   *
   * <p>Retry settings are also configured from service-level and method-level properties specified
   * in TelcoAutomationSpringProperties. Method-level properties will take precedence over
   * service-level properties if available, and client library defaults will be used if neither are
   * specified.
   *
   * @param defaultTransportChannelProvider TransportChannelProvider to use in the settings.
   * @return a {@link TelcoAutomationSettings} bean configured with {@link TransportChannelProvider}
   *     bean.
   */
  @Bean
  @ConditionalOnMissingBean
  public TelcoAutomationSettings telcoAutomationSettings(
      @Qualifier("defaultTelcoAutomationTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    TelcoAutomationSettings.Builder clientSettingsBuilder;
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder = TelcoAutomationSettings.newHttpJsonBuilder();
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using REST (HTTP/JSON) transport.");
      }
    } else {
      clientSettingsBuilder = TelcoAutomationSettings.newBuilder();
    }
    clientSettingsBuilder
        .setCredentialsProvider(this.credentialsProvider)
        .setTransportChannelProvider(defaultTransportChannelProvider)
        .setEndpoint(TelcoAutomationSettings.getDefaultEndpoint())
        .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          TelcoAutomationSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    Retry serviceRetry = clientProperties.getRetry();
    if (serviceRetry != null) {
      RetrySettings listOrchestrationClustersRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listOrchestrationClustersSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .listOrchestrationClustersSettings()
          .setRetrySettings(listOrchestrationClustersRetrySettings);

      RetrySettings getOrchestrationClusterRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getOrchestrationClusterSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .getOrchestrationClusterSettings()
          .setRetrySettings(getOrchestrationClusterRetrySettings);

      RetrySettings listEdgeSlmsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listEdgeSlmsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.listEdgeSlmsSettings().setRetrySettings(listEdgeSlmsRetrySettings);

      RetrySettings getEdgeSlmRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getEdgeSlmSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getEdgeSlmSettings().setRetrySettings(getEdgeSlmRetrySettings);

      RetrySettings createBlueprintRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createBlueprintSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .createBlueprintSettings()
          .setRetrySettings(createBlueprintRetrySettings);

      RetrySettings updateBlueprintRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateBlueprintSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .updateBlueprintSettings()
          .setRetrySettings(updateBlueprintRetrySettings);

      RetrySettings getBlueprintRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getBlueprintSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getBlueprintSettings().setRetrySettings(getBlueprintRetrySettings);

      RetrySettings deleteBlueprintRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteBlueprintSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .deleteBlueprintSettings()
          .setRetrySettings(deleteBlueprintRetrySettings);

      RetrySettings listBlueprintsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listBlueprintsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.listBlueprintsSettings().setRetrySettings(listBlueprintsRetrySettings);

      RetrySettings approveBlueprintRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.approveBlueprintSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .approveBlueprintSettings()
          .setRetrySettings(approveBlueprintRetrySettings);

      RetrySettings proposeBlueprintRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.proposeBlueprintSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .proposeBlueprintSettings()
          .setRetrySettings(proposeBlueprintRetrySettings);

      RetrySettings rejectBlueprintRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.rejectBlueprintSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .rejectBlueprintSettings()
          .setRetrySettings(rejectBlueprintRetrySettings);

      RetrySettings listBlueprintRevisionsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listBlueprintRevisionsSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .listBlueprintRevisionsSettings()
          .setRetrySettings(listBlueprintRevisionsRetrySettings);

      RetrySettings searchBlueprintRevisionsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.searchBlueprintRevisionsSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .searchBlueprintRevisionsSettings()
          .setRetrySettings(searchBlueprintRevisionsRetrySettings);

      RetrySettings searchDeploymentRevisionsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.searchDeploymentRevisionsSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .searchDeploymentRevisionsSettings()
          .setRetrySettings(searchDeploymentRevisionsRetrySettings);

      RetrySettings discardBlueprintChangesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.discardBlueprintChangesSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .discardBlueprintChangesSettings()
          .setRetrySettings(discardBlueprintChangesRetrySettings);

      RetrySettings listPublicBlueprintsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listPublicBlueprintsSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .listPublicBlueprintsSettings()
          .setRetrySettings(listPublicBlueprintsRetrySettings);

      RetrySettings getPublicBlueprintRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getPublicBlueprintSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .getPublicBlueprintSettings()
          .setRetrySettings(getPublicBlueprintRetrySettings);

      RetrySettings createDeploymentRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createDeploymentSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .createDeploymentSettings()
          .setRetrySettings(createDeploymentRetrySettings);

      RetrySettings updateDeploymentRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateDeploymentSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .updateDeploymentSettings()
          .setRetrySettings(updateDeploymentRetrySettings);

      RetrySettings getDeploymentRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getDeploymentSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getDeploymentSettings().setRetrySettings(getDeploymentRetrySettings);

      RetrySettings removeDeploymentRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.removeDeploymentSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .removeDeploymentSettings()
          .setRetrySettings(removeDeploymentRetrySettings);

      RetrySettings listDeploymentsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listDeploymentsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .listDeploymentsSettings()
          .setRetrySettings(listDeploymentsRetrySettings);

      RetrySettings listDeploymentRevisionsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listDeploymentRevisionsSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .listDeploymentRevisionsSettings()
          .setRetrySettings(listDeploymentRevisionsRetrySettings);

      RetrySettings discardDeploymentChangesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.discardDeploymentChangesSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .discardDeploymentChangesSettings()
          .setRetrySettings(discardDeploymentChangesRetrySettings);

      RetrySettings applyDeploymentRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.applyDeploymentSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .applyDeploymentSettings()
          .setRetrySettings(applyDeploymentRetrySettings);

      RetrySettings computeDeploymentStatusRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.computeDeploymentStatusSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .computeDeploymentStatusSettings()
          .setRetrySettings(computeDeploymentStatusRetrySettings);

      RetrySettings rollbackDeploymentRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.rollbackDeploymentSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .rollbackDeploymentSettings()
          .setRetrySettings(rollbackDeploymentRetrySettings);

      RetrySettings getHydratedDeploymentRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getHydratedDeploymentSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .getHydratedDeploymentSettings()
          .setRetrySettings(getHydratedDeploymentRetrySettings);

      RetrySettings listHydratedDeploymentsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listHydratedDeploymentsSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .listHydratedDeploymentsSettings()
          .setRetrySettings(listHydratedDeploymentsRetrySettings);

      RetrySettings updateHydratedDeploymentRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateHydratedDeploymentSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .updateHydratedDeploymentSettings()
          .setRetrySettings(updateHydratedDeploymentRetrySettings);

      RetrySettings applyHydratedDeploymentRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.applyHydratedDeploymentSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .applyHydratedDeploymentSettings()
          .setRetrySettings(applyHydratedDeploymentRetrySettings);

      RetrySettings listLocationsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listLocationsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.listLocationsSettings().setRetrySettings(listLocationsRetrySettings);

      RetrySettings getLocationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getLocationSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getLocationSettings().setRetrySettings(getLocationRetrySettings);

      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured service-level retry settings from properties.");
      }
    }
    Retry listOrchestrationClustersRetry = clientProperties.getListOrchestrationClustersRetry();
    if (listOrchestrationClustersRetry != null) {
      RetrySettings listOrchestrationClustersRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listOrchestrationClustersSettings().getRetrySettings(),
              listOrchestrationClustersRetry);
      clientSettingsBuilder
          .listOrchestrationClustersSettings()
          .setRetrySettings(listOrchestrationClustersRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listOrchestrationClusters from properties.");
      }
    }
    Retry getOrchestrationClusterRetry = clientProperties.getGetOrchestrationClusterRetry();
    if (getOrchestrationClusterRetry != null) {
      RetrySettings getOrchestrationClusterRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getOrchestrationClusterSettings().getRetrySettings(),
              getOrchestrationClusterRetry);
      clientSettingsBuilder
          .getOrchestrationClusterSettings()
          .setRetrySettings(getOrchestrationClusterRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for getOrchestrationCluster from properties.");
      }
    }
    Retry listEdgeSlmsRetry = clientProperties.getListEdgeSlmsRetry();
    if (listEdgeSlmsRetry != null) {
      RetrySettings listEdgeSlmsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listEdgeSlmsSettings().getRetrySettings(), listEdgeSlmsRetry);
      clientSettingsBuilder.listEdgeSlmsSettings().setRetrySettings(listEdgeSlmsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listEdgeSlms from properties.");
      }
    }
    Retry getEdgeSlmRetry = clientProperties.getGetEdgeSlmRetry();
    if (getEdgeSlmRetry != null) {
      RetrySettings getEdgeSlmRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getEdgeSlmSettings().getRetrySettings(), getEdgeSlmRetry);
      clientSettingsBuilder.getEdgeSlmSettings().setRetrySettings(getEdgeSlmRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getEdgeSlm from properties.");
      }
    }
    Retry createBlueprintRetry = clientProperties.getCreateBlueprintRetry();
    if (createBlueprintRetry != null) {
      RetrySettings createBlueprintRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createBlueprintSettings().getRetrySettings(),
              createBlueprintRetry);
      clientSettingsBuilder
          .createBlueprintSettings()
          .setRetrySettings(createBlueprintRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for createBlueprint from properties.");
      }
    }
    Retry updateBlueprintRetry = clientProperties.getUpdateBlueprintRetry();
    if (updateBlueprintRetry != null) {
      RetrySettings updateBlueprintRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateBlueprintSettings().getRetrySettings(),
              updateBlueprintRetry);
      clientSettingsBuilder
          .updateBlueprintSettings()
          .setRetrySettings(updateBlueprintRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for updateBlueprint from properties.");
      }
    }
    Retry getBlueprintRetry = clientProperties.getGetBlueprintRetry();
    if (getBlueprintRetry != null) {
      RetrySettings getBlueprintRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getBlueprintSettings().getRetrySettings(), getBlueprintRetry);
      clientSettingsBuilder.getBlueprintSettings().setRetrySettings(getBlueprintRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getBlueprint from properties.");
      }
    }
    Retry deleteBlueprintRetry = clientProperties.getDeleteBlueprintRetry();
    if (deleteBlueprintRetry != null) {
      RetrySettings deleteBlueprintRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteBlueprintSettings().getRetrySettings(),
              deleteBlueprintRetry);
      clientSettingsBuilder
          .deleteBlueprintSettings()
          .setRetrySettings(deleteBlueprintRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for deleteBlueprint from properties.");
      }
    }
    Retry listBlueprintsRetry = clientProperties.getListBlueprintsRetry();
    if (listBlueprintsRetry != null) {
      RetrySettings listBlueprintsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listBlueprintsSettings().getRetrySettings(),
              listBlueprintsRetry);
      clientSettingsBuilder.listBlueprintsSettings().setRetrySettings(listBlueprintsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listBlueprints from properties.");
      }
    }
    Retry approveBlueprintRetry = clientProperties.getApproveBlueprintRetry();
    if (approveBlueprintRetry != null) {
      RetrySettings approveBlueprintRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.approveBlueprintSettings().getRetrySettings(),
              approveBlueprintRetry);
      clientSettingsBuilder
          .approveBlueprintSettings()
          .setRetrySettings(approveBlueprintRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for approveBlueprint from properties.");
      }
    }
    Retry proposeBlueprintRetry = clientProperties.getProposeBlueprintRetry();
    if (proposeBlueprintRetry != null) {
      RetrySettings proposeBlueprintRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.proposeBlueprintSettings().getRetrySettings(),
              proposeBlueprintRetry);
      clientSettingsBuilder
          .proposeBlueprintSettings()
          .setRetrySettings(proposeBlueprintRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for proposeBlueprint from properties.");
      }
    }
    Retry rejectBlueprintRetry = clientProperties.getRejectBlueprintRetry();
    if (rejectBlueprintRetry != null) {
      RetrySettings rejectBlueprintRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.rejectBlueprintSettings().getRetrySettings(),
              rejectBlueprintRetry);
      clientSettingsBuilder
          .rejectBlueprintSettings()
          .setRetrySettings(rejectBlueprintRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for rejectBlueprint from properties.");
      }
    }
    Retry listBlueprintRevisionsRetry = clientProperties.getListBlueprintRevisionsRetry();
    if (listBlueprintRevisionsRetry != null) {
      RetrySettings listBlueprintRevisionsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listBlueprintRevisionsSettings().getRetrySettings(),
              listBlueprintRevisionsRetry);
      clientSettingsBuilder
          .listBlueprintRevisionsSettings()
          .setRetrySettings(listBlueprintRevisionsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listBlueprintRevisions from properties.");
      }
    }
    Retry searchBlueprintRevisionsRetry = clientProperties.getSearchBlueprintRevisionsRetry();
    if (searchBlueprintRevisionsRetry != null) {
      RetrySettings searchBlueprintRevisionsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.searchBlueprintRevisionsSettings().getRetrySettings(),
              searchBlueprintRevisionsRetry);
      clientSettingsBuilder
          .searchBlueprintRevisionsSettings()
          .setRetrySettings(searchBlueprintRevisionsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for searchBlueprintRevisions from properties.");
      }
    }
    Retry searchDeploymentRevisionsRetry = clientProperties.getSearchDeploymentRevisionsRetry();
    if (searchDeploymentRevisionsRetry != null) {
      RetrySettings searchDeploymentRevisionsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.searchDeploymentRevisionsSettings().getRetrySettings(),
              searchDeploymentRevisionsRetry);
      clientSettingsBuilder
          .searchDeploymentRevisionsSettings()
          .setRetrySettings(searchDeploymentRevisionsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for searchDeploymentRevisions from properties.");
      }
    }
    Retry discardBlueprintChangesRetry = clientProperties.getDiscardBlueprintChangesRetry();
    if (discardBlueprintChangesRetry != null) {
      RetrySettings discardBlueprintChangesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.discardBlueprintChangesSettings().getRetrySettings(),
              discardBlueprintChangesRetry);
      clientSettingsBuilder
          .discardBlueprintChangesSettings()
          .setRetrySettings(discardBlueprintChangesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for discardBlueprintChanges from properties.");
      }
    }
    Retry listPublicBlueprintsRetry = clientProperties.getListPublicBlueprintsRetry();
    if (listPublicBlueprintsRetry != null) {
      RetrySettings listPublicBlueprintsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listPublicBlueprintsSettings().getRetrySettings(),
              listPublicBlueprintsRetry);
      clientSettingsBuilder
          .listPublicBlueprintsSettings()
          .setRetrySettings(listPublicBlueprintsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listPublicBlueprints from properties.");
      }
    }
    Retry getPublicBlueprintRetry = clientProperties.getGetPublicBlueprintRetry();
    if (getPublicBlueprintRetry != null) {
      RetrySettings getPublicBlueprintRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getPublicBlueprintSettings().getRetrySettings(),
              getPublicBlueprintRetry);
      clientSettingsBuilder
          .getPublicBlueprintSettings()
          .setRetrySettings(getPublicBlueprintRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for getPublicBlueprint from properties.");
      }
    }
    Retry createDeploymentRetry = clientProperties.getCreateDeploymentRetry();
    if (createDeploymentRetry != null) {
      RetrySettings createDeploymentRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createDeploymentSettings().getRetrySettings(),
              createDeploymentRetry);
      clientSettingsBuilder
          .createDeploymentSettings()
          .setRetrySettings(createDeploymentRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for createDeployment from properties.");
      }
    }
    Retry updateDeploymentRetry = clientProperties.getUpdateDeploymentRetry();
    if (updateDeploymentRetry != null) {
      RetrySettings updateDeploymentRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateDeploymentSettings().getRetrySettings(),
              updateDeploymentRetry);
      clientSettingsBuilder
          .updateDeploymentSettings()
          .setRetrySettings(updateDeploymentRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for updateDeployment from properties.");
      }
    }
    Retry getDeploymentRetry = clientProperties.getGetDeploymentRetry();
    if (getDeploymentRetry != null) {
      RetrySettings getDeploymentRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getDeploymentSettings().getRetrySettings(), getDeploymentRetry);
      clientSettingsBuilder.getDeploymentSettings().setRetrySettings(getDeploymentRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getDeployment from properties.");
      }
    }
    Retry removeDeploymentRetry = clientProperties.getRemoveDeploymentRetry();
    if (removeDeploymentRetry != null) {
      RetrySettings removeDeploymentRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.removeDeploymentSettings().getRetrySettings(),
              removeDeploymentRetry);
      clientSettingsBuilder
          .removeDeploymentSettings()
          .setRetrySettings(removeDeploymentRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for removeDeployment from properties.");
      }
    }
    Retry listDeploymentsRetry = clientProperties.getListDeploymentsRetry();
    if (listDeploymentsRetry != null) {
      RetrySettings listDeploymentsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listDeploymentsSettings().getRetrySettings(),
              listDeploymentsRetry);
      clientSettingsBuilder
          .listDeploymentsSettings()
          .setRetrySettings(listDeploymentsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listDeployments from properties.");
      }
    }
    Retry listDeploymentRevisionsRetry = clientProperties.getListDeploymentRevisionsRetry();
    if (listDeploymentRevisionsRetry != null) {
      RetrySettings listDeploymentRevisionsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listDeploymentRevisionsSettings().getRetrySettings(),
              listDeploymentRevisionsRetry);
      clientSettingsBuilder
          .listDeploymentRevisionsSettings()
          .setRetrySettings(listDeploymentRevisionsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listDeploymentRevisions from properties.");
      }
    }
    Retry discardDeploymentChangesRetry = clientProperties.getDiscardDeploymentChangesRetry();
    if (discardDeploymentChangesRetry != null) {
      RetrySettings discardDeploymentChangesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.discardDeploymentChangesSettings().getRetrySettings(),
              discardDeploymentChangesRetry);
      clientSettingsBuilder
          .discardDeploymentChangesSettings()
          .setRetrySettings(discardDeploymentChangesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for discardDeploymentChanges from properties.");
      }
    }
    Retry applyDeploymentRetry = clientProperties.getApplyDeploymentRetry();
    if (applyDeploymentRetry != null) {
      RetrySettings applyDeploymentRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.applyDeploymentSettings().getRetrySettings(),
              applyDeploymentRetry);
      clientSettingsBuilder
          .applyDeploymentSettings()
          .setRetrySettings(applyDeploymentRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for applyDeployment from properties.");
      }
    }
    Retry computeDeploymentStatusRetry = clientProperties.getComputeDeploymentStatusRetry();
    if (computeDeploymentStatusRetry != null) {
      RetrySettings computeDeploymentStatusRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.computeDeploymentStatusSettings().getRetrySettings(),
              computeDeploymentStatusRetry);
      clientSettingsBuilder
          .computeDeploymentStatusSettings()
          .setRetrySettings(computeDeploymentStatusRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for computeDeploymentStatus from properties.");
      }
    }
    Retry rollbackDeploymentRetry = clientProperties.getRollbackDeploymentRetry();
    if (rollbackDeploymentRetry != null) {
      RetrySettings rollbackDeploymentRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.rollbackDeploymentSettings().getRetrySettings(),
              rollbackDeploymentRetry);
      clientSettingsBuilder
          .rollbackDeploymentSettings()
          .setRetrySettings(rollbackDeploymentRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for rollbackDeployment from properties.");
      }
    }
    Retry getHydratedDeploymentRetry = clientProperties.getGetHydratedDeploymentRetry();
    if (getHydratedDeploymentRetry != null) {
      RetrySettings getHydratedDeploymentRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getHydratedDeploymentSettings().getRetrySettings(),
              getHydratedDeploymentRetry);
      clientSettingsBuilder
          .getHydratedDeploymentSettings()
          .setRetrySettings(getHydratedDeploymentRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for getHydratedDeployment from properties.");
      }
    }
    Retry listHydratedDeploymentsRetry = clientProperties.getListHydratedDeploymentsRetry();
    if (listHydratedDeploymentsRetry != null) {
      RetrySettings listHydratedDeploymentsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listHydratedDeploymentsSettings().getRetrySettings(),
              listHydratedDeploymentsRetry);
      clientSettingsBuilder
          .listHydratedDeploymentsSettings()
          .setRetrySettings(listHydratedDeploymentsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listHydratedDeployments from properties.");
      }
    }
    Retry updateHydratedDeploymentRetry = clientProperties.getUpdateHydratedDeploymentRetry();
    if (updateHydratedDeploymentRetry != null) {
      RetrySettings updateHydratedDeploymentRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateHydratedDeploymentSettings().getRetrySettings(),
              updateHydratedDeploymentRetry);
      clientSettingsBuilder
          .updateHydratedDeploymentSettings()
          .setRetrySettings(updateHydratedDeploymentRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for updateHydratedDeployment from properties.");
      }
    }
    Retry applyHydratedDeploymentRetry = clientProperties.getApplyHydratedDeploymentRetry();
    if (applyHydratedDeploymentRetry != null) {
      RetrySettings applyHydratedDeploymentRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.applyHydratedDeploymentSettings().getRetrySettings(),
              applyHydratedDeploymentRetry);
      clientSettingsBuilder
          .applyHydratedDeploymentSettings()
          .setRetrySettings(applyHydratedDeploymentRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for applyHydratedDeployment from properties.");
      }
    }
    Retry listLocationsRetry = clientProperties.getListLocationsRetry();
    if (listLocationsRetry != null) {
      RetrySettings listLocationsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listLocationsSettings().getRetrySettings(), listLocationsRetry);
      clientSettingsBuilder.listLocationsSettings().setRetrySettings(listLocationsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listLocations from properties.");
      }
    }
    Retry getLocationRetry = clientProperties.getGetLocationRetry();
    if (getLocationRetry != null) {
      RetrySettings getLocationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getLocationSettings().getRetrySettings(), getLocationRetry);
      clientSettingsBuilder.getLocationSettings().setRetrySettings(getLocationRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getLocation from properties.");
      }
    }
    return clientSettingsBuilder.build();
  }

  /**
   * Provides a TelcoAutomationClient bean configured with TelcoAutomationSettings.
   *
   * @param telcoAutomationSettings settings to configure an instance of client bean.
   * @return a {@link TelcoAutomationClient} bean configured with {@link TelcoAutomationSettings}
   */
  @Bean
  @ConditionalOnMissingBean
  public TelcoAutomationClient telcoAutomationClient(
      TelcoAutomationSettings telcoAutomationSettings) throws IOException {
    return TelcoAutomationClient.create(telcoAutomationSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-telco-automation";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
