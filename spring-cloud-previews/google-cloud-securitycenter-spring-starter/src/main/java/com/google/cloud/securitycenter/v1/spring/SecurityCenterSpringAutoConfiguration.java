/*
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.securitycenter.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.securitycenter.v1.SecurityCenterClient;
import com.google.cloud.securitycenter.v1.SecurityCenterSettings;
import com.google.cloud.spring.autoconfigure.core.GcpContextAutoConfiguration;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.core.Retry;
import com.google.cloud.spring.core.util.RetryUtil;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.AutoConfigureAfter;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link SecurityCenterClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@AutoConfigureAfter(GcpContextAutoConfiguration.class)
@ConditionalOnClass(SecurityCenterClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.securitycenter.v1.security-center.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties(SecurityCenterSpringProperties.class)
public class SecurityCenterSpringAutoConfiguration {
  private final SecurityCenterSpringProperties clientProperties;
  private final CredentialsProvider credentialsProvider;
  private static final Log LOGGER = LogFactory.getLog(SecurityCenterSpringAutoConfiguration.class);

  protected SecurityCenterSpringAutoConfiguration(
      SecurityCenterSpringProperties clientProperties, CredentialsProvider credentialsProvider)
      throws IOException {
    this.clientProperties = clientProperties;
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from SecurityCenter-specific configuration");
      }
      this.credentialsProvider =
          ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    } else {
      this.credentialsProvider = credentialsProvider;
    }
  }

  /**
   * Provides a default transport channel provider bean, corresponding to the client library's
   * default transport channel provider. If the library supports both GRPC and REST transport, and
   * the useRest property is configured, the HTTP/JSON transport provider will be used instead of
   * GRPC.
   *
   * @return a default transport channel provider.
   */
  @Bean
  @ConditionalOnMissingBean(name = "defaultSecurityCenterTransportChannelProvider")
  public TransportChannelProvider defaultSecurityCenterTransportChannelProvider() {
    if (this.clientProperties.getUseRest()) {
      return SecurityCenterSettings.defaultHttpJsonTransportProviderBuilder().build();
    }
    return SecurityCenterSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a SecurityCenterSettings bean configured to use a DefaultCredentialsProvider and the
   * client library's default transport channel provider
   * (defaultSecurityCenterTransportChannelProvider()). It also configures the quota project ID and
   * executor thread count, if provided through properties.
   *
   * <p>Retry settings are also configured from service-level and method-level properties specified
   * in SecurityCenterSpringProperties. Method-level properties will take precedence over
   * service-level properties if available, and client library defaults will be used if neither are
   * specified.
   *
   * @param defaultTransportChannelProvider TransportChannelProvider to use in the settings.
   * @return a {@link SecurityCenterSettings} bean configured with {@link TransportChannelProvider}
   *     bean.
   */
  @Bean
  @ConditionalOnMissingBean
  public SecurityCenterSettings securityCenterSettings(
      @Qualifier("defaultSecurityCenterTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    SecurityCenterSettings.Builder clientSettingsBuilder;
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder = SecurityCenterSettings.newHttpJsonBuilder();
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using REST (HTTP/JSON) transport.");
      }
    } else {
      clientSettingsBuilder = SecurityCenterSettings.newBuilder();
    }
    clientSettingsBuilder
        .setCredentialsProvider(this.credentialsProvider)
        .setTransportChannelProvider(defaultTransportChannelProvider)
        .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          SecurityCenterSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    Retry serviceRetry = clientProperties.getRetry();
    if (serviceRetry != null) {
      RetrySettings createSecurityHealthAnalyticsCustomModuleRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .createSecurityHealthAnalyticsCustomModuleSettings()
                  .getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .createSecurityHealthAnalyticsCustomModuleSettings()
          .setRetrySettings(createSecurityHealthAnalyticsCustomModuleRetrySettings);

      RetrySettings createSourceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createSourceSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.createSourceSettings().setRetrySettings(createSourceRetrySettings);

      RetrySettings createFindingRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createFindingSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.createFindingSettings().setRetrySettings(createFindingRetrySettings);

      RetrySettings createMuteConfigRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createMuteConfigSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .createMuteConfigSettings()
          .setRetrySettings(createMuteConfigRetrySettings);

      RetrySettings createNotificationConfigRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createNotificationConfigSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .createNotificationConfigSettings()
          .setRetrySettings(createNotificationConfigRetrySettings);

      RetrySettings deleteMuteConfigRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteMuteConfigSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .deleteMuteConfigSettings()
          .setRetrySettings(deleteMuteConfigRetrySettings);

      RetrySettings deleteNotificationConfigRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteNotificationConfigSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .deleteNotificationConfigSettings()
          .setRetrySettings(deleteNotificationConfigRetrySettings);

      RetrySettings deleteSecurityHealthAnalyticsCustomModuleRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .deleteSecurityHealthAnalyticsCustomModuleSettings()
                  .getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .deleteSecurityHealthAnalyticsCustomModuleSettings()
          .setRetrySettings(deleteSecurityHealthAnalyticsCustomModuleRetrySettings);

      RetrySettings getBigQueryExportRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getBigQueryExportSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .getBigQueryExportSettings()
          .setRetrySettings(getBigQueryExportRetrySettings);

      RetrySettings getIamPolicyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getIamPolicySettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getIamPolicySettings().setRetrySettings(getIamPolicyRetrySettings);

      RetrySettings getMuteConfigRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getMuteConfigSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getMuteConfigSettings().setRetrySettings(getMuteConfigRetrySettings);

      RetrySettings getNotificationConfigRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getNotificationConfigSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .getNotificationConfigSettings()
          .setRetrySettings(getNotificationConfigRetrySettings);

      RetrySettings getOrganizationSettingsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getOrganizationSettingsSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .getOrganizationSettingsSettings()
          .setRetrySettings(getOrganizationSettingsRetrySettings);

      RetrySettings getEffectiveSecurityHealthAnalyticsCustomModuleRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .getEffectiveSecurityHealthAnalyticsCustomModuleSettings()
                  .getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .getEffectiveSecurityHealthAnalyticsCustomModuleSettings()
          .setRetrySettings(getEffectiveSecurityHealthAnalyticsCustomModuleRetrySettings);

      RetrySettings getSecurityHealthAnalyticsCustomModuleRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .getSecurityHealthAnalyticsCustomModuleSettings()
                  .getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .getSecurityHealthAnalyticsCustomModuleSettings()
          .setRetrySettings(getSecurityHealthAnalyticsCustomModuleRetrySettings);

      RetrySettings getSourceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getSourceSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getSourceSettings().setRetrySettings(getSourceRetrySettings);

      RetrySettings groupAssetsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.groupAssetsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.groupAssetsSettings().setRetrySettings(groupAssetsRetrySettings);

      RetrySettings groupFindingsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.groupFindingsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.groupFindingsSettings().setRetrySettings(groupFindingsRetrySettings);

      RetrySettings listAssetsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listAssetsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.listAssetsSettings().setRetrySettings(listAssetsRetrySettings);

      RetrySettings listDescendantSecurityHealthAnalyticsCustomModulesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .listDescendantSecurityHealthAnalyticsCustomModulesSettings()
                  .getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .listDescendantSecurityHealthAnalyticsCustomModulesSettings()
          .setRetrySettings(listDescendantSecurityHealthAnalyticsCustomModulesRetrySettings);

      RetrySettings listFindingsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listFindingsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.listFindingsSettings().setRetrySettings(listFindingsRetrySettings);

      RetrySettings listMuteConfigsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listMuteConfigsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .listMuteConfigsSettings()
          .setRetrySettings(listMuteConfigsRetrySettings);

      RetrySettings listNotificationConfigsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listNotificationConfigsSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .listNotificationConfigsSettings()
          .setRetrySettings(listNotificationConfigsRetrySettings);

      RetrySettings listEffectiveSecurityHealthAnalyticsCustomModulesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .listEffectiveSecurityHealthAnalyticsCustomModulesSettings()
                  .getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .listEffectiveSecurityHealthAnalyticsCustomModulesSettings()
          .setRetrySettings(listEffectiveSecurityHealthAnalyticsCustomModulesRetrySettings);

      RetrySettings listSecurityHealthAnalyticsCustomModulesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .listSecurityHealthAnalyticsCustomModulesSettings()
                  .getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .listSecurityHealthAnalyticsCustomModulesSettings()
          .setRetrySettings(listSecurityHealthAnalyticsCustomModulesRetrySettings);

      RetrySettings listSourcesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listSourcesSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.listSourcesSettings().setRetrySettings(listSourcesRetrySettings);

      RetrySettings setFindingStateRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.setFindingStateSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .setFindingStateSettings()
          .setRetrySettings(setFindingStateRetrySettings);

      RetrySettings setMuteRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.setMuteSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.setMuteSettings().setRetrySettings(setMuteRetrySettings);

      RetrySettings setIamPolicyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.setIamPolicySettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.setIamPolicySettings().setRetrySettings(setIamPolicyRetrySettings);

      RetrySettings testIamPermissionsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.testIamPermissionsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .testIamPermissionsSettings()
          .setRetrySettings(testIamPermissionsRetrySettings);

      RetrySettings updateExternalSystemRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateExternalSystemSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .updateExternalSystemSettings()
          .setRetrySettings(updateExternalSystemRetrySettings);

      RetrySettings updateFindingRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateFindingSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.updateFindingSettings().setRetrySettings(updateFindingRetrySettings);

      RetrySettings updateMuteConfigRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateMuteConfigSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .updateMuteConfigSettings()
          .setRetrySettings(updateMuteConfigRetrySettings);

      RetrySettings updateNotificationConfigRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateNotificationConfigSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .updateNotificationConfigSettings()
          .setRetrySettings(updateNotificationConfigRetrySettings);

      RetrySettings updateOrganizationSettingsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateOrganizationSettingsSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .updateOrganizationSettingsSettings()
          .setRetrySettings(updateOrganizationSettingsRetrySettings);

      RetrySettings updateSecurityHealthAnalyticsCustomModuleRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .updateSecurityHealthAnalyticsCustomModuleSettings()
                  .getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .updateSecurityHealthAnalyticsCustomModuleSettings()
          .setRetrySettings(updateSecurityHealthAnalyticsCustomModuleRetrySettings);

      RetrySettings updateSourceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateSourceSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.updateSourceSettings().setRetrySettings(updateSourceRetrySettings);

      RetrySettings updateSecurityMarksRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateSecurityMarksSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .updateSecurityMarksSettings()
          .setRetrySettings(updateSecurityMarksRetrySettings);

      RetrySettings createBigQueryExportRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createBigQueryExportSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .createBigQueryExportSettings()
          .setRetrySettings(createBigQueryExportRetrySettings);

      RetrySettings deleteBigQueryExportRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteBigQueryExportSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .deleteBigQueryExportSettings()
          .setRetrySettings(deleteBigQueryExportRetrySettings);

      RetrySettings updateBigQueryExportRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateBigQueryExportSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .updateBigQueryExportSettings()
          .setRetrySettings(updateBigQueryExportRetrySettings);

      RetrySettings listBigQueryExportsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listBigQueryExportsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .listBigQueryExportsSettings()
          .setRetrySettings(listBigQueryExportsRetrySettings);

      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured service-level retry settings from properties.");
      }
    }
    Retry createSecurityHealthAnalyticsCustomModuleRetry =
        clientProperties.getCreateSecurityHealthAnalyticsCustomModuleRetry();
    if (createSecurityHealthAnalyticsCustomModuleRetry != null) {
      RetrySettings createSecurityHealthAnalyticsCustomModuleRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .createSecurityHealthAnalyticsCustomModuleSettings()
                  .getRetrySettings(),
              createSecurityHealthAnalyticsCustomModuleRetry);
      clientSettingsBuilder
          .createSecurityHealthAnalyticsCustomModuleSettings()
          .setRetrySettings(createSecurityHealthAnalyticsCustomModuleRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for createSecurityHealthAnalyticsCustomModule from properties.");
      }
    }
    Retry createSourceRetry = clientProperties.getCreateSourceRetry();
    if (createSourceRetry != null) {
      RetrySettings createSourceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createSourceSettings().getRetrySettings(), createSourceRetry);
      clientSettingsBuilder.createSourceSettings().setRetrySettings(createSourceRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for createSource from properties.");
      }
    }
    Retry createFindingRetry = clientProperties.getCreateFindingRetry();
    if (createFindingRetry != null) {
      RetrySettings createFindingRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createFindingSettings().getRetrySettings(), createFindingRetry);
      clientSettingsBuilder.createFindingSettings().setRetrySettings(createFindingRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for createFinding from properties.");
      }
    }
    Retry createMuteConfigRetry = clientProperties.getCreateMuteConfigRetry();
    if (createMuteConfigRetry != null) {
      RetrySettings createMuteConfigRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createMuteConfigSettings().getRetrySettings(),
              createMuteConfigRetry);
      clientSettingsBuilder
          .createMuteConfigSettings()
          .setRetrySettings(createMuteConfigRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for createMuteConfig from properties.");
      }
    }
    Retry createNotificationConfigRetry = clientProperties.getCreateNotificationConfigRetry();
    if (createNotificationConfigRetry != null) {
      RetrySettings createNotificationConfigRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createNotificationConfigSettings().getRetrySettings(),
              createNotificationConfigRetry);
      clientSettingsBuilder
          .createNotificationConfigSettings()
          .setRetrySettings(createNotificationConfigRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for createNotificationConfig from properties.");
      }
    }
    Retry deleteMuteConfigRetry = clientProperties.getDeleteMuteConfigRetry();
    if (deleteMuteConfigRetry != null) {
      RetrySettings deleteMuteConfigRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteMuteConfigSettings().getRetrySettings(),
              deleteMuteConfigRetry);
      clientSettingsBuilder
          .deleteMuteConfigSettings()
          .setRetrySettings(deleteMuteConfigRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for deleteMuteConfig from properties.");
      }
    }
    Retry deleteNotificationConfigRetry = clientProperties.getDeleteNotificationConfigRetry();
    if (deleteNotificationConfigRetry != null) {
      RetrySettings deleteNotificationConfigRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteNotificationConfigSettings().getRetrySettings(),
              deleteNotificationConfigRetry);
      clientSettingsBuilder
          .deleteNotificationConfigSettings()
          .setRetrySettings(deleteNotificationConfigRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for deleteNotificationConfig from properties.");
      }
    }
    Retry deleteSecurityHealthAnalyticsCustomModuleRetry =
        clientProperties.getDeleteSecurityHealthAnalyticsCustomModuleRetry();
    if (deleteSecurityHealthAnalyticsCustomModuleRetry != null) {
      RetrySettings deleteSecurityHealthAnalyticsCustomModuleRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .deleteSecurityHealthAnalyticsCustomModuleSettings()
                  .getRetrySettings(),
              deleteSecurityHealthAnalyticsCustomModuleRetry);
      clientSettingsBuilder
          .deleteSecurityHealthAnalyticsCustomModuleSettings()
          .setRetrySettings(deleteSecurityHealthAnalyticsCustomModuleRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for deleteSecurityHealthAnalyticsCustomModule from properties.");
      }
    }
    Retry getBigQueryExportRetry = clientProperties.getGetBigQueryExportRetry();
    if (getBigQueryExportRetry != null) {
      RetrySettings getBigQueryExportRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getBigQueryExportSettings().getRetrySettings(),
              getBigQueryExportRetry);
      clientSettingsBuilder
          .getBigQueryExportSettings()
          .setRetrySettings(getBigQueryExportRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for getBigQueryExport from properties.");
      }
    }
    Retry getIamPolicyRetry = clientProperties.getGetIamPolicyRetry();
    if (getIamPolicyRetry != null) {
      RetrySettings getIamPolicyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getIamPolicySettings().getRetrySettings(), getIamPolicyRetry);
      clientSettingsBuilder.getIamPolicySettings().setRetrySettings(getIamPolicyRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getIamPolicy from properties.");
      }
    }
    Retry getMuteConfigRetry = clientProperties.getGetMuteConfigRetry();
    if (getMuteConfigRetry != null) {
      RetrySettings getMuteConfigRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getMuteConfigSettings().getRetrySettings(), getMuteConfigRetry);
      clientSettingsBuilder.getMuteConfigSettings().setRetrySettings(getMuteConfigRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getMuteConfig from properties.");
      }
    }
    Retry getNotificationConfigRetry = clientProperties.getGetNotificationConfigRetry();
    if (getNotificationConfigRetry != null) {
      RetrySettings getNotificationConfigRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getNotificationConfigSettings().getRetrySettings(),
              getNotificationConfigRetry);
      clientSettingsBuilder
          .getNotificationConfigSettings()
          .setRetrySettings(getNotificationConfigRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for getNotificationConfig from properties.");
      }
    }
    Retry getOrganizationSettingsRetry = clientProperties.getGetOrganizationSettingsRetry();
    if (getOrganizationSettingsRetry != null) {
      RetrySettings getOrganizationSettingsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getOrganizationSettingsSettings().getRetrySettings(),
              getOrganizationSettingsRetry);
      clientSettingsBuilder
          .getOrganizationSettingsSettings()
          .setRetrySettings(getOrganizationSettingsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for getOrganizationSettings from properties.");
      }
    }
    Retry getEffectiveSecurityHealthAnalyticsCustomModuleRetry =
        clientProperties.getGetEffectiveSecurityHealthAnalyticsCustomModuleRetry();
    if (getEffectiveSecurityHealthAnalyticsCustomModuleRetry != null) {
      RetrySettings getEffectiveSecurityHealthAnalyticsCustomModuleRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .getEffectiveSecurityHealthAnalyticsCustomModuleSettings()
                  .getRetrySettings(),
              getEffectiveSecurityHealthAnalyticsCustomModuleRetry);
      clientSettingsBuilder
          .getEffectiveSecurityHealthAnalyticsCustomModuleSettings()
          .setRetrySettings(getEffectiveSecurityHealthAnalyticsCustomModuleRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for getEffectiveSecurityHealthAnalyticsCustomModule from properties.");
      }
    }
    Retry getSecurityHealthAnalyticsCustomModuleRetry =
        clientProperties.getGetSecurityHealthAnalyticsCustomModuleRetry();
    if (getSecurityHealthAnalyticsCustomModuleRetry != null) {
      RetrySettings getSecurityHealthAnalyticsCustomModuleRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .getSecurityHealthAnalyticsCustomModuleSettings()
                  .getRetrySettings(),
              getSecurityHealthAnalyticsCustomModuleRetry);
      clientSettingsBuilder
          .getSecurityHealthAnalyticsCustomModuleSettings()
          .setRetrySettings(getSecurityHealthAnalyticsCustomModuleRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for getSecurityHealthAnalyticsCustomModule from properties.");
      }
    }
    Retry getSourceRetry = clientProperties.getGetSourceRetry();
    if (getSourceRetry != null) {
      RetrySettings getSourceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getSourceSettings().getRetrySettings(), getSourceRetry);
      clientSettingsBuilder.getSourceSettings().setRetrySettings(getSourceRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getSource from properties.");
      }
    }
    Retry groupAssetsRetry = clientProperties.getGroupAssetsRetry();
    if (groupAssetsRetry != null) {
      RetrySettings groupAssetsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.groupAssetsSettings().getRetrySettings(), groupAssetsRetry);
      clientSettingsBuilder.groupAssetsSettings().setRetrySettings(groupAssetsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for groupAssets from properties.");
      }
    }
    Retry groupFindingsRetry = clientProperties.getGroupFindingsRetry();
    if (groupFindingsRetry != null) {
      RetrySettings groupFindingsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.groupFindingsSettings().getRetrySettings(), groupFindingsRetry);
      clientSettingsBuilder.groupFindingsSettings().setRetrySettings(groupFindingsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for groupFindings from properties.");
      }
    }
    Retry listAssetsRetry = clientProperties.getListAssetsRetry();
    if (listAssetsRetry != null) {
      RetrySettings listAssetsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listAssetsSettings().getRetrySettings(), listAssetsRetry);
      clientSettingsBuilder.listAssetsSettings().setRetrySettings(listAssetsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listAssets from properties.");
      }
    }
    Retry listDescendantSecurityHealthAnalyticsCustomModulesRetry =
        clientProperties.getListDescendantSecurityHealthAnalyticsCustomModulesRetry();
    if (listDescendantSecurityHealthAnalyticsCustomModulesRetry != null) {
      RetrySettings listDescendantSecurityHealthAnalyticsCustomModulesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .listDescendantSecurityHealthAnalyticsCustomModulesSettings()
                  .getRetrySettings(),
              listDescendantSecurityHealthAnalyticsCustomModulesRetry);
      clientSettingsBuilder
          .listDescendantSecurityHealthAnalyticsCustomModulesSettings()
          .setRetrySettings(listDescendantSecurityHealthAnalyticsCustomModulesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listDescendantSecurityHealthAnalyticsCustomModules from properties.");
      }
    }
    Retry listFindingsRetry = clientProperties.getListFindingsRetry();
    if (listFindingsRetry != null) {
      RetrySettings listFindingsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listFindingsSettings().getRetrySettings(), listFindingsRetry);
      clientSettingsBuilder.listFindingsSettings().setRetrySettings(listFindingsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listFindings from properties.");
      }
    }
    Retry listMuteConfigsRetry = clientProperties.getListMuteConfigsRetry();
    if (listMuteConfigsRetry != null) {
      RetrySettings listMuteConfigsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listMuteConfigsSettings().getRetrySettings(),
              listMuteConfigsRetry);
      clientSettingsBuilder
          .listMuteConfigsSettings()
          .setRetrySettings(listMuteConfigsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listMuteConfigs from properties.");
      }
    }
    Retry listNotificationConfigsRetry = clientProperties.getListNotificationConfigsRetry();
    if (listNotificationConfigsRetry != null) {
      RetrySettings listNotificationConfigsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listNotificationConfigsSettings().getRetrySettings(),
              listNotificationConfigsRetry);
      clientSettingsBuilder
          .listNotificationConfigsSettings()
          .setRetrySettings(listNotificationConfigsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listNotificationConfigs from properties.");
      }
    }
    Retry listEffectiveSecurityHealthAnalyticsCustomModulesRetry =
        clientProperties.getListEffectiveSecurityHealthAnalyticsCustomModulesRetry();
    if (listEffectiveSecurityHealthAnalyticsCustomModulesRetry != null) {
      RetrySettings listEffectiveSecurityHealthAnalyticsCustomModulesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .listEffectiveSecurityHealthAnalyticsCustomModulesSettings()
                  .getRetrySettings(),
              listEffectiveSecurityHealthAnalyticsCustomModulesRetry);
      clientSettingsBuilder
          .listEffectiveSecurityHealthAnalyticsCustomModulesSettings()
          .setRetrySettings(listEffectiveSecurityHealthAnalyticsCustomModulesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listEffectiveSecurityHealthAnalyticsCustomModules from properties.");
      }
    }
    Retry listSecurityHealthAnalyticsCustomModulesRetry =
        clientProperties.getListSecurityHealthAnalyticsCustomModulesRetry();
    if (listSecurityHealthAnalyticsCustomModulesRetry != null) {
      RetrySettings listSecurityHealthAnalyticsCustomModulesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .listSecurityHealthAnalyticsCustomModulesSettings()
                  .getRetrySettings(),
              listSecurityHealthAnalyticsCustomModulesRetry);
      clientSettingsBuilder
          .listSecurityHealthAnalyticsCustomModulesSettings()
          .setRetrySettings(listSecurityHealthAnalyticsCustomModulesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listSecurityHealthAnalyticsCustomModules from properties.");
      }
    }
    Retry listSourcesRetry = clientProperties.getListSourcesRetry();
    if (listSourcesRetry != null) {
      RetrySettings listSourcesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listSourcesSettings().getRetrySettings(), listSourcesRetry);
      clientSettingsBuilder.listSourcesSettings().setRetrySettings(listSourcesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listSources from properties.");
      }
    }
    Retry setFindingStateRetry = clientProperties.getSetFindingStateRetry();
    if (setFindingStateRetry != null) {
      RetrySettings setFindingStateRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.setFindingStateSettings().getRetrySettings(),
              setFindingStateRetry);
      clientSettingsBuilder
          .setFindingStateSettings()
          .setRetrySettings(setFindingStateRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for setFindingState from properties.");
      }
    }
    Retry setMuteRetry = clientProperties.getSetMuteRetry();
    if (setMuteRetry != null) {
      RetrySettings setMuteRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.setMuteSettings().getRetrySettings(), setMuteRetry);
      clientSettingsBuilder.setMuteSettings().setRetrySettings(setMuteRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for setMute from properties.");
      }
    }
    Retry setIamPolicyRetry = clientProperties.getSetIamPolicyRetry();
    if (setIamPolicyRetry != null) {
      RetrySettings setIamPolicyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.setIamPolicySettings().getRetrySettings(), setIamPolicyRetry);
      clientSettingsBuilder.setIamPolicySettings().setRetrySettings(setIamPolicyRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for setIamPolicy from properties.");
      }
    }
    Retry testIamPermissionsRetry = clientProperties.getTestIamPermissionsRetry();
    if (testIamPermissionsRetry != null) {
      RetrySettings testIamPermissionsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.testIamPermissionsSettings().getRetrySettings(),
              testIamPermissionsRetry);
      clientSettingsBuilder
          .testIamPermissionsSettings()
          .setRetrySettings(testIamPermissionsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for testIamPermissions from properties.");
      }
    }
    Retry updateExternalSystemRetry = clientProperties.getUpdateExternalSystemRetry();
    if (updateExternalSystemRetry != null) {
      RetrySettings updateExternalSystemRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateExternalSystemSettings().getRetrySettings(),
              updateExternalSystemRetry);
      clientSettingsBuilder
          .updateExternalSystemSettings()
          .setRetrySettings(updateExternalSystemRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for updateExternalSystem from properties.");
      }
    }
    Retry updateFindingRetry = clientProperties.getUpdateFindingRetry();
    if (updateFindingRetry != null) {
      RetrySettings updateFindingRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateFindingSettings().getRetrySettings(), updateFindingRetry);
      clientSettingsBuilder.updateFindingSettings().setRetrySettings(updateFindingRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for updateFinding from properties.");
      }
    }
    Retry updateMuteConfigRetry = clientProperties.getUpdateMuteConfigRetry();
    if (updateMuteConfigRetry != null) {
      RetrySettings updateMuteConfigRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateMuteConfigSettings().getRetrySettings(),
              updateMuteConfigRetry);
      clientSettingsBuilder
          .updateMuteConfigSettings()
          .setRetrySettings(updateMuteConfigRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for updateMuteConfig from properties.");
      }
    }
    Retry updateNotificationConfigRetry = clientProperties.getUpdateNotificationConfigRetry();
    if (updateNotificationConfigRetry != null) {
      RetrySettings updateNotificationConfigRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateNotificationConfigSettings().getRetrySettings(),
              updateNotificationConfigRetry);
      clientSettingsBuilder
          .updateNotificationConfigSettings()
          .setRetrySettings(updateNotificationConfigRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for updateNotificationConfig from properties.");
      }
    }
    Retry updateOrganizationSettingsRetry = clientProperties.getUpdateOrganizationSettingsRetry();
    if (updateOrganizationSettingsRetry != null) {
      RetrySettings updateOrganizationSettingsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateOrganizationSettingsSettings().getRetrySettings(),
              updateOrganizationSettingsRetry);
      clientSettingsBuilder
          .updateOrganizationSettingsSettings()
          .setRetrySettings(updateOrganizationSettingsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for updateOrganizationSettings from properties.");
      }
    }
    Retry updateSecurityHealthAnalyticsCustomModuleRetry =
        clientProperties.getUpdateSecurityHealthAnalyticsCustomModuleRetry();
    if (updateSecurityHealthAnalyticsCustomModuleRetry != null) {
      RetrySettings updateSecurityHealthAnalyticsCustomModuleRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .updateSecurityHealthAnalyticsCustomModuleSettings()
                  .getRetrySettings(),
              updateSecurityHealthAnalyticsCustomModuleRetry);
      clientSettingsBuilder
          .updateSecurityHealthAnalyticsCustomModuleSettings()
          .setRetrySettings(updateSecurityHealthAnalyticsCustomModuleRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for updateSecurityHealthAnalyticsCustomModule from properties.");
      }
    }
    Retry updateSourceRetry = clientProperties.getUpdateSourceRetry();
    if (updateSourceRetry != null) {
      RetrySettings updateSourceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateSourceSettings().getRetrySettings(), updateSourceRetry);
      clientSettingsBuilder.updateSourceSettings().setRetrySettings(updateSourceRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for updateSource from properties.");
      }
    }
    Retry updateSecurityMarksRetry = clientProperties.getUpdateSecurityMarksRetry();
    if (updateSecurityMarksRetry != null) {
      RetrySettings updateSecurityMarksRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateSecurityMarksSettings().getRetrySettings(),
              updateSecurityMarksRetry);
      clientSettingsBuilder
          .updateSecurityMarksSettings()
          .setRetrySettings(updateSecurityMarksRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for updateSecurityMarks from properties.");
      }
    }
    Retry createBigQueryExportRetry = clientProperties.getCreateBigQueryExportRetry();
    if (createBigQueryExportRetry != null) {
      RetrySettings createBigQueryExportRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createBigQueryExportSettings().getRetrySettings(),
              createBigQueryExportRetry);
      clientSettingsBuilder
          .createBigQueryExportSettings()
          .setRetrySettings(createBigQueryExportRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for createBigQueryExport from properties.");
      }
    }
    Retry deleteBigQueryExportRetry = clientProperties.getDeleteBigQueryExportRetry();
    if (deleteBigQueryExportRetry != null) {
      RetrySettings deleteBigQueryExportRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteBigQueryExportSettings().getRetrySettings(),
              deleteBigQueryExportRetry);
      clientSettingsBuilder
          .deleteBigQueryExportSettings()
          .setRetrySettings(deleteBigQueryExportRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for deleteBigQueryExport from properties.");
      }
    }
    Retry updateBigQueryExportRetry = clientProperties.getUpdateBigQueryExportRetry();
    if (updateBigQueryExportRetry != null) {
      RetrySettings updateBigQueryExportRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateBigQueryExportSettings().getRetrySettings(),
              updateBigQueryExportRetry);
      clientSettingsBuilder
          .updateBigQueryExportSettings()
          .setRetrySettings(updateBigQueryExportRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for updateBigQueryExport from properties.");
      }
    }
    Retry listBigQueryExportsRetry = clientProperties.getListBigQueryExportsRetry();
    if (listBigQueryExportsRetry != null) {
      RetrySettings listBigQueryExportsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listBigQueryExportsSettings().getRetrySettings(),
              listBigQueryExportsRetry);
      clientSettingsBuilder
          .listBigQueryExportsSettings()
          .setRetrySettings(listBigQueryExportsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listBigQueryExports from properties.");
      }
    }
    return clientSettingsBuilder.build();
  }

  /**
   * Provides a SecurityCenterClient bean configured with SecurityCenterSettings.
   *
   * @param securityCenterSettings settings to configure an instance of client bean.
   * @return a {@link SecurityCenterClient} bean configured with {@link SecurityCenterSettings}
   */
  @Bean
  @ConditionalOnMissingBean
  public SecurityCenterClient securityCenterClient(SecurityCenterSettings securityCenterSettings)
      throws IOException {
    return SecurityCenterClient.create(securityCenterSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-security-center";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
