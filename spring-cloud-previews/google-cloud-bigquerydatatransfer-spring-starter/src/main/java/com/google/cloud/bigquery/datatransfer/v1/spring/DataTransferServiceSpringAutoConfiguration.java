/*
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.bigquery.datatransfer.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.bigquery.datatransfer.v1.DataTransferServiceClient;
import com.google.cloud.bigquery.datatransfer.v1.DataTransferServiceSettings;
import com.google.cloud.spring.autoconfigure.core.GcpContextAutoConfiguration;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.core.Retry;
import com.google.cloud.spring.core.util.RetryUtil;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.AutoConfigureAfter;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link DataTransferServiceClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@AutoConfigureAfter(GcpContextAutoConfiguration.class)
@ConditionalOnClass(DataTransferServiceClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.bigquery.datatransfer.v1.data-transfer-service.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties(DataTransferServiceSpringProperties.class)
public class DataTransferServiceSpringAutoConfiguration {
  private final DataTransferServiceSpringProperties clientProperties;
  private final CredentialsProvider credentialsProvider;
  private static final Log LOGGER =
      LogFactory.getLog(DataTransferServiceSpringAutoConfiguration.class);

  protected DataTransferServiceSpringAutoConfiguration(
      DataTransferServiceSpringProperties clientProperties, CredentialsProvider credentialsProvider)
      throws IOException {
    this.clientProperties = clientProperties;
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from DataTransferService-specific configuration");
      }
      this.credentialsProvider =
          ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    } else {
      this.credentialsProvider = credentialsProvider;
    }
  }

  /**
   * Provides a default transport channel provider bean, corresponding to the client library's
   * default transport channel provider. If the library supports both GRPC and REST transport, and
   * the useRest property is configured, the HTTP/JSON transport provider will be used instead of
   * GRPC.
   *
   * @return a default transport channel provider.
   */
  @Bean
  @ConditionalOnMissingBean(name = "defaultDataTransferServiceTransportChannelProvider")
  public TransportChannelProvider defaultDataTransferServiceTransportChannelProvider() {
    if (this.clientProperties.getUseRest()) {
      return DataTransferServiceSettings.defaultHttpJsonTransportProviderBuilder().build();
    }
    return DataTransferServiceSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a DataTransferServiceSettings bean configured to use a DefaultCredentialsProvider and
   * the client library's default transport channel provider
   * (defaultDataTransferServiceTransportChannelProvider()). It also configures the quota project ID
   * and executor thread count, if provided through properties.
   *
   * <p>Retry settings are also configured from service-level and method-level properties specified
   * in DataTransferServiceSpringProperties. Method-level properties will take precedence over
   * service-level properties if available, and client library defaults will be used if neither are
   * specified.
   *
   * @param defaultTransportChannelProvider TransportChannelProvider to use in the settings.
   * @return a {@link DataTransferServiceSettings} bean configured with {@link
   *     TransportChannelProvider} bean.
   */
  @Bean
  @ConditionalOnMissingBean
  public DataTransferServiceSettings dataTransferServiceSettings(
      @Qualifier("defaultDataTransferServiceTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    DataTransferServiceSettings.Builder clientSettingsBuilder;
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder = DataTransferServiceSettings.newHttpJsonBuilder();
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using REST (HTTP/JSON) transport.");
      }
    } else {
      clientSettingsBuilder = DataTransferServiceSettings.newBuilder();
    }
    clientSettingsBuilder
        .setCredentialsProvider(this.credentialsProvider)
        .setTransportChannelProvider(defaultTransportChannelProvider)
        .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          DataTransferServiceSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    Retry serviceRetry = clientProperties.getRetry();
    if (serviceRetry != null) {
      RetrySettings getDataSourceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getDataSourceSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getDataSourceSettings().setRetrySettings(getDataSourceRetrySettings);

      RetrySettings listDataSourcesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listDataSourcesSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .listDataSourcesSettings()
          .setRetrySettings(listDataSourcesRetrySettings);

      RetrySettings createTransferConfigRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createTransferConfigSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .createTransferConfigSettings()
          .setRetrySettings(createTransferConfigRetrySettings);

      RetrySettings updateTransferConfigRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateTransferConfigSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .updateTransferConfigSettings()
          .setRetrySettings(updateTransferConfigRetrySettings);

      RetrySettings deleteTransferConfigRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteTransferConfigSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .deleteTransferConfigSettings()
          .setRetrySettings(deleteTransferConfigRetrySettings);

      RetrySettings getTransferConfigRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getTransferConfigSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .getTransferConfigSettings()
          .setRetrySettings(getTransferConfigRetrySettings);

      RetrySettings listTransferConfigsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listTransferConfigsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .listTransferConfigsSettings()
          .setRetrySettings(listTransferConfigsRetrySettings);

      RetrySettings scheduleTransferRunsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.scheduleTransferRunsSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .scheduleTransferRunsSettings()
          .setRetrySettings(scheduleTransferRunsRetrySettings);

      RetrySettings startManualTransferRunsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.startManualTransferRunsSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .startManualTransferRunsSettings()
          .setRetrySettings(startManualTransferRunsRetrySettings);

      RetrySettings getTransferRunRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getTransferRunSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getTransferRunSettings().setRetrySettings(getTransferRunRetrySettings);

      RetrySettings deleteTransferRunRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteTransferRunSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .deleteTransferRunSettings()
          .setRetrySettings(deleteTransferRunRetrySettings);

      RetrySettings listTransferRunsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listTransferRunsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .listTransferRunsSettings()
          .setRetrySettings(listTransferRunsRetrySettings);

      RetrySettings listTransferLogsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listTransferLogsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .listTransferLogsSettings()
          .setRetrySettings(listTransferLogsRetrySettings);

      RetrySettings checkValidCredsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.checkValidCredsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .checkValidCredsSettings()
          .setRetrySettings(checkValidCredsRetrySettings);

      RetrySettings enrollDataSourcesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.enrollDataSourcesSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .enrollDataSourcesSettings()
          .setRetrySettings(enrollDataSourcesRetrySettings);

      RetrySettings listLocationsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listLocationsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.listLocationsSettings().setRetrySettings(listLocationsRetrySettings);

      RetrySettings getLocationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getLocationSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getLocationSettings().setRetrySettings(getLocationRetrySettings);

      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured service-level retry settings from properties.");
      }
    }
    Retry getDataSourceRetry = clientProperties.getGetDataSourceRetry();
    if (getDataSourceRetry != null) {
      RetrySettings getDataSourceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getDataSourceSettings().getRetrySettings(), getDataSourceRetry);
      clientSettingsBuilder.getDataSourceSettings().setRetrySettings(getDataSourceRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getDataSource from properties.");
      }
    }
    Retry listDataSourcesRetry = clientProperties.getListDataSourcesRetry();
    if (listDataSourcesRetry != null) {
      RetrySettings listDataSourcesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listDataSourcesSettings().getRetrySettings(),
              listDataSourcesRetry);
      clientSettingsBuilder
          .listDataSourcesSettings()
          .setRetrySettings(listDataSourcesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listDataSources from properties.");
      }
    }
    Retry createTransferConfigRetry = clientProperties.getCreateTransferConfigRetry();
    if (createTransferConfigRetry != null) {
      RetrySettings createTransferConfigRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createTransferConfigSettings().getRetrySettings(),
              createTransferConfigRetry);
      clientSettingsBuilder
          .createTransferConfigSettings()
          .setRetrySettings(createTransferConfigRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for createTransferConfig from properties.");
      }
    }
    Retry updateTransferConfigRetry = clientProperties.getUpdateTransferConfigRetry();
    if (updateTransferConfigRetry != null) {
      RetrySettings updateTransferConfigRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateTransferConfigSettings().getRetrySettings(),
              updateTransferConfigRetry);
      clientSettingsBuilder
          .updateTransferConfigSettings()
          .setRetrySettings(updateTransferConfigRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for updateTransferConfig from properties.");
      }
    }
    Retry deleteTransferConfigRetry = clientProperties.getDeleteTransferConfigRetry();
    if (deleteTransferConfigRetry != null) {
      RetrySettings deleteTransferConfigRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteTransferConfigSettings().getRetrySettings(),
              deleteTransferConfigRetry);
      clientSettingsBuilder
          .deleteTransferConfigSettings()
          .setRetrySettings(deleteTransferConfigRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for deleteTransferConfig from properties.");
      }
    }
    Retry getTransferConfigRetry = clientProperties.getGetTransferConfigRetry();
    if (getTransferConfigRetry != null) {
      RetrySettings getTransferConfigRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getTransferConfigSettings().getRetrySettings(),
              getTransferConfigRetry);
      clientSettingsBuilder
          .getTransferConfigSettings()
          .setRetrySettings(getTransferConfigRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for getTransferConfig from properties.");
      }
    }
    Retry listTransferConfigsRetry = clientProperties.getListTransferConfigsRetry();
    if (listTransferConfigsRetry != null) {
      RetrySettings listTransferConfigsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listTransferConfigsSettings().getRetrySettings(),
              listTransferConfigsRetry);
      clientSettingsBuilder
          .listTransferConfigsSettings()
          .setRetrySettings(listTransferConfigsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listTransferConfigs from properties.");
      }
    }
    Retry scheduleTransferRunsRetry = clientProperties.getScheduleTransferRunsRetry();
    if (scheduleTransferRunsRetry != null) {
      RetrySettings scheduleTransferRunsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.scheduleTransferRunsSettings().getRetrySettings(),
              scheduleTransferRunsRetry);
      clientSettingsBuilder
          .scheduleTransferRunsSettings()
          .setRetrySettings(scheduleTransferRunsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for scheduleTransferRuns from properties.");
      }
    }
    Retry startManualTransferRunsRetry = clientProperties.getStartManualTransferRunsRetry();
    if (startManualTransferRunsRetry != null) {
      RetrySettings startManualTransferRunsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.startManualTransferRunsSettings().getRetrySettings(),
              startManualTransferRunsRetry);
      clientSettingsBuilder
          .startManualTransferRunsSettings()
          .setRetrySettings(startManualTransferRunsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for startManualTransferRuns from properties.");
      }
    }
    Retry getTransferRunRetry = clientProperties.getGetTransferRunRetry();
    if (getTransferRunRetry != null) {
      RetrySettings getTransferRunRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getTransferRunSettings().getRetrySettings(),
              getTransferRunRetry);
      clientSettingsBuilder.getTransferRunSettings().setRetrySettings(getTransferRunRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getTransferRun from properties.");
      }
    }
    Retry deleteTransferRunRetry = clientProperties.getDeleteTransferRunRetry();
    if (deleteTransferRunRetry != null) {
      RetrySettings deleteTransferRunRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteTransferRunSettings().getRetrySettings(),
              deleteTransferRunRetry);
      clientSettingsBuilder
          .deleteTransferRunSettings()
          .setRetrySettings(deleteTransferRunRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for deleteTransferRun from properties.");
      }
    }
    Retry listTransferRunsRetry = clientProperties.getListTransferRunsRetry();
    if (listTransferRunsRetry != null) {
      RetrySettings listTransferRunsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listTransferRunsSettings().getRetrySettings(),
              listTransferRunsRetry);
      clientSettingsBuilder
          .listTransferRunsSettings()
          .setRetrySettings(listTransferRunsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listTransferRuns from properties.");
      }
    }
    Retry listTransferLogsRetry = clientProperties.getListTransferLogsRetry();
    if (listTransferLogsRetry != null) {
      RetrySettings listTransferLogsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listTransferLogsSettings().getRetrySettings(),
              listTransferLogsRetry);
      clientSettingsBuilder
          .listTransferLogsSettings()
          .setRetrySettings(listTransferLogsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listTransferLogs from properties.");
      }
    }
    Retry checkValidCredsRetry = clientProperties.getCheckValidCredsRetry();
    if (checkValidCredsRetry != null) {
      RetrySettings checkValidCredsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.checkValidCredsSettings().getRetrySettings(),
              checkValidCredsRetry);
      clientSettingsBuilder
          .checkValidCredsSettings()
          .setRetrySettings(checkValidCredsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for checkValidCreds from properties.");
      }
    }
    Retry enrollDataSourcesRetry = clientProperties.getEnrollDataSourcesRetry();
    if (enrollDataSourcesRetry != null) {
      RetrySettings enrollDataSourcesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.enrollDataSourcesSettings().getRetrySettings(),
              enrollDataSourcesRetry);
      clientSettingsBuilder
          .enrollDataSourcesSettings()
          .setRetrySettings(enrollDataSourcesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for enrollDataSources from properties.");
      }
    }
    Retry listLocationsRetry = clientProperties.getListLocationsRetry();
    if (listLocationsRetry != null) {
      RetrySettings listLocationsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listLocationsSettings().getRetrySettings(), listLocationsRetry);
      clientSettingsBuilder.listLocationsSettings().setRetrySettings(listLocationsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listLocations from properties.");
      }
    }
    Retry getLocationRetry = clientProperties.getGetLocationRetry();
    if (getLocationRetry != null) {
      RetrySettings getLocationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getLocationSettings().getRetrySettings(), getLocationRetry);
      clientSettingsBuilder.getLocationSettings().setRetrySettings(getLocationRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getLocation from properties.");
      }
    }
    return clientSettingsBuilder.build();
  }

  /**
   * Provides a DataTransferServiceClient bean configured with DataTransferServiceSettings.
   *
   * @param dataTransferServiceSettings settings to configure an instance of client bean.
   * @return a {@link DataTransferServiceClient} bean configured with {@link
   *     DataTransferServiceSettings}
   */
  @Bean
  @ConditionalOnMissingBean
  public DataTransferServiceClient dataTransferServiceClient(
      DataTransferServiceSettings dataTransferServiceSettings) throws IOException {
    return DataTransferServiceClient.create(dataTransferServiceSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-data-transfer-service";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
