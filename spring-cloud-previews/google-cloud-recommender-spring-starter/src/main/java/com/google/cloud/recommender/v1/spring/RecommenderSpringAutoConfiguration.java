/*
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.recommender.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.recommender.v1.RecommenderClient;
import com.google.cloud.recommender.v1.RecommenderSettings;
import com.google.cloud.spring.autoconfigure.core.GcpContextAutoConfiguration;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.core.Retry;
import com.google.cloud.spring.core.util.RetryUtil;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.AutoConfigureAfter;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link RecommenderClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@AutoConfigureAfter(GcpContextAutoConfiguration.class)
@ConditionalOnClass(RecommenderClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.recommender.v1.recommender.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties(RecommenderSpringProperties.class)
public class RecommenderSpringAutoConfiguration {
  private final RecommenderSpringProperties clientProperties;
  private final CredentialsProvider credentialsProvider;
  private static final Log LOGGER = LogFactory.getLog(RecommenderSpringAutoConfiguration.class);

  protected RecommenderSpringAutoConfiguration(
      RecommenderSpringProperties clientProperties, CredentialsProvider credentialsProvider)
      throws IOException {
    this.clientProperties = clientProperties;
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from Recommender-specific configuration");
      }
      this.credentialsProvider =
          ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    } else {
      this.credentialsProvider = credentialsProvider;
    }
  }

  /**
   * Provides a default transport channel provider bean, corresponding to the client library's
   * default transport channel provider. If the library supports both GRPC and REST transport, and
   * the useRest property is configured, the HTTP/JSON transport provider will be used instead of
   * GRPC.
   *
   * @return a default transport channel provider.
   */
  @Bean
  @ConditionalOnMissingBean(name = "defaultRecommenderTransportChannelProvider")
  public TransportChannelProvider defaultRecommenderTransportChannelProvider() {
    if (this.clientProperties.getUseRest()) {
      return RecommenderSettings.defaultHttpJsonTransportProviderBuilder().build();
    }
    return RecommenderSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a RecommenderSettings bean configured to use a DefaultCredentialsProvider and the
   * client library's default transport channel provider
   * (defaultRecommenderTransportChannelProvider()). It also configures the quota project ID and
   * executor thread count, if provided through properties.
   *
   * <p>Retry settings are also configured from service-level and method-level properties specified
   * in RecommenderSpringProperties. Method-level properties will take precedence over service-level
   * properties if available, and client library defaults will be used if neither are specified.
   *
   * @param defaultTransportChannelProvider TransportChannelProvider to use in the settings.
   * @return a {@link RecommenderSettings} bean configured with {@link TransportChannelProvider}
   *     bean.
   */
  @Bean
  @ConditionalOnMissingBean
  public RecommenderSettings recommenderSettings(
      @Qualifier("defaultRecommenderTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    RecommenderSettings.Builder clientSettingsBuilder;
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder = RecommenderSettings.newHttpJsonBuilder();
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using REST (HTTP/JSON) transport.");
      }
    } else {
      clientSettingsBuilder = RecommenderSettings.newBuilder();
    }
    clientSettingsBuilder
        .setCredentialsProvider(this.credentialsProvider)
        .setTransportChannelProvider(defaultTransportChannelProvider)
        .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          RecommenderSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    Retry serviceRetry = clientProperties.getRetry();
    if (serviceRetry != null) {
      RetrySettings listInsightsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listInsightsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.listInsightsSettings().setRetrySettings(listInsightsRetrySettings);

      RetrySettings getInsightRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getInsightSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getInsightSettings().setRetrySettings(getInsightRetrySettings);

      RetrySettings markInsightAcceptedRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.markInsightAcceptedSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .markInsightAcceptedSettings()
          .setRetrySettings(markInsightAcceptedRetrySettings);

      RetrySettings listRecommendationsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listRecommendationsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .listRecommendationsSettings()
          .setRetrySettings(listRecommendationsRetrySettings);

      RetrySettings getRecommendationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getRecommendationSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .getRecommendationSettings()
          .setRetrySettings(getRecommendationRetrySettings);

      RetrySettings markRecommendationClaimedRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.markRecommendationClaimedSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .markRecommendationClaimedSettings()
          .setRetrySettings(markRecommendationClaimedRetrySettings);

      RetrySettings markRecommendationSucceededRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.markRecommendationSucceededSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .markRecommendationSucceededSettings()
          .setRetrySettings(markRecommendationSucceededRetrySettings);

      RetrySettings markRecommendationFailedRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.markRecommendationFailedSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .markRecommendationFailedSettings()
          .setRetrySettings(markRecommendationFailedRetrySettings);

      RetrySettings getRecommenderConfigRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getRecommenderConfigSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .getRecommenderConfigSettings()
          .setRetrySettings(getRecommenderConfigRetrySettings);

      RetrySettings updateRecommenderConfigRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateRecommenderConfigSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .updateRecommenderConfigSettings()
          .setRetrySettings(updateRecommenderConfigRetrySettings);

      RetrySettings getInsightTypeConfigRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getInsightTypeConfigSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .getInsightTypeConfigSettings()
          .setRetrySettings(getInsightTypeConfigRetrySettings);

      RetrySettings updateInsightTypeConfigRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateInsightTypeConfigSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .updateInsightTypeConfigSettings()
          .setRetrySettings(updateInsightTypeConfigRetrySettings);

      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured service-level retry settings from properties.");
      }
    }
    Retry listInsightsRetry = clientProperties.getListInsightsRetry();
    if (listInsightsRetry != null) {
      RetrySettings listInsightsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listInsightsSettings().getRetrySettings(), listInsightsRetry);
      clientSettingsBuilder.listInsightsSettings().setRetrySettings(listInsightsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listInsights from properties.");
      }
    }
    Retry getInsightRetry = clientProperties.getGetInsightRetry();
    if (getInsightRetry != null) {
      RetrySettings getInsightRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getInsightSettings().getRetrySettings(), getInsightRetry);
      clientSettingsBuilder.getInsightSettings().setRetrySettings(getInsightRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getInsight from properties.");
      }
    }
    Retry markInsightAcceptedRetry = clientProperties.getMarkInsightAcceptedRetry();
    if (markInsightAcceptedRetry != null) {
      RetrySettings markInsightAcceptedRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.markInsightAcceptedSettings().getRetrySettings(),
              markInsightAcceptedRetry);
      clientSettingsBuilder
          .markInsightAcceptedSettings()
          .setRetrySettings(markInsightAcceptedRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for markInsightAccepted from properties.");
      }
    }
    Retry listRecommendationsRetry = clientProperties.getListRecommendationsRetry();
    if (listRecommendationsRetry != null) {
      RetrySettings listRecommendationsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listRecommendationsSettings().getRetrySettings(),
              listRecommendationsRetry);
      clientSettingsBuilder
          .listRecommendationsSettings()
          .setRetrySettings(listRecommendationsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listRecommendations from properties.");
      }
    }
    Retry getRecommendationRetry = clientProperties.getGetRecommendationRetry();
    if (getRecommendationRetry != null) {
      RetrySettings getRecommendationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getRecommendationSettings().getRetrySettings(),
              getRecommendationRetry);
      clientSettingsBuilder
          .getRecommendationSettings()
          .setRetrySettings(getRecommendationRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for getRecommendation from properties.");
      }
    }
    Retry markRecommendationClaimedRetry = clientProperties.getMarkRecommendationClaimedRetry();
    if (markRecommendationClaimedRetry != null) {
      RetrySettings markRecommendationClaimedRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.markRecommendationClaimedSettings().getRetrySettings(),
              markRecommendationClaimedRetry);
      clientSettingsBuilder
          .markRecommendationClaimedSettings()
          .setRetrySettings(markRecommendationClaimedRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for markRecommendationClaimed from properties.");
      }
    }
    Retry markRecommendationSucceededRetry = clientProperties.getMarkRecommendationSucceededRetry();
    if (markRecommendationSucceededRetry != null) {
      RetrySettings markRecommendationSucceededRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.markRecommendationSucceededSettings().getRetrySettings(),
              markRecommendationSucceededRetry);
      clientSettingsBuilder
          .markRecommendationSucceededSettings()
          .setRetrySettings(markRecommendationSucceededRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for markRecommendationSucceeded from properties.");
      }
    }
    Retry markRecommendationFailedRetry = clientProperties.getMarkRecommendationFailedRetry();
    if (markRecommendationFailedRetry != null) {
      RetrySettings markRecommendationFailedRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.markRecommendationFailedSettings().getRetrySettings(),
              markRecommendationFailedRetry);
      clientSettingsBuilder
          .markRecommendationFailedSettings()
          .setRetrySettings(markRecommendationFailedRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for markRecommendationFailed from properties.");
      }
    }
    Retry getRecommenderConfigRetry = clientProperties.getGetRecommenderConfigRetry();
    if (getRecommenderConfigRetry != null) {
      RetrySettings getRecommenderConfigRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getRecommenderConfigSettings().getRetrySettings(),
              getRecommenderConfigRetry);
      clientSettingsBuilder
          .getRecommenderConfigSettings()
          .setRetrySettings(getRecommenderConfigRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for getRecommenderConfig from properties.");
      }
    }
    Retry updateRecommenderConfigRetry = clientProperties.getUpdateRecommenderConfigRetry();
    if (updateRecommenderConfigRetry != null) {
      RetrySettings updateRecommenderConfigRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateRecommenderConfigSettings().getRetrySettings(),
              updateRecommenderConfigRetry);
      clientSettingsBuilder
          .updateRecommenderConfigSettings()
          .setRetrySettings(updateRecommenderConfigRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for updateRecommenderConfig from properties.");
      }
    }
    Retry getInsightTypeConfigRetry = clientProperties.getGetInsightTypeConfigRetry();
    if (getInsightTypeConfigRetry != null) {
      RetrySettings getInsightTypeConfigRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getInsightTypeConfigSettings().getRetrySettings(),
              getInsightTypeConfigRetry);
      clientSettingsBuilder
          .getInsightTypeConfigSettings()
          .setRetrySettings(getInsightTypeConfigRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for getInsightTypeConfig from properties.");
      }
    }
    Retry updateInsightTypeConfigRetry = clientProperties.getUpdateInsightTypeConfigRetry();
    if (updateInsightTypeConfigRetry != null) {
      RetrySettings updateInsightTypeConfigRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateInsightTypeConfigSettings().getRetrySettings(),
              updateInsightTypeConfigRetry);
      clientSettingsBuilder
          .updateInsightTypeConfigSettings()
          .setRetrySettings(updateInsightTypeConfigRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for updateInsightTypeConfig from properties.");
      }
    }
    return clientSettingsBuilder.build();
  }

  /**
   * Provides a RecommenderClient bean configured with RecommenderSettings.
   *
   * @param recommenderSettings settings to configure an instance of client bean.
   * @return a {@link RecommenderClient} bean configured with {@link RecommenderSettings}
   */
  @Bean
  @ConditionalOnMissingBean
  public RecommenderClient recommenderClient(RecommenderSettings recommenderSettings)
      throws IOException {
    return RecommenderClient.create(recommenderSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-recommender";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
