/*
 * Copyright 2024 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.securitycentermanagement.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.securitycentermanagement.v1.SecurityCenterManagementClient;
import com.google.cloud.securitycentermanagement.v1.SecurityCenterManagementSettings;
import com.google.cloud.spring.autoconfigure.core.GcpContextAutoConfiguration;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.core.Retry;
import com.google.cloud.spring.core.util.RetryUtil;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.AutoConfigureAfter;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link SecurityCenterManagementClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@AutoConfigureAfter(GcpContextAutoConfiguration.class)
@ConditionalOnClass(SecurityCenterManagementClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.securitycentermanagement.v1.security-center-management.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties(SecurityCenterManagementSpringProperties.class)
public class SecurityCenterManagementSpringAutoConfiguration {
  private final SecurityCenterManagementSpringProperties clientProperties;
  private final CredentialsProvider credentialsProvider;
  private static final Log LOGGER =
      LogFactory.getLog(SecurityCenterManagementSpringAutoConfiguration.class);

  protected SecurityCenterManagementSpringAutoConfiguration(
      SecurityCenterManagementSpringProperties clientProperties,
      CredentialsProvider credentialsProvider)
      throws IOException {
    this.clientProperties = clientProperties;
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from SecurityCenterManagement-specific configuration");
      }
      this.credentialsProvider =
          ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    } else {
      this.credentialsProvider = credentialsProvider;
    }
  }

  /**
   * Provides a default transport channel provider bean, corresponding to the client library's
   * default transport channel provider. If the library supports both GRPC and REST transport, and
   * the useRest property is configured, the HTTP/JSON transport provider will be used instead of
   * GRPC.
   *
   * @return a default transport channel provider.
   */
  @Bean
  @ConditionalOnMissingBean(name = "defaultSecurityCenterManagementTransportChannelProvider")
  public TransportChannelProvider defaultSecurityCenterManagementTransportChannelProvider() {
    if (this.clientProperties.getUseRest()) {
      return SecurityCenterManagementSettings.defaultHttpJsonTransportProviderBuilder().build();
    }
    return SecurityCenterManagementSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a SecurityCenterManagementSettings bean configured to use a DefaultCredentialsProvider
   * and the client library's default transport channel provider
   * (defaultSecurityCenterManagementTransportChannelProvider()). It also configures the quota
   * project ID and executor thread count, if provided through properties.
   *
   * <p>Retry settings are also configured from service-level and method-level properties specified
   * in SecurityCenterManagementSpringProperties. Method-level properties will take precedence over
   * service-level properties if available, and client library defaults will be used if neither are
   * specified.
   *
   * @param defaultTransportChannelProvider TransportChannelProvider to use in the settings.
   * @return a {@link SecurityCenterManagementSettings} bean configured with {@link
   *     TransportChannelProvider} bean.
   */
  @Bean
  @ConditionalOnMissingBean
  public SecurityCenterManagementSettings securityCenterManagementSettings(
      @Qualifier("defaultSecurityCenterManagementTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    SecurityCenterManagementSettings.Builder clientSettingsBuilder;
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder = SecurityCenterManagementSettings.newHttpJsonBuilder();
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using REST (HTTP/JSON) transport.");
      }
    } else {
      clientSettingsBuilder = SecurityCenterManagementSettings.newBuilder();
    }
    clientSettingsBuilder
        .setCredentialsProvider(this.credentialsProvider)
        .setTransportChannelProvider(defaultTransportChannelProvider)
        .setEndpoint(SecurityCenterManagementSettings.getDefaultEndpoint())
        .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          SecurityCenterManagementSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    Retry serviceRetry = clientProperties.getRetry();
    if (serviceRetry != null) {
      RetrySettings listEffectiveSecurityHealthAnalyticsCustomModulesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .listEffectiveSecurityHealthAnalyticsCustomModulesSettings()
                  .getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .listEffectiveSecurityHealthAnalyticsCustomModulesSettings()
          .setRetrySettings(listEffectiveSecurityHealthAnalyticsCustomModulesRetrySettings);

      RetrySettings getEffectiveSecurityHealthAnalyticsCustomModuleRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .getEffectiveSecurityHealthAnalyticsCustomModuleSettings()
                  .getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .getEffectiveSecurityHealthAnalyticsCustomModuleSettings()
          .setRetrySettings(getEffectiveSecurityHealthAnalyticsCustomModuleRetrySettings);

      RetrySettings listSecurityHealthAnalyticsCustomModulesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .listSecurityHealthAnalyticsCustomModulesSettings()
                  .getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .listSecurityHealthAnalyticsCustomModulesSettings()
          .setRetrySettings(listSecurityHealthAnalyticsCustomModulesRetrySettings);

      RetrySettings listDescendantSecurityHealthAnalyticsCustomModulesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .listDescendantSecurityHealthAnalyticsCustomModulesSettings()
                  .getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .listDescendantSecurityHealthAnalyticsCustomModulesSettings()
          .setRetrySettings(listDescendantSecurityHealthAnalyticsCustomModulesRetrySettings);

      RetrySettings getSecurityHealthAnalyticsCustomModuleRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .getSecurityHealthAnalyticsCustomModuleSettings()
                  .getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .getSecurityHealthAnalyticsCustomModuleSettings()
          .setRetrySettings(getSecurityHealthAnalyticsCustomModuleRetrySettings);

      RetrySettings createSecurityHealthAnalyticsCustomModuleRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .createSecurityHealthAnalyticsCustomModuleSettings()
                  .getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .createSecurityHealthAnalyticsCustomModuleSettings()
          .setRetrySettings(createSecurityHealthAnalyticsCustomModuleRetrySettings);

      RetrySettings updateSecurityHealthAnalyticsCustomModuleRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .updateSecurityHealthAnalyticsCustomModuleSettings()
                  .getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .updateSecurityHealthAnalyticsCustomModuleSettings()
          .setRetrySettings(updateSecurityHealthAnalyticsCustomModuleRetrySettings);

      RetrySettings deleteSecurityHealthAnalyticsCustomModuleRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .deleteSecurityHealthAnalyticsCustomModuleSettings()
                  .getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .deleteSecurityHealthAnalyticsCustomModuleSettings()
          .setRetrySettings(deleteSecurityHealthAnalyticsCustomModuleRetrySettings);

      RetrySettings simulateSecurityHealthAnalyticsCustomModuleRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .simulateSecurityHealthAnalyticsCustomModuleSettings()
                  .getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .simulateSecurityHealthAnalyticsCustomModuleSettings()
          .setRetrySettings(simulateSecurityHealthAnalyticsCustomModuleRetrySettings);

      RetrySettings listEffectiveEventThreatDetectionCustomModulesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .listEffectiveEventThreatDetectionCustomModulesSettings()
                  .getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .listEffectiveEventThreatDetectionCustomModulesSettings()
          .setRetrySettings(listEffectiveEventThreatDetectionCustomModulesRetrySettings);

      RetrySettings getEffectiveEventThreatDetectionCustomModuleRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .getEffectiveEventThreatDetectionCustomModuleSettings()
                  .getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .getEffectiveEventThreatDetectionCustomModuleSettings()
          .setRetrySettings(getEffectiveEventThreatDetectionCustomModuleRetrySettings);

      RetrySettings listEventThreatDetectionCustomModulesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .listEventThreatDetectionCustomModulesSettings()
                  .getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .listEventThreatDetectionCustomModulesSettings()
          .setRetrySettings(listEventThreatDetectionCustomModulesRetrySettings);

      RetrySettings listDescendantEventThreatDetectionCustomModulesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .listDescendantEventThreatDetectionCustomModulesSettings()
                  .getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .listDescendantEventThreatDetectionCustomModulesSettings()
          .setRetrySettings(listDescendantEventThreatDetectionCustomModulesRetrySettings);

      RetrySettings getEventThreatDetectionCustomModuleRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .getEventThreatDetectionCustomModuleSettings()
                  .getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .getEventThreatDetectionCustomModuleSettings()
          .setRetrySettings(getEventThreatDetectionCustomModuleRetrySettings);

      RetrySettings createEventThreatDetectionCustomModuleRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .createEventThreatDetectionCustomModuleSettings()
                  .getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .createEventThreatDetectionCustomModuleSettings()
          .setRetrySettings(createEventThreatDetectionCustomModuleRetrySettings);

      RetrySettings updateEventThreatDetectionCustomModuleRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .updateEventThreatDetectionCustomModuleSettings()
                  .getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .updateEventThreatDetectionCustomModuleSettings()
          .setRetrySettings(updateEventThreatDetectionCustomModuleRetrySettings);

      RetrySettings deleteEventThreatDetectionCustomModuleRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .deleteEventThreatDetectionCustomModuleSettings()
                  .getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .deleteEventThreatDetectionCustomModuleSettings()
          .setRetrySettings(deleteEventThreatDetectionCustomModuleRetrySettings);

      RetrySettings validateEventThreatDetectionCustomModuleRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .validateEventThreatDetectionCustomModuleSettings()
                  .getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .validateEventThreatDetectionCustomModuleSettings()
          .setRetrySettings(validateEventThreatDetectionCustomModuleRetrySettings);

      RetrySettings getSecurityCenterServiceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getSecurityCenterServiceSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .getSecurityCenterServiceSettings()
          .setRetrySettings(getSecurityCenterServiceRetrySettings);

      RetrySettings listSecurityCenterServicesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listSecurityCenterServicesSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .listSecurityCenterServicesSettings()
          .setRetrySettings(listSecurityCenterServicesRetrySettings);

      RetrySettings updateSecurityCenterServiceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateSecurityCenterServiceSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .updateSecurityCenterServiceSettings()
          .setRetrySettings(updateSecurityCenterServiceRetrySettings);

      RetrySettings listLocationsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listLocationsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.listLocationsSettings().setRetrySettings(listLocationsRetrySettings);

      RetrySettings getLocationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getLocationSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getLocationSettings().setRetrySettings(getLocationRetrySettings);

      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured service-level retry settings from properties.");
      }
    }
    Retry listEffectiveSecurityHealthAnalyticsCustomModulesRetry =
        clientProperties.getListEffectiveSecurityHealthAnalyticsCustomModulesRetry();
    if (listEffectiveSecurityHealthAnalyticsCustomModulesRetry != null) {
      RetrySettings listEffectiveSecurityHealthAnalyticsCustomModulesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .listEffectiveSecurityHealthAnalyticsCustomModulesSettings()
                  .getRetrySettings(),
              listEffectiveSecurityHealthAnalyticsCustomModulesRetry);
      clientSettingsBuilder
          .listEffectiveSecurityHealthAnalyticsCustomModulesSettings()
          .setRetrySettings(listEffectiveSecurityHealthAnalyticsCustomModulesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listEffectiveSecurityHealthAnalyticsCustomModules from properties.");
      }
    }
    Retry getEffectiveSecurityHealthAnalyticsCustomModuleRetry =
        clientProperties.getGetEffectiveSecurityHealthAnalyticsCustomModuleRetry();
    if (getEffectiveSecurityHealthAnalyticsCustomModuleRetry != null) {
      RetrySettings getEffectiveSecurityHealthAnalyticsCustomModuleRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .getEffectiveSecurityHealthAnalyticsCustomModuleSettings()
                  .getRetrySettings(),
              getEffectiveSecurityHealthAnalyticsCustomModuleRetry);
      clientSettingsBuilder
          .getEffectiveSecurityHealthAnalyticsCustomModuleSettings()
          .setRetrySettings(getEffectiveSecurityHealthAnalyticsCustomModuleRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for getEffectiveSecurityHealthAnalyticsCustomModule from properties.");
      }
    }
    Retry listSecurityHealthAnalyticsCustomModulesRetry =
        clientProperties.getListSecurityHealthAnalyticsCustomModulesRetry();
    if (listSecurityHealthAnalyticsCustomModulesRetry != null) {
      RetrySettings listSecurityHealthAnalyticsCustomModulesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .listSecurityHealthAnalyticsCustomModulesSettings()
                  .getRetrySettings(),
              listSecurityHealthAnalyticsCustomModulesRetry);
      clientSettingsBuilder
          .listSecurityHealthAnalyticsCustomModulesSettings()
          .setRetrySettings(listSecurityHealthAnalyticsCustomModulesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listSecurityHealthAnalyticsCustomModules from properties.");
      }
    }
    Retry listDescendantSecurityHealthAnalyticsCustomModulesRetry =
        clientProperties.getListDescendantSecurityHealthAnalyticsCustomModulesRetry();
    if (listDescendantSecurityHealthAnalyticsCustomModulesRetry != null) {
      RetrySettings listDescendantSecurityHealthAnalyticsCustomModulesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .listDescendantSecurityHealthAnalyticsCustomModulesSettings()
                  .getRetrySettings(),
              listDescendantSecurityHealthAnalyticsCustomModulesRetry);
      clientSettingsBuilder
          .listDescendantSecurityHealthAnalyticsCustomModulesSettings()
          .setRetrySettings(listDescendantSecurityHealthAnalyticsCustomModulesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listDescendantSecurityHealthAnalyticsCustomModules from properties.");
      }
    }
    Retry getSecurityHealthAnalyticsCustomModuleRetry =
        clientProperties.getGetSecurityHealthAnalyticsCustomModuleRetry();
    if (getSecurityHealthAnalyticsCustomModuleRetry != null) {
      RetrySettings getSecurityHealthAnalyticsCustomModuleRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .getSecurityHealthAnalyticsCustomModuleSettings()
                  .getRetrySettings(),
              getSecurityHealthAnalyticsCustomModuleRetry);
      clientSettingsBuilder
          .getSecurityHealthAnalyticsCustomModuleSettings()
          .setRetrySettings(getSecurityHealthAnalyticsCustomModuleRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for getSecurityHealthAnalyticsCustomModule from properties.");
      }
    }
    Retry createSecurityHealthAnalyticsCustomModuleRetry =
        clientProperties.getCreateSecurityHealthAnalyticsCustomModuleRetry();
    if (createSecurityHealthAnalyticsCustomModuleRetry != null) {
      RetrySettings createSecurityHealthAnalyticsCustomModuleRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .createSecurityHealthAnalyticsCustomModuleSettings()
                  .getRetrySettings(),
              createSecurityHealthAnalyticsCustomModuleRetry);
      clientSettingsBuilder
          .createSecurityHealthAnalyticsCustomModuleSettings()
          .setRetrySettings(createSecurityHealthAnalyticsCustomModuleRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for createSecurityHealthAnalyticsCustomModule from properties.");
      }
    }
    Retry updateSecurityHealthAnalyticsCustomModuleRetry =
        clientProperties.getUpdateSecurityHealthAnalyticsCustomModuleRetry();
    if (updateSecurityHealthAnalyticsCustomModuleRetry != null) {
      RetrySettings updateSecurityHealthAnalyticsCustomModuleRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .updateSecurityHealthAnalyticsCustomModuleSettings()
                  .getRetrySettings(),
              updateSecurityHealthAnalyticsCustomModuleRetry);
      clientSettingsBuilder
          .updateSecurityHealthAnalyticsCustomModuleSettings()
          .setRetrySettings(updateSecurityHealthAnalyticsCustomModuleRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for updateSecurityHealthAnalyticsCustomModule from properties.");
      }
    }
    Retry deleteSecurityHealthAnalyticsCustomModuleRetry =
        clientProperties.getDeleteSecurityHealthAnalyticsCustomModuleRetry();
    if (deleteSecurityHealthAnalyticsCustomModuleRetry != null) {
      RetrySettings deleteSecurityHealthAnalyticsCustomModuleRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .deleteSecurityHealthAnalyticsCustomModuleSettings()
                  .getRetrySettings(),
              deleteSecurityHealthAnalyticsCustomModuleRetry);
      clientSettingsBuilder
          .deleteSecurityHealthAnalyticsCustomModuleSettings()
          .setRetrySettings(deleteSecurityHealthAnalyticsCustomModuleRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for deleteSecurityHealthAnalyticsCustomModule from properties.");
      }
    }
    Retry simulateSecurityHealthAnalyticsCustomModuleRetry =
        clientProperties.getSimulateSecurityHealthAnalyticsCustomModuleRetry();
    if (simulateSecurityHealthAnalyticsCustomModuleRetry != null) {
      RetrySettings simulateSecurityHealthAnalyticsCustomModuleRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .simulateSecurityHealthAnalyticsCustomModuleSettings()
                  .getRetrySettings(),
              simulateSecurityHealthAnalyticsCustomModuleRetry);
      clientSettingsBuilder
          .simulateSecurityHealthAnalyticsCustomModuleSettings()
          .setRetrySettings(simulateSecurityHealthAnalyticsCustomModuleRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for simulateSecurityHealthAnalyticsCustomModule from properties.");
      }
    }
    Retry listEffectiveEventThreatDetectionCustomModulesRetry =
        clientProperties.getListEffectiveEventThreatDetectionCustomModulesRetry();
    if (listEffectiveEventThreatDetectionCustomModulesRetry != null) {
      RetrySettings listEffectiveEventThreatDetectionCustomModulesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .listEffectiveEventThreatDetectionCustomModulesSettings()
                  .getRetrySettings(),
              listEffectiveEventThreatDetectionCustomModulesRetry);
      clientSettingsBuilder
          .listEffectiveEventThreatDetectionCustomModulesSettings()
          .setRetrySettings(listEffectiveEventThreatDetectionCustomModulesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listEffectiveEventThreatDetectionCustomModules from properties.");
      }
    }
    Retry getEffectiveEventThreatDetectionCustomModuleRetry =
        clientProperties.getGetEffectiveEventThreatDetectionCustomModuleRetry();
    if (getEffectiveEventThreatDetectionCustomModuleRetry != null) {
      RetrySettings getEffectiveEventThreatDetectionCustomModuleRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .getEffectiveEventThreatDetectionCustomModuleSettings()
                  .getRetrySettings(),
              getEffectiveEventThreatDetectionCustomModuleRetry);
      clientSettingsBuilder
          .getEffectiveEventThreatDetectionCustomModuleSettings()
          .setRetrySettings(getEffectiveEventThreatDetectionCustomModuleRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for getEffectiveEventThreatDetectionCustomModule from properties.");
      }
    }
    Retry listEventThreatDetectionCustomModulesRetry =
        clientProperties.getListEventThreatDetectionCustomModulesRetry();
    if (listEventThreatDetectionCustomModulesRetry != null) {
      RetrySettings listEventThreatDetectionCustomModulesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .listEventThreatDetectionCustomModulesSettings()
                  .getRetrySettings(),
              listEventThreatDetectionCustomModulesRetry);
      clientSettingsBuilder
          .listEventThreatDetectionCustomModulesSettings()
          .setRetrySettings(listEventThreatDetectionCustomModulesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listEventThreatDetectionCustomModules from properties.");
      }
    }
    Retry listDescendantEventThreatDetectionCustomModulesRetry =
        clientProperties.getListDescendantEventThreatDetectionCustomModulesRetry();
    if (listDescendantEventThreatDetectionCustomModulesRetry != null) {
      RetrySettings listDescendantEventThreatDetectionCustomModulesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .listDescendantEventThreatDetectionCustomModulesSettings()
                  .getRetrySettings(),
              listDescendantEventThreatDetectionCustomModulesRetry);
      clientSettingsBuilder
          .listDescendantEventThreatDetectionCustomModulesSettings()
          .setRetrySettings(listDescendantEventThreatDetectionCustomModulesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listDescendantEventThreatDetectionCustomModules from properties.");
      }
    }
    Retry getEventThreatDetectionCustomModuleRetry =
        clientProperties.getGetEventThreatDetectionCustomModuleRetry();
    if (getEventThreatDetectionCustomModuleRetry != null) {
      RetrySettings getEventThreatDetectionCustomModuleRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .getEventThreatDetectionCustomModuleSettings()
                  .getRetrySettings(),
              getEventThreatDetectionCustomModuleRetry);
      clientSettingsBuilder
          .getEventThreatDetectionCustomModuleSettings()
          .setRetrySettings(getEventThreatDetectionCustomModuleRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for getEventThreatDetectionCustomModule from properties.");
      }
    }
    Retry createEventThreatDetectionCustomModuleRetry =
        clientProperties.getCreateEventThreatDetectionCustomModuleRetry();
    if (createEventThreatDetectionCustomModuleRetry != null) {
      RetrySettings createEventThreatDetectionCustomModuleRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .createEventThreatDetectionCustomModuleSettings()
                  .getRetrySettings(),
              createEventThreatDetectionCustomModuleRetry);
      clientSettingsBuilder
          .createEventThreatDetectionCustomModuleSettings()
          .setRetrySettings(createEventThreatDetectionCustomModuleRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for createEventThreatDetectionCustomModule from properties.");
      }
    }
    Retry updateEventThreatDetectionCustomModuleRetry =
        clientProperties.getUpdateEventThreatDetectionCustomModuleRetry();
    if (updateEventThreatDetectionCustomModuleRetry != null) {
      RetrySettings updateEventThreatDetectionCustomModuleRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .updateEventThreatDetectionCustomModuleSettings()
                  .getRetrySettings(),
              updateEventThreatDetectionCustomModuleRetry);
      clientSettingsBuilder
          .updateEventThreatDetectionCustomModuleSettings()
          .setRetrySettings(updateEventThreatDetectionCustomModuleRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for updateEventThreatDetectionCustomModule from properties.");
      }
    }
    Retry deleteEventThreatDetectionCustomModuleRetry =
        clientProperties.getDeleteEventThreatDetectionCustomModuleRetry();
    if (deleteEventThreatDetectionCustomModuleRetry != null) {
      RetrySettings deleteEventThreatDetectionCustomModuleRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .deleteEventThreatDetectionCustomModuleSettings()
                  .getRetrySettings(),
              deleteEventThreatDetectionCustomModuleRetry);
      clientSettingsBuilder
          .deleteEventThreatDetectionCustomModuleSettings()
          .setRetrySettings(deleteEventThreatDetectionCustomModuleRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for deleteEventThreatDetectionCustomModule from properties.");
      }
    }
    Retry validateEventThreatDetectionCustomModuleRetry =
        clientProperties.getValidateEventThreatDetectionCustomModuleRetry();
    if (validateEventThreatDetectionCustomModuleRetry != null) {
      RetrySettings validateEventThreatDetectionCustomModuleRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .validateEventThreatDetectionCustomModuleSettings()
                  .getRetrySettings(),
              validateEventThreatDetectionCustomModuleRetry);
      clientSettingsBuilder
          .validateEventThreatDetectionCustomModuleSettings()
          .setRetrySettings(validateEventThreatDetectionCustomModuleRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for validateEventThreatDetectionCustomModule from properties.");
      }
    }
    Retry getSecurityCenterServiceRetry = clientProperties.getGetSecurityCenterServiceRetry();
    if (getSecurityCenterServiceRetry != null) {
      RetrySettings getSecurityCenterServiceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getSecurityCenterServiceSettings().getRetrySettings(),
              getSecurityCenterServiceRetry);
      clientSettingsBuilder
          .getSecurityCenterServiceSettings()
          .setRetrySettings(getSecurityCenterServiceRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for getSecurityCenterService from properties.");
      }
    }
    Retry listSecurityCenterServicesRetry = clientProperties.getListSecurityCenterServicesRetry();
    if (listSecurityCenterServicesRetry != null) {
      RetrySettings listSecurityCenterServicesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listSecurityCenterServicesSettings().getRetrySettings(),
              listSecurityCenterServicesRetry);
      clientSettingsBuilder
          .listSecurityCenterServicesSettings()
          .setRetrySettings(listSecurityCenterServicesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listSecurityCenterServices from properties.");
      }
    }
    Retry updateSecurityCenterServiceRetry = clientProperties.getUpdateSecurityCenterServiceRetry();
    if (updateSecurityCenterServiceRetry != null) {
      RetrySettings updateSecurityCenterServiceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateSecurityCenterServiceSettings().getRetrySettings(),
              updateSecurityCenterServiceRetry);
      clientSettingsBuilder
          .updateSecurityCenterServiceSettings()
          .setRetrySettings(updateSecurityCenterServiceRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for updateSecurityCenterService from properties.");
      }
    }
    Retry listLocationsRetry = clientProperties.getListLocationsRetry();
    if (listLocationsRetry != null) {
      RetrySettings listLocationsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listLocationsSettings().getRetrySettings(), listLocationsRetry);
      clientSettingsBuilder.listLocationsSettings().setRetrySettings(listLocationsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listLocations from properties.");
      }
    }
    Retry getLocationRetry = clientProperties.getGetLocationRetry();
    if (getLocationRetry != null) {
      RetrySettings getLocationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getLocationSettings().getRetrySettings(), getLocationRetry);
      clientSettingsBuilder.getLocationSettings().setRetrySettings(getLocationRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getLocation from properties.");
      }
    }
    return clientSettingsBuilder.build();
  }

  /**
   * Provides a SecurityCenterManagementClient bean configured with
   * SecurityCenterManagementSettings.
   *
   * @param securityCenterManagementSettings settings to configure an instance of client bean.
   * @return a {@link SecurityCenterManagementClient} bean configured with {@link
   *     SecurityCenterManagementSettings}
   */
  @Bean
  @ConditionalOnMissingBean
  public SecurityCenterManagementClient securityCenterManagementClient(
      SecurityCenterManagementSettings securityCenterManagementSettings) throws IOException {
    return SecurityCenterManagementClient.create(securityCenterManagementSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-security-center-management";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
