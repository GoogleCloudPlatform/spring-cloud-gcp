/*
 * Copyright 2024 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.workstations.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.spring.autoconfigure.core.GcpContextAutoConfiguration;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.core.Retry;
import com.google.cloud.spring.core.util.RetryUtil;
import com.google.cloud.workstations.v1.WorkstationsClient;
import com.google.cloud.workstations.v1.WorkstationsSettings;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.AutoConfigureAfter;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link WorkstationsClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@AutoConfigureAfter(GcpContextAutoConfiguration.class)
@ConditionalOnClass(WorkstationsClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.workstations.v1.workstations.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties(WorkstationsSpringProperties.class)
public class WorkstationsSpringAutoConfiguration {
  private final WorkstationsSpringProperties clientProperties;
  private final CredentialsProvider credentialsProvider;
  private static final Log LOGGER = LogFactory.getLog(WorkstationsSpringAutoConfiguration.class);

  protected WorkstationsSpringAutoConfiguration(
      WorkstationsSpringProperties clientProperties, CredentialsProvider credentialsProvider)
      throws IOException {
    this.clientProperties = clientProperties;
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from Workstations-specific configuration");
      }
      this.credentialsProvider =
          ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    } else {
      this.credentialsProvider = credentialsProvider;
    }
  }

  /**
   * Provides a default transport channel provider bean, corresponding to the client library's
   * default transport channel provider. If the library supports both GRPC and REST transport, and
   * the useRest property is configured, the HTTP/JSON transport provider will be used instead of
   * GRPC.
   *
   * @return a default transport channel provider.
   */
  @Bean
  @ConditionalOnMissingBean(name = "defaultWorkstationsTransportChannelProvider")
  public TransportChannelProvider defaultWorkstationsTransportChannelProvider() {
    if (this.clientProperties.getUseRest()) {
      return WorkstationsSettings.defaultHttpJsonTransportProviderBuilder().build();
    }
    return WorkstationsSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a WorkstationsSettings bean configured to use a DefaultCredentialsProvider and the
   * client library's default transport channel provider
   * (defaultWorkstationsTransportChannelProvider()). It also configures the quota project ID and
   * executor thread count, if provided through properties.
   *
   * <p>Retry settings are also configured from service-level and method-level properties specified
   * in WorkstationsSpringProperties. Method-level properties will take precedence over
   * service-level properties if available, and client library defaults will be used if neither are
   * specified.
   *
   * @param defaultTransportChannelProvider TransportChannelProvider to use in the settings.
   * @return a {@link WorkstationsSettings} bean configured with {@link TransportChannelProvider}
   *     bean.
   */
  @Bean
  @ConditionalOnMissingBean
  public WorkstationsSettings workstationsSettings(
      @Qualifier("defaultWorkstationsTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    WorkstationsSettings.Builder clientSettingsBuilder;
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder = WorkstationsSettings.newHttpJsonBuilder();
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using REST (HTTP/JSON) transport.");
      }
    } else {
      clientSettingsBuilder = WorkstationsSettings.newBuilder();
    }
    clientSettingsBuilder
        .setCredentialsProvider(this.credentialsProvider)
        .setTransportChannelProvider(defaultTransportChannelProvider)
        .setEndpoint(WorkstationsSettings.getDefaultEndpoint())
        .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          WorkstationsSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    Retry serviceRetry = clientProperties.getRetry();
    if (serviceRetry != null) {
      RetrySettings getWorkstationClusterRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getWorkstationClusterSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .getWorkstationClusterSettings()
          .setRetrySettings(getWorkstationClusterRetrySettings);

      RetrySettings listWorkstationClustersRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listWorkstationClustersSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .listWorkstationClustersSettings()
          .setRetrySettings(listWorkstationClustersRetrySettings);

      RetrySettings getWorkstationConfigRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getWorkstationConfigSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .getWorkstationConfigSettings()
          .setRetrySettings(getWorkstationConfigRetrySettings);

      RetrySettings listWorkstationConfigsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listWorkstationConfigsSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .listWorkstationConfigsSettings()
          .setRetrySettings(listWorkstationConfigsRetrySettings);

      RetrySettings listUsableWorkstationConfigsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listUsableWorkstationConfigsSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .listUsableWorkstationConfigsSettings()
          .setRetrySettings(listUsableWorkstationConfigsRetrySettings);

      RetrySettings getWorkstationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getWorkstationSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getWorkstationSettings().setRetrySettings(getWorkstationRetrySettings);

      RetrySettings listWorkstationsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listWorkstationsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .listWorkstationsSettings()
          .setRetrySettings(listWorkstationsRetrySettings);

      RetrySettings listUsableWorkstationsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listUsableWorkstationsSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .listUsableWorkstationsSettings()
          .setRetrySettings(listUsableWorkstationsRetrySettings);

      RetrySettings generateAccessTokenRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.generateAccessTokenSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .generateAccessTokenSettings()
          .setRetrySettings(generateAccessTokenRetrySettings);

      RetrySettings setIamPolicyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.setIamPolicySettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.setIamPolicySettings().setRetrySettings(setIamPolicyRetrySettings);

      RetrySettings getIamPolicyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getIamPolicySettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getIamPolicySettings().setRetrySettings(getIamPolicyRetrySettings);

      RetrySettings testIamPermissionsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.testIamPermissionsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .testIamPermissionsSettings()
          .setRetrySettings(testIamPermissionsRetrySettings);

      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured service-level retry settings from properties.");
      }
    }
    Retry getWorkstationClusterRetry = clientProperties.getGetWorkstationClusterRetry();
    if (getWorkstationClusterRetry != null) {
      RetrySettings getWorkstationClusterRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getWorkstationClusterSettings().getRetrySettings(),
              getWorkstationClusterRetry);
      clientSettingsBuilder
          .getWorkstationClusterSettings()
          .setRetrySettings(getWorkstationClusterRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for getWorkstationCluster from properties.");
      }
    }
    Retry listWorkstationClustersRetry = clientProperties.getListWorkstationClustersRetry();
    if (listWorkstationClustersRetry != null) {
      RetrySettings listWorkstationClustersRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listWorkstationClustersSettings().getRetrySettings(),
              listWorkstationClustersRetry);
      clientSettingsBuilder
          .listWorkstationClustersSettings()
          .setRetrySettings(listWorkstationClustersRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listWorkstationClusters from properties.");
      }
    }
    Retry getWorkstationConfigRetry = clientProperties.getGetWorkstationConfigRetry();
    if (getWorkstationConfigRetry != null) {
      RetrySettings getWorkstationConfigRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getWorkstationConfigSettings().getRetrySettings(),
              getWorkstationConfigRetry);
      clientSettingsBuilder
          .getWorkstationConfigSettings()
          .setRetrySettings(getWorkstationConfigRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for getWorkstationConfig from properties.");
      }
    }
    Retry listWorkstationConfigsRetry = clientProperties.getListWorkstationConfigsRetry();
    if (listWorkstationConfigsRetry != null) {
      RetrySettings listWorkstationConfigsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listWorkstationConfigsSettings().getRetrySettings(),
              listWorkstationConfigsRetry);
      clientSettingsBuilder
          .listWorkstationConfigsSettings()
          .setRetrySettings(listWorkstationConfigsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listWorkstationConfigs from properties.");
      }
    }
    Retry listUsableWorkstationConfigsRetry =
        clientProperties.getListUsableWorkstationConfigsRetry();
    if (listUsableWorkstationConfigsRetry != null) {
      RetrySettings listUsableWorkstationConfigsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listUsableWorkstationConfigsSettings().getRetrySettings(),
              listUsableWorkstationConfigsRetry);
      clientSettingsBuilder
          .listUsableWorkstationConfigsSettings()
          .setRetrySettings(listUsableWorkstationConfigsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listUsableWorkstationConfigs from properties.");
      }
    }
    Retry getWorkstationRetry = clientProperties.getGetWorkstationRetry();
    if (getWorkstationRetry != null) {
      RetrySettings getWorkstationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getWorkstationSettings().getRetrySettings(),
              getWorkstationRetry);
      clientSettingsBuilder.getWorkstationSettings().setRetrySettings(getWorkstationRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getWorkstation from properties.");
      }
    }
    Retry listWorkstationsRetry = clientProperties.getListWorkstationsRetry();
    if (listWorkstationsRetry != null) {
      RetrySettings listWorkstationsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listWorkstationsSettings().getRetrySettings(),
              listWorkstationsRetry);
      clientSettingsBuilder
          .listWorkstationsSettings()
          .setRetrySettings(listWorkstationsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listWorkstations from properties.");
      }
    }
    Retry listUsableWorkstationsRetry = clientProperties.getListUsableWorkstationsRetry();
    if (listUsableWorkstationsRetry != null) {
      RetrySettings listUsableWorkstationsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listUsableWorkstationsSettings().getRetrySettings(),
              listUsableWorkstationsRetry);
      clientSettingsBuilder
          .listUsableWorkstationsSettings()
          .setRetrySettings(listUsableWorkstationsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listUsableWorkstations from properties.");
      }
    }
    Retry generateAccessTokenRetry = clientProperties.getGenerateAccessTokenRetry();
    if (generateAccessTokenRetry != null) {
      RetrySettings generateAccessTokenRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.generateAccessTokenSettings().getRetrySettings(),
              generateAccessTokenRetry);
      clientSettingsBuilder
          .generateAccessTokenSettings()
          .setRetrySettings(generateAccessTokenRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for generateAccessToken from properties.");
      }
    }
    Retry setIamPolicyRetry = clientProperties.getSetIamPolicyRetry();
    if (setIamPolicyRetry != null) {
      RetrySettings setIamPolicyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.setIamPolicySettings().getRetrySettings(), setIamPolicyRetry);
      clientSettingsBuilder.setIamPolicySettings().setRetrySettings(setIamPolicyRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for setIamPolicy from properties.");
      }
    }
    Retry getIamPolicyRetry = clientProperties.getGetIamPolicyRetry();
    if (getIamPolicyRetry != null) {
      RetrySettings getIamPolicyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getIamPolicySettings().getRetrySettings(), getIamPolicyRetry);
      clientSettingsBuilder.getIamPolicySettings().setRetrySettings(getIamPolicyRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getIamPolicy from properties.");
      }
    }
    Retry testIamPermissionsRetry = clientProperties.getTestIamPermissionsRetry();
    if (testIamPermissionsRetry != null) {
      RetrySettings testIamPermissionsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.testIamPermissionsSettings().getRetrySettings(),
              testIamPermissionsRetry);
      clientSettingsBuilder
          .testIamPermissionsSettings()
          .setRetrySettings(testIamPermissionsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for testIamPermissions from properties.");
      }
    }
    return clientSettingsBuilder.build();
  }

  /**
   * Provides a WorkstationsClient bean configured with WorkstationsSettings.
   *
   * @param workstationsSettings settings to configure an instance of client bean.
   * @return a {@link WorkstationsClient} bean configured with {@link WorkstationsSettings}
   */
  @Bean
  @ConditionalOnMissingBean
  public WorkstationsClient workstationsClient(WorkstationsSettings workstationsSettings)
      throws IOException {
    return WorkstationsClient.create(workstationsSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-workstations";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
