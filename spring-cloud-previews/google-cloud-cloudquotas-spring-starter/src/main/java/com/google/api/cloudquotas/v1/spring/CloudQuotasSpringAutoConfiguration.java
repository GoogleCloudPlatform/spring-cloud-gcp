/*
 * Copyright 2024 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.api.cloudquotas.v1.spring;

import com.google.api.cloudquotas.v1.CloudQuotasClient;
import com.google.api.cloudquotas.v1.CloudQuotasSettings;
import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.spring.autoconfigure.core.GcpContextAutoConfiguration;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.core.Retry;
import com.google.cloud.spring.core.util.RetryUtil;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.AutoConfigureAfter;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link CloudQuotasClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@AutoConfigureAfter(GcpContextAutoConfiguration.class)
@ConditionalOnClass(CloudQuotasClient.class)
@ConditionalOnProperty(
    value = "com.google.api.cloudquotas.v1.cloud-quotas.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties(CloudQuotasSpringProperties.class)
public class CloudQuotasSpringAutoConfiguration {
  private final CloudQuotasSpringProperties clientProperties;
  private final CredentialsProvider credentialsProvider;
  private static final Log LOGGER = LogFactory.getLog(CloudQuotasSpringAutoConfiguration.class);

  protected CloudQuotasSpringAutoConfiguration(
      CloudQuotasSpringProperties clientProperties, CredentialsProvider credentialsProvider)
      throws IOException {
    this.clientProperties = clientProperties;
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from CloudQuotas-specific configuration");
      }
      this.credentialsProvider =
          ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    } else {
      this.credentialsProvider = credentialsProvider;
    }
  }

  /**
   * Provides a default transport channel provider bean, corresponding to the client library's
   * default transport channel provider. If the library supports both GRPC and REST transport, and
   * the useRest property is configured, the HTTP/JSON transport provider will be used instead of
   * GRPC.
   *
   * @return a default transport channel provider.
   */
  @Bean
  @ConditionalOnMissingBean(name = "defaultCloudQuotasTransportChannelProvider")
  public TransportChannelProvider defaultCloudQuotasTransportChannelProvider() {
    if (this.clientProperties.getUseRest()) {
      return CloudQuotasSettings.defaultHttpJsonTransportProviderBuilder().build();
    }
    return CloudQuotasSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a CloudQuotasSettings bean configured to use a DefaultCredentialsProvider and the
   * client library's default transport channel provider
   * (defaultCloudQuotasTransportChannelProvider()). It also configures the quota project ID and
   * executor thread count, if provided through properties.
   *
   * <p>Retry settings are also configured from service-level and method-level properties specified
   * in CloudQuotasSpringProperties. Method-level properties will take precedence over service-level
   * properties if available, and client library defaults will be used if neither are specified.
   *
   * @param defaultTransportChannelProvider TransportChannelProvider to use in the settings.
   * @return a {@link CloudQuotasSettings} bean configured with {@link TransportChannelProvider}
   *     bean.
   */
  @Bean
  @ConditionalOnMissingBean
  public CloudQuotasSettings cloudQuotasSettings(
      @Qualifier("defaultCloudQuotasTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    CloudQuotasSettings.Builder clientSettingsBuilder;
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder = CloudQuotasSettings.newHttpJsonBuilder();
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using REST (HTTP/JSON) transport.");
      }
    } else {
      clientSettingsBuilder = CloudQuotasSettings.newBuilder();
    }
    clientSettingsBuilder
        .setCredentialsProvider(this.credentialsProvider)
        .setTransportChannelProvider(defaultTransportChannelProvider)
        .setEndpoint(CloudQuotasSettings.getDefaultEndpoint())
        .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          CloudQuotasSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    Retry serviceRetry = clientProperties.getRetry();
    if (serviceRetry != null) {
      RetrySettings listQuotaInfosRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listQuotaInfosSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.listQuotaInfosSettings().setRetrySettings(listQuotaInfosRetrySettings);

      RetrySettings getQuotaInfoRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getQuotaInfoSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getQuotaInfoSettings().setRetrySettings(getQuotaInfoRetrySettings);

      RetrySettings listQuotaPreferencesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listQuotaPreferencesSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .listQuotaPreferencesSettings()
          .setRetrySettings(listQuotaPreferencesRetrySettings);

      RetrySettings getQuotaPreferenceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getQuotaPreferenceSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .getQuotaPreferenceSettings()
          .setRetrySettings(getQuotaPreferenceRetrySettings);

      RetrySettings createQuotaPreferenceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createQuotaPreferenceSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .createQuotaPreferenceSettings()
          .setRetrySettings(createQuotaPreferenceRetrySettings);

      RetrySettings updateQuotaPreferenceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateQuotaPreferenceSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .updateQuotaPreferenceSettings()
          .setRetrySettings(updateQuotaPreferenceRetrySettings);

      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured service-level retry settings from properties.");
      }
    }
    Retry listQuotaInfosRetry = clientProperties.getListQuotaInfosRetry();
    if (listQuotaInfosRetry != null) {
      RetrySettings listQuotaInfosRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listQuotaInfosSettings().getRetrySettings(),
              listQuotaInfosRetry);
      clientSettingsBuilder.listQuotaInfosSettings().setRetrySettings(listQuotaInfosRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listQuotaInfos from properties.");
      }
    }
    Retry getQuotaInfoRetry = clientProperties.getGetQuotaInfoRetry();
    if (getQuotaInfoRetry != null) {
      RetrySettings getQuotaInfoRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getQuotaInfoSettings().getRetrySettings(), getQuotaInfoRetry);
      clientSettingsBuilder.getQuotaInfoSettings().setRetrySettings(getQuotaInfoRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getQuotaInfo from properties.");
      }
    }
    Retry listQuotaPreferencesRetry = clientProperties.getListQuotaPreferencesRetry();
    if (listQuotaPreferencesRetry != null) {
      RetrySettings listQuotaPreferencesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listQuotaPreferencesSettings().getRetrySettings(),
              listQuotaPreferencesRetry);
      clientSettingsBuilder
          .listQuotaPreferencesSettings()
          .setRetrySettings(listQuotaPreferencesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listQuotaPreferences from properties.");
      }
    }
    Retry getQuotaPreferenceRetry = clientProperties.getGetQuotaPreferenceRetry();
    if (getQuotaPreferenceRetry != null) {
      RetrySettings getQuotaPreferenceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getQuotaPreferenceSettings().getRetrySettings(),
              getQuotaPreferenceRetry);
      clientSettingsBuilder
          .getQuotaPreferenceSettings()
          .setRetrySettings(getQuotaPreferenceRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for getQuotaPreference from properties.");
      }
    }
    Retry createQuotaPreferenceRetry = clientProperties.getCreateQuotaPreferenceRetry();
    if (createQuotaPreferenceRetry != null) {
      RetrySettings createQuotaPreferenceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createQuotaPreferenceSettings().getRetrySettings(),
              createQuotaPreferenceRetry);
      clientSettingsBuilder
          .createQuotaPreferenceSettings()
          .setRetrySettings(createQuotaPreferenceRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for createQuotaPreference from properties.");
      }
    }
    Retry updateQuotaPreferenceRetry = clientProperties.getUpdateQuotaPreferenceRetry();
    if (updateQuotaPreferenceRetry != null) {
      RetrySettings updateQuotaPreferenceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateQuotaPreferenceSettings().getRetrySettings(),
              updateQuotaPreferenceRetry);
      clientSettingsBuilder
          .updateQuotaPreferenceSettings()
          .setRetrySettings(updateQuotaPreferenceRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for updateQuotaPreference from properties.");
      }
    }
    return clientSettingsBuilder.build();
  }

  /**
   * Provides a CloudQuotasClient bean configured with CloudQuotasSettings.
   *
   * @param cloudQuotasSettings settings to configure an instance of client bean.
   * @return a {@link CloudQuotasClient} bean configured with {@link CloudQuotasSettings}
   */
  @Bean
  @ConditionalOnMissingBean
  public CloudQuotasClient cloudQuotasClient(CloudQuotasSettings cloudQuotasSettings)
      throws IOException {
    return CloudQuotasClient.create(cloudQuotasSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-cloud-quotas";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
