/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.devtools.cloudbuild.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.devtools.cloudbuild.v1.CloudBuildClient;
import com.google.cloud.devtools.cloudbuild.v1.CloudBuildSettings;
import com.google.cloud.spring.autoconfigure.core.GcpContextAutoConfiguration;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.core.Retry;
import com.google.cloud.spring.core.util.RetryUtil;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.AutoConfigureAfter;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link CloudBuildClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@AutoConfigureAfter(GcpContextAutoConfiguration.class)
@ConditionalOnClass(CloudBuildClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.devtools.cloudbuild.v1.cloud-build.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties(CloudBuildSpringProperties.class)
public class CloudBuildSpringAutoConfiguration {
  private final CloudBuildSpringProperties clientProperties;
  private final CredentialsProvider credentialsProvider;
  private static final Log LOGGER = LogFactory.getLog(CloudBuildSpringAutoConfiguration.class);

  protected CloudBuildSpringAutoConfiguration(
      CloudBuildSpringProperties clientProperties, CredentialsProvider credentialsProvider)
      throws IOException {
    this.clientProperties = clientProperties;
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from CloudBuild-specific configuration");
      }
      this.credentialsProvider =
          ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    } else {
      this.credentialsProvider = credentialsProvider;
    }
  }

  /**
   * Provides a default transport channel provider bean. The default is gRPC and will default to it
   * unless the useRest option is supported and provided to use HTTP transport instead
   *
   * @return a default transport channel provider.
   */
  @Bean
  @ConditionalOnMissingBean(name = "defaultCloudBuildTransportChannelProvider")
  public TransportChannelProvider defaultCloudBuildTransportChannelProvider() {
    if (this.clientProperties.getUseRest()) {
      return CloudBuildSettings.defaultHttpJsonTransportProviderBuilder().build();
    }
    return CloudBuildSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a CloudBuildSettings bean configured to use a DefaultCredentialsProvider and the
   * client library's default transport channel provider
   * (defaultCloudBuildTransportChannelProvider()). It also configures the quota project ID and
   * executor thread count, if provided through properties.
   *
   * <p>Retry settings are also configured from service-level and method-level properties specified
   * in CloudBuildSpringProperties. Method-level properties will take precedence over service-level
   * properties if available, and client library defaults will be used if neither are specified.
   *
   * @param defaultTransportChannelProvider TransportChannelProvider to use in the settings.
   * @return a {@link CloudBuildSettings} bean configured with {@link TransportChannelProvider}
   *     bean.
   */
  @Bean
  @ConditionalOnMissingBean
  public CloudBuildSettings cloudBuildSettings(
      @Qualifier("defaultCloudBuildTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    CloudBuildSettings.Builder clientSettingsBuilder;
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder = CloudBuildSettings.newHttpJsonBuilder();
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using REST (HTTP/JSON) transport.");
      }
    } else {
      clientSettingsBuilder = CloudBuildSettings.newBuilder();
    }
    clientSettingsBuilder
        .setCredentialsProvider(this.credentialsProvider)
        .setTransportChannelProvider(defaultTransportChannelProvider)
        .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          CloudBuildSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    Retry serviceRetry = clientProperties.getRetry();
    if (serviceRetry != null) {
      RetrySettings getBuildRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getBuildSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getBuildSettings().setRetrySettings(getBuildRetrySettings);

      RetrySettings listBuildsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listBuildsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.listBuildsSettings().setRetrySettings(listBuildsRetrySettings);

      RetrySettings cancelBuildRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.cancelBuildSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.cancelBuildSettings().setRetrySettings(cancelBuildRetrySettings);

      RetrySettings createBuildTriggerRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createBuildTriggerSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .createBuildTriggerSettings()
          .setRetrySettings(createBuildTriggerRetrySettings);

      RetrySettings getBuildTriggerRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getBuildTriggerSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .getBuildTriggerSettings()
          .setRetrySettings(getBuildTriggerRetrySettings);

      RetrySettings listBuildTriggersRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listBuildTriggersSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .listBuildTriggersSettings()
          .setRetrySettings(listBuildTriggersRetrySettings);

      RetrySettings deleteBuildTriggerRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteBuildTriggerSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .deleteBuildTriggerSettings()
          .setRetrySettings(deleteBuildTriggerRetrySettings);

      RetrySettings updateBuildTriggerRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateBuildTriggerSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .updateBuildTriggerSettings()
          .setRetrySettings(updateBuildTriggerRetrySettings);

      RetrySettings receiveTriggerWebhookRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.receiveTriggerWebhookSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .receiveTriggerWebhookSettings()
          .setRetrySettings(receiveTriggerWebhookRetrySettings);

      RetrySettings getWorkerPoolRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getWorkerPoolSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getWorkerPoolSettings().setRetrySettings(getWorkerPoolRetrySettings);

      RetrySettings listWorkerPoolsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listWorkerPoolsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .listWorkerPoolsSettings()
          .setRetrySettings(listWorkerPoolsRetrySettings);

      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured service-level retry settings from properties.");
      }
    }
    Retry getBuildRetry = clientProperties.getGetBuildRetry();
    if (getBuildRetry != null) {
      RetrySettings getBuildRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getBuildSettings().getRetrySettings(), getBuildRetry);
      clientSettingsBuilder.getBuildSettings().setRetrySettings(getBuildRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getBuild from properties.");
      }
    }
    Retry listBuildsRetry = clientProperties.getListBuildsRetry();
    if (listBuildsRetry != null) {
      RetrySettings listBuildsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listBuildsSettings().getRetrySettings(), listBuildsRetry);
      clientSettingsBuilder.listBuildsSettings().setRetrySettings(listBuildsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listBuilds from properties.");
      }
    }
    Retry cancelBuildRetry = clientProperties.getCancelBuildRetry();
    if (cancelBuildRetry != null) {
      RetrySettings cancelBuildRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.cancelBuildSettings().getRetrySettings(), cancelBuildRetry);
      clientSettingsBuilder.cancelBuildSettings().setRetrySettings(cancelBuildRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for cancelBuild from properties.");
      }
    }
    Retry createBuildTriggerRetry = clientProperties.getCreateBuildTriggerRetry();
    if (createBuildTriggerRetry != null) {
      RetrySettings createBuildTriggerRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createBuildTriggerSettings().getRetrySettings(),
              createBuildTriggerRetry);
      clientSettingsBuilder
          .createBuildTriggerSettings()
          .setRetrySettings(createBuildTriggerRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for createBuildTrigger from properties.");
      }
    }
    Retry getBuildTriggerRetry = clientProperties.getGetBuildTriggerRetry();
    if (getBuildTriggerRetry != null) {
      RetrySettings getBuildTriggerRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getBuildTriggerSettings().getRetrySettings(),
              getBuildTriggerRetry);
      clientSettingsBuilder
          .getBuildTriggerSettings()
          .setRetrySettings(getBuildTriggerRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getBuildTrigger from properties.");
      }
    }
    Retry listBuildTriggersRetry = clientProperties.getListBuildTriggersRetry();
    if (listBuildTriggersRetry != null) {
      RetrySettings listBuildTriggersRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listBuildTriggersSettings().getRetrySettings(),
              listBuildTriggersRetry);
      clientSettingsBuilder
          .listBuildTriggersSettings()
          .setRetrySettings(listBuildTriggersRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listBuildTriggers from properties.");
      }
    }
    Retry deleteBuildTriggerRetry = clientProperties.getDeleteBuildTriggerRetry();
    if (deleteBuildTriggerRetry != null) {
      RetrySettings deleteBuildTriggerRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteBuildTriggerSettings().getRetrySettings(),
              deleteBuildTriggerRetry);
      clientSettingsBuilder
          .deleteBuildTriggerSettings()
          .setRetrySettings(deleteBuildTriggerRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for deleteBuildTrigger from properties.");
      }
    }
    Retry updateBuildTriggerRetry = clientProperties.getUpdateBuildTriggerRetry();
    if (updateBuildTriggerRetry != null) {
      RetrySettings updateBuildTriggerRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateBuildTriggerSettings().getRetrySettings(),
              updateBuildTriggerRetry);
      clientSettingsBuilder
          .updateBuildTriggerSettings()
          .setRetrySettings(updateBuildTriggerRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for updateBuildTrigger from properties.");
      }
    }
    Retry receiveTriggerWebhookRetry = clientProperties.getReceiveTriggerWebhookRetry();
    if (receiveTriggerWebhookRetry != null) {
      RetrySettings receiveTriggerWebhookRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.receiveTriggerWebhookSettings().getRetrySettings(),
              receiveTriggerWebhookRetry);
      clientSettingsBuilder
          .receiveTriggerWebhookSettings()
          .setRetrySettings(receiveTriggerWebhookRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for receiveTriggerWebhook from properties.");
      }
    }
    Retry getWorkerPoolRetry = clientProperties.getGetWorkerPoolRetry();
    if (getWorkerPoolRetry != null) {
      RetrySettings getWorkerPoolRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getWorkerPoolSettings().getRetrySettings(), getWorkerPoolRetry);
      clientSettingsBuilder.getWorkerPoolSettings().setRetrySettings(getWorkerPoolRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getWorkerPool from properties.");
      }
    }
    Retry listWorkerPoolsRetry = clientProperties.getListWorkerPoolsRetry();
    if (listWorkerPoolsRetry != null) {
      RetrySettings listWorkerPoolsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listWorkerPoolsSettings().getRetrySettings(),
              listWorkerPoolsRetry);
      clientSettingsBuilder
          .listWorkerPoolsSettings()
          .setRetrySettings(listWorkerPoolsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listWorkerPools from properties.");
      }
    }
    return clientSettingsBuilder.build();
  }

  /**
   * Provides a CloudBuildClient bean configured with CloudBuildSettings.
   *
   * @param cloudBuildSettings settings to configure an instance of client bean.
   * @return a {@link CloudBuildClient} bean configured with {@link CloudBuildSettings}
   */
  @Bean
  @ConditionalOnMissingBean
  public CloudBuildClient cloudBuildClient(CloudBuildSettings cloudBuildSettings)
      throws IOException {
    return CloudBuildClient.create(cloudBuildSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-cloud-build";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
