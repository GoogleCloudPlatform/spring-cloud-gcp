/*
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.devtools.cloudbuild.v2.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.devtools.cloudbuild.v2.RepositoryManagerClient;
import com.google.cloud.devtools.cloudbuild.v2.RepositoryManagerSettings;
import com.google.cloud.spring.autoconfigure.core.GcpContextAutoConfiguration;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.core.Retry;
import com.google.cloud.spring.core.util.RetryUtil;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.AutoConfigureAfter;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link RepositoryManagerClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@AutoConfigureAfter(GcpContextAutoConfiguration.class)
@ConditionalOnClass(RepositoryManagerClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.devtools.cloudbuild.v2.repository-manager.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties(RepositoryManagerSpringProperties.class)
public class RepositoryManagerSpringAutoConfiguration {
  private final RepositoryManagerSpringProperties clientProperties;
  private final CredentialsProvider credentialsProvider;
  private static final Log LOGGER =
      LogFactory.getLog(RepositoryManagerSpringAutoConfiguration.class);

  protected RepositoryManagerSpringAutoConfiguration(
      RepositoryManagerSpringProperties clientProperties, CredentialsProvider credentialsProvider)
      throws IOException {
    this.clientProperties = clientProperties;
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from RepositoryManager-specific configuration");
      }
      this.credentialsProvider =
          ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    } else {
      this.credentialsProvider = credentialsProvider;
    }
  }

  /**
   * Provides a default transport channel provider bean, corresponding to the client library's
   * default transport channel provider. If the library supports both GRPC and REST transport, and
   * the useRest property is configured, the HTTP/JSON transport provider will be used instead of
   * GRPC.
   *
   * @return a default transport channel provider.
   */
  @Bean
  @ConditionalOnMissingBean(name = "defaultRepositoryManagerTransportChannelProvider")
  public TransportChannelProvider defaultRepositoryManagerTransportChannelProvider() {
    if (this.clientProperties.getUseRest()) {
      return RepositoryManagerSettings.defaultHttpJsonTransportProviderBuilder().build();
    }
    return RepositoryManagerSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a RepositoryManagerSettings bean configured to use a DefaultCredentialsProvider and
   * the client library's default transport channel provider
   * (defaultRepositoryManagerTransportChannelProvider()). It also configures the quota project ID
   * and executor thread count, if provided through properties.
   *
   * <p>Retry settings are also configured from service-level and method-level properties specified
   * in RepositoryManagerSpringProperties. Method-level properties will take precedence over
   * service-level properties if available, and client library defaults will be used if neither are
   * specified.
   *
   * @param defaultTransportChannelProvider TransportChannelProvider to use in the settings.
   * @return a {@link RepositoryManagerSettings} bean configured with {@link
   *     TransportChannelProvider} bean.
   */
  @Bean
  @ConditionalOnMissingBean
  public RepositoryManagerSettings repositoryManagerSettings(
      @Qualifier("defaultRepositoryManagerTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    RepositoryManagerSettings.Builder clientSettingsBuilder;
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder = RepositoryManagerSettings.newHttpJsonBuilder();
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using REST (HTTP/JSON) transport.");
      }
    } else {
      clientSettingsBuilder = RepositoryManagerSettings.newBuilder();
    }
    clientSettingsBuilder
        .setCredentialsProvider(this.credentialsProvider)
        .setTransportChannelProvider(defaultTransportChannelProvider)
        .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          RepositoryManagerSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    Retry serviceRetry = clientProperties.getRetry();
    if (serviceRetry != null) {
      RetrySettings getConnectionRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getConnectionSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getConnectionSettings().setRetrySettings(getConnectionRetrySettings);

      RetrySettings listConnectionsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listConnectionsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .listConnectionsSettings()
          .setRetrySettings(listConnectionsRetrySettings);

      RetrySettings getRepositoryRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getRepositorySettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getRepositorySettings().setRetrySettings(getRepositoryRetrySettings);

      RetrySettings listRepositoriesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listRepositoriesSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .listRepositoriesSettings()
          .setRetrySettings(listRepositoriesRetrySettings);

      RetrySettings fetchReadWriteTokenRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.fetchReadWriteTokenSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .fetchReadWriteTokenSettings()
          .setRetrySettings(fetchReadWriteTokenRetrySettings);

      RetrySettings fetchReadTokenRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.fetchReadTokenSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.fetchReadTokenSettings().setRetrySettings(fetchReadTokenRetrySettings);

      RetrySettings fetchLinkableRepositoriesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.fetchLinkableRepositoriesSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .fetchLinkableRepositoriesSettings()
          .setRetrySettings(fetchLinkableRepositoriesRetrySettings);

      RetrySettings setIamPolicyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.setIamPolicySettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.setIamPolicySettings().setRetrySettings(setIamPolicyRetrySettings);

      RetrySettings getIamPolicyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getIamPolicySettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getIamPolicySettings().setRetrySettings(getIamPolicyRetrySettings);

      RetrySettings testIamPermissionsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.testIamPermissionsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .testIamPermissionsSettings()
          .setRetrySettings(testIamPermissionsRetrySettings);

      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured service-level retry settings from properties.");
      }
    }
    Retry getConnectionRetry = clientProperties.getGetConnectionRetry();
    if (getConnectionRetry != null) {
      RetrySettings getConnectionRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getConnectionSettings().getRetrySettings(), getConnectionRetry);
      clientSettingsBuilder.getConnectionSettings().setRetrySettings(getConnectionRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getConnection from properties.");
      }
    }
    Retry listConnectionsRetry = clientProperties.getListConnectionsRetry();
    if (listConnectionsRetry != null) {
      RetrySettings listConnectionsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listConnectionsSettings().getRetrySettings(),
              listConnectionsRetry);
      clientSettingsBuilder
          .listConnectionsSettings()
          .setRetrySettings(listConnectionsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listConnections from properties.");
      }
    }
    Retry getRepositoryRetry = clientProperties.getGetRepositoryRetry();
    if (getRepositoryRetry != null) {
      RetrySettings getRepositoryRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getRepositorySettings().getRetrySettings(), getRepositoryRetry);
      clientSettingsBuilder.getRepositorySettings().setRetrySettings(getRepositoryRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getRepository from properties.");
      }
    }
    Retry listRepositoriesRetry = clientProperties.getListRepositoriesRetry();
    if (listRepositoriesRetry != null) {
      RetrySettings listRepositoriesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listRepositoriesSettings().getRetrySettings(),
              listRepositoriesRetry);
      clientSettingsBuilder
          .listRepositoriesSettings()
          .setRetrySettings(listRepositoriesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listRepositories from properties.");
      }
    }
    Retry fetchReadWriteTokenRetry = clientProperties.getFetchReadWriteTokenRetry();
    if (fetchReadWriteTokenRetry != null) {
      RetrySettings fetchReadWriteTokenRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.fetchReadWriteTokenSettings().getRetrySettings(),
              fetchReadWriteTokenRetry);
      clientSettingsBuilder
          .fetchReadWriteTokenSettings()
          .setRetrySettings(fetchReadWriteTokenRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for fetchReadWriteToken from properties.");
      }
    }
    Retry fetchReadTokenRetry = clientProperties.getFetchReadTokenRetry();
    if (fetchReadTokenRetry != null) {
      RetrySettings fetchReadTokenRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.fetchReadTokenSettings().getRetrySettings(),
              fetchReadTokenRetry);
      clientSettingsBuilder.fetchReadTokenSettings().setRetrySettings(fetchReadTokenRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for fetchReadToken from properties.");
      }
    }
    Retry fetchLinkableRepositoriesRetry = clientProperties.getFetchLinkableRepositoriesRetry();
    if (fetchLinkableRepositoriesRetry != null) {
      RetrySettings fetchLinkableRepositoriesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.fetchLinkableRepositoriesSettings().getRetrySettings(),
              fetchLinkableRepositoriesRetry);
      clientSettingsBuilder
          .fetchLinkableRepositoriesSettings()
          .setRetrySettings(fetchLinkableRepositoriesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for fetchLinkableRepositories from properties.");
      }
    }
    Retry setIamPolicyRetry = clientProperties.getSetIamPolicyRetry();
    if (setIamPolicyRetry != null) {
      RetrySettings setIamPolicyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.setIamPolicySettings().getRetrySettings(), setIamPolicyRetry);
      clientSettingsBuilder.setIamPolicySettings().setRetrySettings(setIamPolicyRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for setIamPolicy from properties.");
      }
    }
    Retry getIamPolicyRetry = clientProperties.getGetIamPolicyRetry();
    if (getIamPolicyRetry != null) {
      RetrySettings getIamPolicyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getIamPolicySettings().getRetrySettings(), getIamPolicyRetry);
      clientSettingsBuilder.getIamPolicySettings().setRetrySettings(getIamPolicyRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getIamPolicy from properties.");
      }
    }
    Retry testIamPermissionsRetry = clientProperties.getTestIamPermissionsRetry();
    if (testIamPermissionsRetry != null) {
      RetrySettings testIamPermissionsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.testIamPermissionsSettings().getRetrySettings(),
              testIamPermissionsRetry);
      clientSettingsBuilder
          .testIamPermissionsSettings()
          .setRetrySettings(testIamPermissionsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for testIamPermissions from properties.");
      }
    }
    return clientSettingsBuilder.build();
  }

  /**
   * Provides a RepositoryManagerClient bean configured with RepositoryManagerSettings.
   *
   * @param repositoryManagerSettings settings to configure an instance of client bean.
   * @return a {@link RepositoryManagerClient} bean configured with {@link
   *     RepositoryManagerSettings}
   */
  @Bean
  @ConditionalOnMissingBean
  public RepositoryManagerClient repositoryManagerClient(
      RepositoryManagerSettings repositoryManagerSettings) throws IOException {
    return RepositoryManagerClient.create(repositoryManagerSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-repository-manager";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
