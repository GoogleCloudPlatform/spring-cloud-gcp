/*
 * Copyright 2024 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.retail.v2.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.retail.v2.GenerativeQuestionServiceClient;
import com.google.cloud.retail.v2.GenerativeQuestionServiceSettings;
import com.google.cloud.spring.autoconfigure.core.GcpContextAutoConfiguration;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.core.Retry;
import com.google.cloud.spring.core.util.RetryUtil;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.AutoConfigureAfter;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link GenerativeQuestionServiceClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@AutoConfigureAfter(GcpContextAutoConfiguration.class)
@ConditionalOnClass(GenerativeQuestionServiceClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.retail.v2.generative-question-service.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties(GenerativeQuestionServiceSpringProperties.class)
public class GenerativeQuestionServiceSpringAutoConfiguration {
  private final GenerativeQuestionServiceSpringProperties clientProperties;
  private final CredentialsProvider credentialsProvider;
  private static final Log LOGGER =
      LogFactory.getLog(GenerativeQuestionServiceSpringAutoConfiguration.class);

  protected GenerativeQuestionServiceSpringAutoConfiguration(
      GenerativeQuestionServiceSpringProperties clientProperties,
      CredentialsProvider credentialsProvider)
      throws IOException {
    this.clientProperties = clientProperties;
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from GenerativeQuestionService-specific configuration");
      }
      this.credentialsProvider =
          ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    } else {
      this.credentialsProvider = credentialsProvider;
    }
  }

  /**
   * Provides a default transport channel provider bean, corresponding to the client library's
   * default transport channel provider. If the library supports both GRPC and REST transport, and
   * the useRest property is configured, the HTTP/JSON transport provider will be used instead of
   * GRPC.
   *
   * @return a default transport channel provider.
   */
  @Bean
  @ConditionalOnMissingBean(name = "defaultGenerativeQuestionServiceTransportChannelProvider")
  public TransportChannelProvider defaultGenerativeQuestionServiceTransportChannelProvider() {
    if (this.clientProperties.getUseRest()) {
      return GenerativeQuestionServiceSettings.defaultHttpJsonTransportProviderBuilder().build();
    }
    return GenerativeQuestionServiceSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a GenerativeQuestionServiceSettings bean configured to use a
   * DefaultCredentialsProvider and the client library's default transport channel provider
   * (defaultGenerativeQuestionServiceTransportChannelProvider()). It also configures the quota
   * project ID and executor thread count, if provided through properties.
   *
   * <p>Retry settings are also configured from service-level and method-level properties specified
   * in GenerativeQuestionServiceSpringProperties. Method-level properties will take precedence over
   * service-level properties if available, and client library defaults will be used if neither are
   * specified.
   *
   * @param defaultTransportChannelProvider TransportChannelProvider to use in the settings.
   * @return a {@link GenerativeQuestionServiceSettings} bean configured with {@link
   *     TransportChannelProvider} bean.
   */
  @Bean
  @ConditionalOnMissingBean
  public GenerativeQuestionServiceSettings generativeQuestionServiceSettings(
      @Qualifier("defaultGenerativeQuestionServiceTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    GenerativeQuestionServiceSettings.Builder clientSettingsBuilder;
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder = GenerativeQuestionServiceSettings.newHttpJsonBuilder();
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using REST (HTTP/JSON) transport.");
      }
    } else {
      clientSettingsBuilder = GenerativeQuestionServiceSettings.newBuilder();
    }
    clientSettingsBuilder
        .setCredentialsProvider(this.credentialsProvider)
        .setTransportChannelProvider(defaultTransportChannelProvider)
        .setEndpoint(GenerativeQuestionServiceSettings.getDefaultEndpoint())
        .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          GenerativeQuestionServiceSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    Retry serviceRetry = clientProperties.getRetry();
    if (serviceRetry != null) {
      RetrySettings updateGenerativeQuestionsFeatureConfigRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .updateGenerativeQuestionsFeatureConfigSettings()
                  .getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .updateGenerativeQuestionsFeatureConfigSettings()
          .setRetrySettings(updateGenerativeQuestionsFeatureConfigRetrySettings);

      RetrySettings getGenerativeQuestionsFeatureConfigRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .getGenerativeQuestionsFeatureConfigSettings()
                  .getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .getGenerativeQuestionsFeatureConfigSettings()
          .setRetrySettings(getGenerativeQuestionsFeatureConfigRetrySettings);

      RetrySettings listGenerativeQuestionConfigsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listGenerativeQuestionConfigsSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .listGenerativeQuestionConfigsSettings()
          .setRetrySettings(listGenerativeQuestionConfigsRetrySettings);

      RetrySettings updateGenerativeQuestionConfigRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateGenerativeQuestionConfigSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .updateGenerativeQuestionConfigSettings()
          .setRetrySettings(updateGenerativeQuestionConfigRetrySettings);

      RetrySettings batchUpdateGenerativeQuestionConfigsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .batchUpdateGenerativeQuestionConfigsSettings()
                  .getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .batchUpdateGenerativeQuestionConfigsSettings()
          .setRetrySettings(batchUpdateGenerativeQuestionConfigsRetrySettings);

      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured service-level retry settings from properties.");
      }
    }
    Retry updateGenerativeQuestionsFeatureConfigRetry =
        clientProperties.getUpdateGenerativeQuestionsFeatureConfigRetry();
    if (updateGenerativeQuestionsFeatureConfigRetry != null) {
      RetrySettings updateGenerativeQuestionsFeatureConfigRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .updateGenerativeQuestionsFeatureConfigSettings()
                  .getRetrySettings(),
              updateGenerativeQuestionsFeatureConfigRetry);
      clientSettingsBuilder
          .updateGenerativeQuestionsFeatureConfigSettings()
          .setRetrySettings(updateGenerativeQuestionsFeatureConfigRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for updateGenerativeQuestionsFeatureConfig from properties.");
      }
    }
    Retry getGenerativeQuestionsFeatureConfigRetry =
        clientProperties.getGetGenerativeQuestionsFeatureConfigRetry();
    if (getGenerativeQuestionsFeatureConfigRetry != null) {
      RetrySettings getGenerativeQuestionsFeatureConfigRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .getGenerativeQuestionsFeatureConfigSettings()
                  .getRetrySettings(),
              getGenerativeQuestionsFeatureConfigRetry);
      clientSettingsBuilder
          .getGenerativeQuestionsFeatureConfigSettings()
          .setRetrySettings(getGenerativeQuestionsFeatureConfigRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for getGenerativeQuestionsFeatureConfig from properties.");
      }
    }
    Retry listGenerativeQuestionConfigsRetry =
        clientProperties.getListGenerativeQuestionConfigsRetry();
    if (listGenerativeQuestionConfigsRetry != null) {
      RetrySettings listGenerativeQuestionConfigsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listGenerativeQuestionConfigsSettings().getRetrySettings(),
              listGenerativeQuestionConfigsRetry);
      clientSettingsBuilder
          .listGenerativeQuestionConfigsSettings()
          .setRetrySettings(listGenerativeQuestionConfigsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listGenerativeQuestionConfigs from properties.");
      }
    }
    Retry updateGenerativeQuestionConfigRetry =
        clientProperties.getUpdateGenerativeQuestionConfigRetry();
    if (updateGenerativeQuestionConfigRetry != null) {
      RetrySettings updateGenerativeQuestionConfigRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateGenerativeQuestionConfigSettings().getRetrySettings(),
              updateGenerativeQuestionConfigRetry);
      clientSettingsBuilder
          .updateGenerativeQuestionConfigSettings()
          .setRetrySettings(updateGenerativeQuestionConfigRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for updateGenerativeQuestionConfig from properties.");
      }
    }
    Retry batchUpdateGenerativeQuestionConfigsRetry =
        clientProperties.getBatchUpdateGenerativeQuestionConfigsRetry();
    if (batchUpdateGenerativeQuestionConfigsRetry != null) {
      RetrySettings batchUpdateGenerativeQuestionConfigsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder
                  .batchUpdateGenerativeQuestionConfigsSettings()
                  .getRetrySettings(),
              batchUpdateGenerativeQuestionConfigsRetry);
      clientSettingsBuilder
          .batchUpdateGenerativeQuestionConfigsSettings()
          .setRetrySettings(batchUpdateGenerativeQuestionConfigsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for batchUpdateGenerativeQuestionConfigs from properties.");
      }
    }
    return clientSettingsBuilder.build();
  }

  /**
   * Provides a GenerativeQuestionServiceClient bean configured with
   * GenerativeQuestionServiceSettings.
   *
   * @param generativeQuestionServiceSettings settings to configure an instance of client bean.
   * @return a {@link GenerativeQuestionServiceClient} bean configured with {@link
   *     GenerativeQuestionServiceSettings}
   */
  @Bean
  @ConditionalOnMissingBean
  public GenerativeQuestionServiceClient generativeQuestionServiceClient(
      GenerativeQuestionServiceSettings generativeQuestionServiceSettings) throws IOException {
    return GenerativeQuestionServiceClient.create(generativeQuestionServiceSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-generative-question-service";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
