/*
 * Copyright 2024 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.translate.v3.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.spring.autoconfigure.core.GcpContextAutoConfiguration;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.core.Retry;
import com.google.cloud.spring.core.util.RetryUtil;
import com.google.cloud.translate.v3.TranslationServiceClient;
import com.google.cloud.translate.v3.TranslationServiceSettings;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.AutoConfigureAfter;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link TranslationServiceClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@AutoConfigureAfter(GcpContextAutoConfiguration.class)
@ConditionalOnClass(TranslationServiceClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.translate.v3.translation-service.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties(TranslationServiceSpringProperties.class)
public class TranslationServiceSpringAutoConfiguration {
  private final TranslationServiceSpringProperties clientProperties;
  private final CredentialsProvider credentialsProvider;
  private static final Log LOGGER =
      LogFactory.getLog(TranslationServiceSpringAutoConfiguration.class);

  protected TranslationServiceSpringAutoConfiguration(
      TranslationServiceSpringProperties clientProperties, CredentialsProvider credentialsProvider)
      throws IOException {
    this.clientProperties = clientProperties;
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from TranslationService-specific configuration");
      }
      this.credentialsProvider =
          ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    } else {
      this.credentialsProvider = credentialsProvider;
    }
  }

  /**
   * Provides a default transport channel provider bean, corresponding to the client library's
   * default transport channel provider. If the library supports both GRPC and REST transport, and
   * the useRest property is configured, the HTTP/JSON transport provider will be used instead of
   * GRPC.
   *
   * @return a default transport channel provider.
   */
  @Bean
  @ConditionalOnMissingBean(name = "defaultTranslationServiceTransportChannelProvider")
  public TransportChannelProvider defaultTranslationServiceTransportChannelProvider() {
    if (this.clientProperties.getUseRest()) {
      return TranslationServiceSettings.defaultHttpJsonTransportProviderBuilder().build();
    }
    return TranslationServiceSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a TranslationServiceSettings bean configured to use a DefaultCredentialsProvider and
   * the client library's default transport channel provider
   * (defaultTranslationServiceTransportChannelProvider()). It also configures the quota project ID
   * and executor thread count, if provided through properties.
   *
   * <p>Retry settings are also configured from service-level and method-level properties specified
   * in TranslationServiceSpringProperties. Method-level properties will take precedence over
   * service-level properties if available, and client library defaults will be used if neither are
   * specified.
   *
   * @param defaultTransportChannelProvider TransportChannelProvider to use in the settings.
   * @return a {@link TranslationServiceSettings} bean configured with {@link
   *     TransportChannelProvider} bean.
   */
  @Bean
  @ConditionalOnMissingBean
  public TranslationServiceSettings translationServiceSettings(
      @Qualifier("defaultTranslationServiceTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    TranslationServiceSettings.Builder clientSettingsBuilder;
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder = TranslationServiceSettings.newHttpJsonBuilder();
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using REST (HTTP/JSON) transport.");
      }
    } else {
      clientSettingsBuilder = TranslationServiceSettings.newBuilder();
    }
    clientSettingsBuilder
        .setCredentialsProvider(this.credentialsProvider)
        .setTransportChannelProvider(defaultTransportChannelProvider)
        .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          TranslationServiceSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    Retry serviceRetry = clientProperties.getRetry();
    if (serviceRetry != null) {
      RetrySettings translateTextRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.translateTextSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.translateTextSettings().setRetrySettings(translateTextRetrySettings);

      RetrySettings detectLanguageRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.detectLanguageSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.detectLanguageSettings().setRetrySettings(detectLanguageRetrySettings);

      RetrySettings getSupportedLanguagesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getSupportedLanguagesSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .getSupportedLanguagesSettings()
          .setRetrySettings(getSupportedLanguagesRetrySettings);

      RetrySettings translateDocumentRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.translateDocumentSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .translateDocumentSettings()
          .setRetrySettings(translateDocumentRetrySettings);

      RetrySettings listGlossariesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listGlossariesSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.listGlossariesSettings().setRetrySettings(listGlossariesRetrySettings);

      RetrySettings getGlossaryRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getGlossarySettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getGlossarySettings().setRetrySettings(getGlossaryRetrySettings);

      RetrySettings createAdaptiveMtDatasetRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createAdaptiveMtDatasetSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .createAdaptiveMtDatasetSettings()
          .setRetrySettings(createAdaptiveMtDatasetRetrySettings);

      RetrySettings deleteAdaptiveMtDatasetRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteAdaptiveMtDatasetSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .deleteAdaptiveMtDatasetSettings()
          .setRetrySettings(deleteAdaptiveMtDatasetRetrySettings);

      RetrySettings getAdaptiveMtDatasetRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getAdaptiveMtDatasetSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .getAdaptiveMtDatasetSettings()
          .setRetrySettings(getAdaptiveMtDatasetRetrySettings);

      RetrySettings listAdaptiveMtDatasetsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listAdaptiveMtDatasetsSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .listAdaptiveMtDatasetsSettings()
          .setRetrySettings(listAdaptiveMtDatasetsRetrySettings);

      RetrySettings adaptiveMtTranslateRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.adaptiveMtTranslateSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .adaptiveMtTranslateSettings()
          .setRetrySettings(adaptiveMtTranslateRetrySettings);

      RetrySettings getAdaptiveMtFileRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getAdaptiveMtFileSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .getAdaptiveMtFileSettings()
          .setRetrySettings(getAdaptiveMtFileRetrySettings);

      RetrySettings deleteAdaptiveMtFileRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteAdaptiveMtFileSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .deleteAdaptiveMtFileSettings()
          .setRetrySettings(deleteAdaptiveMtFileRetrySettings);

      RetrySettings importAdaptiveMtFileRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.importAdaptiveMtFileSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .importAdaptiveMtFileSettings()
          .setRetrySettings(importAdaptiveMtFileRetrySettings);

      RetrySettings listAdaptiveMtFilesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listAdaptiveMtFilesSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .listAdaptiveMtFilesSettings()
          .setRetrySettings(listAdaptiveMtFilesRetrySettings);

      RetrySettings listAdaptiveMtSentencesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listAdaptiveMtSentencesSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .listAdaptiveMtSentencesSettings()
          .setRetrySettings(listAdaptiveMtSentencesRetrySettings);

      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured service-level retry settings from properties.");
      }
    }
    Retry translateTextRetry = clientProperties.getTranslateTextRetry();
    if (translateTextRetry != null) {
      RetrySettings translateTextRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.translateTextSettings().getRetrySettings(), translateTextRetry);
      clientSettingsBuilder.translateTextSettings().setRetrySettings(translateTextRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for translateText from properties.");
      }
    }
    Retry detectLanguageRetry = clientProperties.getDetectLanguageRetry();
    if (detectLanguageRetry != null) {
      RetrySettings detectLanguageRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.detectLanguageSettings().getRetrySettings(),
              detectLanguageRetry);
      clientSettingsBuilder.detectLanguageSettings().setRetrySettings(detectLanguageRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for detectLanguage from properties.");
      }
    }
    Retry getSupportedLanguagesRetry = clientProperties.getGetSupportedLanguagesRetry();
    if (getSupportedLanguagesRetry != null) {
      RetrySettings getSupportedLanguagesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getSupportedLanguagesSettings().getRetrySettings(),
              getSupportedLanguagesRetry);
      clientSettingsBuilder
          .getSupportedLanguagesSettings()
          .setRetrySettings(getSupportedLanguagesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for getSupportedLanguages from properties.");
      }
    }
    Retry translateDocumentRetry = clientProperties.getTranslateDocumentRetry();
    if (translateDocumentRetry != null) {
      RetrySettings translateDocumentRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.translateDocumentSettings().getRetrySettings(),
              translateDocumentRetry);
      clientSettingsBuilder
          .translateDocumentSettings()
          .setRetrySettings(translateDocumentRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for translateDocument from properties.");
      }
    }
    Retry listGlossariesRetry = clientProperties.getListGlossariesRetry();
    if (listGlossariesRetry != null) {
      RetrySettings listGlossariesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listGlossariesSettings().getRetrySettings(),
              listGlossariesRetry);
      clientSettingsBuilder.listGlossariesSettings().setRetrySettings(listGlossariesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listGlossaries from properties.");
      }
    }
    Retry getGlossaryRetry = clientProperties.getGetGlossaryRetry();
    if (getGlossaryRetry != null) {
      RetrySettings getGlossaryRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getGlossarySettings().getRetrySettings(), getGlossaryRetry);
      clientSettingsBuilder.getGlossarySettings().setRetrySettings(getGlossaryRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getGlossary from properties.");
      }
    }
    Retry createAdaptiveMtDatasetRetry = clientProperties.getCreateAdaptiveMtDatasetRetry();
    if (createAdaptiveMtDatasetRetry != null) {
      RetrySettings createAdaptiveMtDatasetRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createAdaptiveMtDatasetSettings().getRetrySettings(),
              createAdaptiveMtDatasetRetry);
      clientSettingsBuilder
          .createAdaptiveMtDatasetSettings()
          .setRetrySettings(createAdaptiveMtDatasetRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for createAdaptiveMtDataset from properties.");
      }
    }
    Retry deleteAdaptiveMtDatasetRetry = clientProperties.getDeleteAdaptiveMtDatasetRetry();
    if (deleteAdaptiveMtDatasetRetry != null) {
      RetrySettings deleteAdaptiveMtDatasetRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteAdaptiveMtDatasetSettings().getRetrySettings(),
              deleteAdaptiveMtDatasetRetry);
      clientSettingsBuilder
          .deleteAdaptiveMtDatasetSettings()
          .setRetrySettings(deleteAdaptiveMtDatasetRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for deleteAdaptiveMtDataset from properties.");
      }
    }
    Retry getAdaptiveMtDatasetRetry = clientProperties.getGetAdaptiveMtDatasetRetry();
    if (getAdaptiveMtDatasetRetry != null) {
      RetrySettings getAdaptiveMtDatasetRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getAdaptiveMtDatasetSettings().getRetrySettings(),
              getAdaptiveMtDatasetRetry);
      clientSettingsBuilder
          .getAdaptiveMtDatasetSettings()
          .setRetrySettings(getAdaptiveMtDatasetRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for getAdaptiveMtDataset from properties.");
      }
    }
    Retry listAdaptiveMtDatasetsRetry = clientProperties.getListAdaptiveMtDatasetsRetry();
    if (listAdaptiveMtDatasetsRetry != null) {
      RetrySettings listAdaptiveMtDatasetsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listAdaptiveMtDatasetsSettings().getRetrySettings(),
              listAdaptiveMtDatasetsRetry);
      clientSettingsBuilder
          .listAdaptiveMtDatasetsSettings()
          .setRetrySettings(listAdaptiveMtDatasetsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listAdaptiveMtDatasets from properties.");
      }
    }
    Retry adaptiveMtTranslateRetry = clientProperties.getAdaptiveMtTranslateRetry();
    if (adaptiveMtTranslateRetry != null) {
      RetrySettings adaptiveMtTranslateRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.adaptiveMtTranslateSettings().getRetrySettings(),
              adaptiveMtTranslateRetry);
      clientSettingsBuilder
          .adaptiveMtTranslateSettings()
          .setRetrySettings(adaptiveMtTranslateRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for adaptiveMtTranslate from properties.");
      }
    }
    Retry getAdaptiveMtFileRetry = clientProperties.getGetAdaptiveMtFileRetry();
    if (getAdaptiveMtFileRetry != null) {
      RetrySettings getAdaptiveMtFileRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getAdaptiveMtFileSettings().getRetrySettings(),
              getAdaptiveMtFileRetry);
      clientSettingsBuilder
          .getAdaptiveMtFileSettings()
          .setRetrySettings(getAdaptiveMtFileRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for getAdaptiveMtFile from properties.");
      }
    }
    Retry deleteAdaptiveMtFileRetry = clientProperties.getDeleteAdaptiveMtFileRetry();
    if (deleteAdaptiveMtFileRetry != null) {
      RetrySettings deleteAdaptiveMtFileRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteAdaptiveMtFileSettings().getRetrySettings(),
              deleteAdaptiveMtFileRetry);
      clientSettingsBuilder
          .deleteAdaptiveMtFileSettings()
          .setRetrySettings(deleteAdaptiveMtFileRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for deleteAdaptiveMtFile from properties.");
      }
    }
    Retry importAdaptiveMtFileRetry = clientProperties.getImportAdaptiveMtFileRetry();
    if (importAdaptiveMtFileRetry != null) {
      RetrySettings importAdaptiveMtFileRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.importAdaptiveMtFileSettings().getRetrySettings(),
              importAdaptiveMtFileRetry);
      clientSettingsBuilder
          .importAdaptiveMtFileSettings()
          .setRetrySettings(importAdaptiveMtFileRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for importAdaptiveMtFile from properties.");
      }
    }
    Retry listAdaptiveMtFilesRetry = clientProperties.getListAdaptiveMtFilesRetry();
    if (listAdaptiveMtFilesRetry != null) {
      RetrySettings listAdaptiveMtFilesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listAdaptiveMtFilesSettings().getRetrySettings(),
              listAdaptiveMtFilesRetry);
      clientSettingsBuilder
          .listAdaptiveMtFilesSettings()
          .setRetrySettings(listAdaptiveMtFilesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listAdaptiveMtFiles from properties.");
      }
    }
    Retry listAdaptiveMtSentencesRetry = clientProperties.getListAdaptiveMtSentencesRetry();
    if (listAdaptiveMtSentencesRetry != null) {
      RetrySettings listAdaptiveMtSentencesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listAdaptiveMtSentencesSettings().getRetrySettings(),
              listAdaptiveMtSentencesRetry);
      clientSettingsBuilder
          .listAdaptiveMtSentencesSettings()
          .setRetrySettings(listAdaptiveMtSentencesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listAdaptiveMtSentences from properties.");
      }
    }
    return clientSettingsBuilder.build();
  }

  /**
   * Provides a TranslationServiceClient bean configured with TranslationServiceSettings.
   *
   * @param translationServiceSettings settings to configure an instance of client bean.
   * @return a {@link TranslationServiceClient} bean configured with {@link
   *     TranslationServiceSettings}
   */
  @Bean
  @ConditionalOnMissingBean
  public TranslationServiceClient translationServiceClient(
      TranslationServiceSettings translationServiceSettings) throws IOException {
    return TranslationServiceClient.create(translationServiceSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-translation-service";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
