/*
 * Copyright 2024 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.orchestration.airflow.service.v1.spring;

import com.google.api.core.BetaApi;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.CredentialsSupplier;
import com.google.cloud.spring.core.Retry;
import javax.annotation.Generated;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.context.properties.NestedConfigurationProperty;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/** Provides default property values for Environments client bean */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@ConfigurationProperties("com.google.cloud.orchestration.airflow.service.v1.environments")
public class EnvironmentsSpringProperties implements CredentialsSupplier {
  /** OAuth2 credentials to authenticate and authorize calls to Google Cloud Client Libraries. */
  @NestedConfigurationProperty
  private final Credentials credentials =
      new Credentials("https://www.googleapis.com/auth/cloud-platform");
  /** Quota project to use for billing. */
  private String quotaProjectId;
  /** Number of threads used for executors. */
  private Integer executorThreadCount;
  /** Allow override of default transport channel provider to use REST instead of gRPC. */
  private boolean useRest = false;
  /** Allow override of retry settings at service level, applying to all of its RPC methods. */
  @NestedConfigurationProperty private Retry retry;
  /**
   * Allow override of retry settings at method-level for getEnvironment. If defined, this takes
   * precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry getEnvironmentRetry;
  /**
   * Allow override of retry settings at method-level for listEnvironments. If defined, this takes
   * precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry listEnvironmentsRetry;
  /**
   * Allow override of retry settings at method-level for executeAirflowCommand. If defined, this
   * takes precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry executeAirflowCommandRetry;
  /**
   * Allow override of retry settings at method-level for stopAirflowCommand. If defined, this takes
   * precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry stopAirflowCommandRetry;
  /**
   * Allow override of retry settings at method-level for pollAirflowCommand. If defined, this takes
   * precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry pollAirflowCommandRetry;
  /**
   * Allow override of retry settings at method-level for listWorkloads. If defined, this takes
   * precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry listWorkloadsRetry;
  /**
   * Allow override of retry settings at method-level for createUserWorkloadsSecret. If defined,
   * this takes precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry createUserWorkloadsSecretRetry;
  /**
   * Allow override of retry settings at method-level for getUserWorkloadsSecret. If defined, this
   * takes precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry getUserWorkloadsSecretRetry;
  /**
   * Allow override of retry settings at method-level for listUserWorkloadsSecrets. If defined, this
   * takes precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry listUserWorkloadsSecretsRetry;
  /**
   * Allow override of retry settings at method-level for updateUserWorkloadsSecret. If defined,
   * this takes precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry updateUserWorkloadsSecretRetry;
  /**
   * Allow override of retry settings at method-level for deleteUserWorkloadsSecret. If defined,
   * this takes precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry deleteUserWorkloadsSecretRetry;
  /**
   * Allow override of retry settings at method-level for createUserWorkloadsConfigMap. If defined,
   * this takes precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry createUserWorkloadsConfigMapRetry;
  /**
   * Allow override of retry settings at method-level for getUserWorkloadsConfigMap. If defined,
   * this takes precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry getUserWorkloadsConfigMapRetry;
  /**
   * Allow override of retry settings at method-level for listUserWorkloadsConfigMaps. If defined,
   * this takes precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry listUserWorkloadsConfigMapsRetry;
  /**
   * Allow override of retry settings at method-level for updateUserWorkloadsConfigMap. If defined,
   * this takes precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry updateUserWorkloadsConfigMapRetry;
  /**
   * Allow override of retry settings at method-level for deleteUserWorkloadsConfigMap. If defined,
   * this takes precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry deleteUserWorkloadsConfigMapRetry;
  /**
   * Allow override of retry settings at method-level for fetchDatabaseProperties. If defined, this
   * takes precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry fetchDatabasePropertiesRetry;

  @Override
  public Credentials getCredentials() {
    return this.credentials;
  }

  public String getQuotaProjectId() {
    return this.quotaProjectId;
  }

  public void setQuotaProjectId(String quotaProjectId) {
    this.quotaProjectId = quotaProjectId;
  }

  public boolean getUseRest() {
    return this.useRest;
  }

  public void setUseRest(boolean useRest) {
    this.useRest = useRest;
  }

  public Integer getExecutorThreadCount() {
    return this.executorThreadCount;
  }

  public void setExecutorThreadCount(Integer executorThreadCount) {
    this.executorThreadCount = executorThreadCount;
  }

  public Retry getRetry() {
    return this.retry;
  }

  public void setRetry(Retry retry) {
    this.retry = retry;
  }

  public Retry getGetEnvironmentRetry() {
    return this.getEnvironmentRetry;
  }

  public void setGetEnvironmentRetry(Retry getEnvironmentRetry) {
    this.getEnvironmentRetry = getEnvironmentRetry;
  }

  public Retry getListEnvironmentsRetry() {
    return this.listEnvironmentsRetry;
  }

  public void setListEnvironmentsRetry(Retry listEnvironmentsRetry) {
    this.listEnvironmentsRetry = listEnvironmentsRetry;
  }

  public Retry getExecuteAirflowCommandRetry() {
    return this.executeAirflowCommandRetry;
  }

  public void setExecuteAirflowCommandRetry(Retry executeAirflowCommandRetry) {
    this.executeAirflowCommandRetry = executeAirflowCommandRetry;
  }

  public Retry getStopAirflowCommandRetry() {
    return this.stopAirflowCommandRetry;
  }

  public void setStopAirflowCommandRetry(Retry stopAirflowCommandRetry) {
    this.stopAirflowCommandRetry = stopAirflowCommandRetry;
  }

  public Retry getPollAirflowCommandRetry() {
    return this.pollAirflowCommandRetry;
  }

  public void setPollAirflowCommandRetry(Retry pollAirflowCommandRetry) {
    this.pollAirflowCommandRetry = pollAirflowCommandRetry;
  }

  public Retry getListWorkloadsRetry() {
    return this.listWorkloadsRetry;
  }

  public void setListWorkloadsRetry(Retry listWorkloadsRetry) {
    this.listWorkloadsRetry = listWorkloadsRetry;
  }

  public Retry getCreateUserWorkloadsSecretRetry() {
    return this.createUserWorkloadsSecretRetry;
  }

  public void setCreateUserWorkloadsSecretRetry(Retry createUserWorkloadsSecretRetry) {
    this.createUserWorkloadsSecretRetry = createUserWorkloadsSecretRetry;
  }

  public Retry getGetUserWorkloadsSecretRetry() {
    return this.getUserWorkloadsSecretRetry;
  }

  public void setGetUserWorkloadsSecretRetry(Retry getUserWorkloadsSecretRetry) {
    this.getUserWorkloadsSecretRetry = getUserWorkloadsSecretRetry;
  }

  public Retry getListUserWorkloadsSecretsRetry() {
    return this.listUserWorkloadsSecretsRetry;
  }

  public void setListUserWorkloadsSecretsRetry(Retry listUserWorkloadsSecretsRetry) {
    this.listUserWorkloadsSecretsRetry = listUserWorkloadsSecretsRetry;
  }

  public Retry getUpdateUserWorkloadsSecretRetry() {
    return this.updateUserWorkloadsSecretRetry;
  }

  public void setUpdateUserWorkloadsSecretRetry(Retry updateUserWorkloadsSecretRetry) {
    this.updateUserWorkloadsSecretRetry = updateUserWorkloadsSecretRetry;
  }

  public Retry getDeleteUserWorkloadsSecretRetry() {
    return this.deleteUserWorkloadsSecretRetry;
  }

  public void setDeleteUserWorkloadsSecretRetry(Retry deleteUserWorkloadsSecretRetry) {
    this.deleteUserWorkloadsSecretRetry = deleteUserWorkloadsSecretRetry;
  }

  public Retry getCreateUserWorkloadsConfigMapRetry() {
    return this.createUserWorkloadsConfigMapRetry;
  }

  public void setCreateUserWorkloadsConfigMapRetry(Retry createUserWorkloadsConfigMapRetry) {
    this.createUserWorkloadsConfigMapRetry = createUserWorkloadsConfigMapRetry;
  }

  public Retry getGetUserWorkloadsConfigMapRetry() {
    return this.getUserWorkloadsConfigMapRetry;
  }

  public void setGetUserWorkloadsConfigMapRetry(Retry getUserWorkloadsConfigMapRetry) {
    this.getUserWorkloadsConfigMapRetry = getUserWorkloadsConfigMapRetry;
  }

  public Retry getListUserWorkloadsConfigMapsRetry() {
    return this.listUserWorkloadsConfigMapsRetry;
  }

  public void setListUserWorkloadsConfigMapsRetry(Retry listUserWorkloadsConfigMapsRetry) {
    this.listUserWorkloadsConfigMapsRetry = listUserWorkloadsConfigMapsRetry;
  }

  public Retry getUpdateUserWorkloadsConfigMapRetry() {
    return this.updateUserWorkloadsConfigMapRetry;
  }

  public void setUpdateUserWorkloadsConfigMapRetry(Retry updateUserWorkloadsConfigMapRetry) {
    this.updateUserWorkloadsConfigMapRetry = updateUserWorkloadsConfigMapRetry;
  }

  public Retry getDeleteUserWorkloadsConfigMapRetry() {
    return this.deleteUserWorkloadsConfigMapRetry;
  }

  public void setDeleteUserWorkloadsConfigMapRetry(Retry deleteUserWorkloadsConfigMapRetry) {
    this.deleteUserWorkloadsConfigMapRetry = deleteUserWorkloadsConfigMapRetry;
  }

  public Retry getFetchDatabasePropertiesRetry() {
    return this.fetchDatabasePropertiesRetry;
  }

  public void setFetchDatabasePropertiesRetry(Retry fetchDatabasePropertiesRetry) {
    this.fetchDatabasePropertiesRetry = fetchDatabasePropertiesRetry;
  }
}
