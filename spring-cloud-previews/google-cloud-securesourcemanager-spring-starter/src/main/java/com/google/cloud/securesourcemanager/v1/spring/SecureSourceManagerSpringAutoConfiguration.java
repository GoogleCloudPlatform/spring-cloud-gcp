/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.securesourcemanager.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.securesourcemanager.v1.SecureSourceManagerClient;
import com.google.cloud.securesourcemanager.v1.SecureSourceManagerSettings;
import com.google.cloud.spring.autoconfigure.core.GcpContextAutoConfiguration;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.core.Retry;
import com.google.cloud.spring.core.util.RetryUtil;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.AutoConfigureAfter;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link SecureSourceManagerClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@AutoConfigureAfter(GcpContextAutoConfiguration.class)
@ConditionalOnClass(SecureSourceManagerClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.securesourcemanager.v1.secure-source-manager.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties(SecureSourceManagerSpringProperties.class)
public class SecureSourceManagerSpringAutoConfiguration {
  private final SecureSourceManagerSpringProperties clientProperties;
  private final CredentialsProvider credentialsProvider;
  private static final Log LOGGER =
      LogFactory.getLog(SecureSourceManagerSpringAutoConfiguration.class);

  protected SecureSourceManagerSpringAutoConfiguration(
      SecureSourceManagerSpringProperties clientProperties, CredentialsProvider credentialsProvider)
      throws IOException {
    this.clientProperties = clientProperties;
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from SecureSourceManager-specific configuration");
      }
      this.credentialsProvider =
          ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    } else {
      this.credentialsProvider = credentialsProvider;
    }
  }

  /**
   * Provides a default transport channel provider bean, corresponding to the client library's
   * default transport channel provider. If the library supports both GRPC and REST transport, and
   * the useRest property is configured, the HTTP/JSON transport provider will be used instead of
   * GRPC.
   *
   * @return a default transport channel provider.
   */
  @Bean
  @ConditionalOnMissingBean(name = "defaultSecureSourceManagerTransportChannelProvider")
  public TransportChannelProvider defaultSecureSourceManagerTransportChannelProvider() {
    if (this.clientProperties.getUseRest()) {
      return SecureSourceManagerSettings.defaultHttpJsonTransportProviderBuilder().build();
    }
    return SecureSourceManagerSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a SecureSourceManagerSettings bean configured to use a DefaultCredentialsProvider and
   * the client library's default transport channel provider
   * (defaultSecureSourceManagerTransportChannelProvider()). It also configures the quota project ID
   * and executor thread count, if provided through properties.
   *
   * <p>Retry settings are also configured from service-level and method-level properties specified
   * in SecureSourceManagerSpringProperties. Method-level properties will take precedence over
   * service-level properties if available, and client library defaults will be used if neither are
   * specified.
   *
   * @param defaultTransportChannelProvider TransportChannelProvider to use in the settings.
   * @return a {@link SecureSourceManagerSettings} bean configured with {@link
   *     TransportChannelProvider} bean.
   */
  @Bean
  @ConditionalOnMissingBean
  public SecureSourceManagerSettings secureSourceManagerSettings(
      @Qualifier("defaultSecureSourceManagerTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    SecureSourceManagerSettings.Builder clientSettingsBuilder;
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder = SecureSourceManagerSettings.newHttpJsonBuilder();
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using REST (HTTP/JSON) transport.");
      }
    } else {
      clientSettingsBuilder = SecureSourceManagerSettings.newBuilder();
    }
    clientSettingsBuilder
        .setCredentialsProvider(this.credentialsProvider)
        .setTransportChannelProvider(defaultTransportChannelProvider)
        .setEndpoint(SecureSourceManagerSettings.getDefaultEndpoint())
        .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          SecureSourceManagerSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    Retry serviceRetry = clientProperties.getRetry();
    if (serviceRetry != null) {
      RetrySettings listInstancesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listInstancesSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.listInstancesSettings().setRetrySettings(listInstancesRetrySettings);

      RetrySettings getInstanceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getInstanceSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getInstanceSettings().setRetrySettings(getInstanceRetrySettings);

      RetrySettings listRepositoriesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listRepositoriesSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .listRepositoriesSettings()
          .setRetrySettings(listRepositoriesRetrySettings);

      RetrySettings getRepositoryRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getRepositorySettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getRepositorySettings().setRetrySettings(getRepositoryRetrySettings);

      RetrySettings listHooksRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listHooksSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.listHooksSettings().setRetrySettings(listHooksRetrySettings);

      RetrySettings getHookRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getHookSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getHookSettings().setRetrySettings(getHookRetrySettings);

      RetrySettings getIamPolicyRepoRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getIamPolicyRepoSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .getIamPolicyRepoSettings()
          .setRetrySettings(getIamPolicyRepoRetrySettings);

      RetrySettings setIamPolicyRepoRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.setIamPolicyRepoSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .setIamPolicyRepoSettings()
          .setRetrySettings(setIamPolicyRepoRetrySettings);

      RetrySettings testIamPermissionsRepoRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.testIamPermissionsRepoSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .testIamPermissionsRepoSettings()
          .setRetrySettings(testIamPermissionsRepoRetrySettings);

      RetrySettings listBranchRulesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listBranchRulesSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .listBranchRulesSettings()
          .setRetrySettings(listBranchRulesRetrySettings);

      RetrySettings getBranchRuleRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getBranchRuleSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getBranchRuleSettings().setRetrySettings(getBranchRuleRetrySettings);

      RetrySettings getPullRequestRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getPullRequestSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getPullRequestSettings().setRetrySettings(getPullRequestRetrySettings);

      RetrySettings listPullRequestsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listPullRequestsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .listPullRequestsSettings()
          .setRetrySettings(listPullRequestsRetrySettings);

      RetrySettings listPullRequestFileDiffsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listPullRequestFileDiffsSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .listPullRequestFileDiffsSettings()
          .setRetrySettings(listPullRequestFileDiffsRetrySettings);

      RetrySettings fetchTreeRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.fetchTreeSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.fetchTreeSettings().setRetrySettings(fetchTreeRetrySettings);

      RetrySettings fetchBlobRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.fetchBlobSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.fetchBlobSettings().setRetrySettings(fetchBlobRetrySettings);

      RetrySettings getIssueRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getIssueSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getIssueSettings().setRetrySettings(getIssueRetrySettings);

      RetrySettings listIssuesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listIssuesSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.listIssuesSettings().setRetrySettings(listIssuesRetrySettings);

      RetrySettings getPullRequestCommentRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getPullRequestCommentSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .getPullRequestCommentSettings()
          .setRetrySettings(getPullRequestCommentRetrySettings);

      RetrySettings listPullRequestCommentsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listPullRequestCommentsSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .listPullRequestCommentsSettings()
          .setRetrySettings(listPullRequestCommentsRetrySettings);

      RetrySettings getIssueCommentRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getIssueCommentSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .getIssueCommentSettings()
          .setRetrySettings(getIssueCommentRetrySettings);

      RetrySettings listIssueCommentsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listIssueCommentsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .listIssueCommentsSettings()
          .setRetrySettings(listIssueCommentsRetrySettings);

      RetrySettings listLocationsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listLocationsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.listLocationsSettings().setRetrySettings(listLocationsRetrySettings);

      RetrySettings getLocationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getLocationSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getLocationSettings().setRetrySettings(getLocationRetrySettings);

      RetrySettings setIamPolicyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.setIamPolicySettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.setIamPolicySettings().setRetrySettings(setIamPolicyRetrySettings);

      RetrySettings getIamPolicyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getIamPolicySettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getIamPolicySettings().setRetrySettings(getIamPolicyRetrySettings);

      RetrySettings testIamPermissionsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.testIamPermissionsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .testIamPermissionsSettings()
          .setRetrySettings(testIamPermissionsRetrySettings);

      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured service-level retry settings from properties.");
      }
    }
    Retry listInstancesRetry = clientProperties.getListInstancesRetry();
    if (listInstancesRetry != null) {
      RetrySettings listInstancesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listInstancesSettings().getRetrySettings(), listInstancesRetry);
      clientSettingsBuilder.listInstancesSettings().setRetrySettings(listInstancesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listInstances from properties.");
      }
    }
    Retry getInstanceRetry = clientProperties.getGetInstanceRetry();
    if (getInstanceRetry != null) {
      RetrySettings getInstanceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getInstanceSettings().getRetrySettings(), getInstanceRetry);
      clientSettingsBuilder.getInstanceSettings().setRetrySettings(getInstanceRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getInstance from properties.");
      }
    }
    Retry listRepositoriesRetry = clientProperties.getListRepositoriesRetry();
    if (listRepositoriesRetry != null) {
      RetrySettings listRepositoriesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listRepositoriesSettings().getRetrySettings(),
              listRepositoriesRetry);
      clientSettingsBuilder
          .listRepositoriesSettings()
          .setRetrySettings(listRepositoriesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listRepositories from properties.");
      }
    }
    Retry getRepositoryRetry = clientProperties.getGetRepositoryRetry();
    if (getRepositoryRetry != null) {
      RetrySettings getRepositoryRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getRepositorySettings().getRetrySettings(), getRepositoryRetry);
      clientSettingsBuilder.getRepositorySettings().setRetrySettings(getRepositoryRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getRepository from properties.");
      }
    }
    Retry listHooksRetry = clientProperties.getListHooksRetry();
    if (listHooksRetry != null) {
      RetrySettings listHooksRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listHooksSettings().getRetrySettings(), listHooksRetry);
      clientSettingsBuilder.listHooksSettings().setRetrySettings(listHooksRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listHooks from properties.");
      }
    }
    Retry getHookRetry = clientProperties.getGetHookRetry();
    if (getHookRetry != null) {
      RetrySettings getHookRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getHookSettings().getRetrySettings(), getHookRetry);
      clientSettingsBuilder.getHookSettings().setRetrySettings(getHookRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getHook from properties.");
      }
    }
    Retry getIamPolicyRepoRetry = clientProperties.getGetIamPolicyRepoRetry();
    if (getIamPolicyRepoRetry != null) {
      RetrySettings getIamPolicyRepoRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getIamPolicyRepoSettings().getRetrySettings(),
              getIamPolicyRepoRetry);
      clientSettingsBuilder
          .getIamPolicyRepoSettings()
          .setRetrySettings(getIamPolicyRepoRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for getIamPolicyRepo from properties.");
      }
    }
    Retry setIamPolicyRepoRetry = clientProperties.getSetIamPolicyRepoRetry();
    if (setIamPolicyRepoRetry != null) {
      RetrySettings setIamPolicyRepoRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.setIamPolicyRepoSettings().getRetrySettings(),
              setIamPolicyRepoRetry);
      clientSettingsBuilder
          .setIamPolicyRepoSettings()
          .setRetrySettings(setIamPolicyRepoRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for setIamPolicyRepo from properties.");
      }
    }
    Retry testIamPermissionsRepoRetry = clientProperties.getTestIamPermissionsRepoRetry();
    if (testIamPermissionsRepoRetry != null) {
      RetrySettings testIamPermissionsRepoRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.testIamPermissionsRepoSettings().getRetrySettings(),
              testIamPermissionsRepoRetry);
      clientSettingsBuilder
          .testIamPermissionsRepoSettings()
          .setRetrySettings(testIamPermissionsRepoRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for testIamPermissionsRepo from properties.");
      }
    }
    Retry listBranchRulesRetry = clientProperties.getListBranchRulesRetry();
    if (listBranchRulesRetry != null) {
      RetrySettings listBranchRulesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listBranchRulesSettings().getRetrySettings(),
              listBranchRulesRetry);
      clientSettingsBuilder
          .listBranchRulesSettings()
          .setRetrySettings(listBranchRulesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listBranchRules from properties.");
      }
    }
    Retry getBranchRuleRetry = clientProperties.getGetBranchRuleRetry();
    if (getBranchRuleRetry != null) {
      RetrySettings getBranchRuleRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getBranchRuleSettings().getRetrySettings(), getBranchRuleRetry);
      clientSettingsBuilder.getBranchRuleSettings().setRetrySettings(getBranchRuleRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getBranchRule from properties.");
      }
    }
    Retry getPullRequestRetry = clientProperties.getGetPullRequestRetry();
    if (getPullRequestRetry != null) {
      RetrySettings getPullRequestRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getPullRequestSettings().getRetrySettings(),
              getPullRequestRetry);
      clientSettingsBuilder.getPullRequestSettings().setRetrySettings(getPullRequestRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getPullRequest from properties.");
      }
    }
    Retry listPullRequestsRetry = clientProperties.getListPullRequestsRetry();
    if (listPullRequestsRetry != null) {
      RetrySettings listPullRequestsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listPullRequestsSettings().getRetrySettings(),
              listPullRequestsRetry);
      clientSettingsBuilder
          .listPullRequestsSettings()
          .setRetrySettings(listPullRequestsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listPullRequests from properties.");
      }
    }
    Retry listPullRequestFileDiffsRetry = clientProperties.getListPullRequestFileDiffsRetry();
    if (listPullRequestFileDiffsRetry != null) {
      RetrySettings listPullRequestFileDiffsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listPullRequestFileDiffsSettings().getRetrySettings(),
              listPullRequestFileDiffsRetry);
      clientSettingsBuilder
          .listPullRequestFileDiffsSettings()
          .setRetrySettings(listPullRequestFileDiffsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listPullRequestFileDiffs from properties.");
      }
    }
    Retry fetchTreeRetry = clientProperties.getFetchTreeRetry();
    if (fetchTreeRetry != null) {
      RetrySettings fetchTreeRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.fetchTreeSettings().getRetrySettings(), fetchTreeRetry);
      clientSettingsBuilder.fetchTreeSettings().setRetrySettings(fetchTreeRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for fetchTree from properties.");
      }
    }
    Retry fetchBlobRetry = clientProperties.getFetchBlobRetry();
    if (fetchBlobRetry != null) {
      RetrySettings fetchBlobRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.fetchBlobSettings().getRetrySettings(), fetchBlobRetry);
      clientSettingsBuilder.fetchBlobSettings().setRetrySettings(fetchBlobRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for fetchBlob from properties.");
      }
    }
    Retry getIssueRetry = clientProperties.getGetIssueRetry();
    if (getIssueRetry != null) {
      RetrySettings getIssueRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getIssueSettings().getRetrySettings(), getIssueRetry);
      clientSettingsBuilder.getIssueSettings().setRetrySettings(getIssueRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getIssue from properties.");
      }
    }
    Retry listIssuesRetry = clientProperties.getListIssuesRetry();
    if (listIssuesRetry != null) {
      RetrySettings listIssuesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listIssuesSettings().getRetrySettings(), listIssuesRetry);
      clientSettingsBuilder.listIssuesSettings().setRetrySettings(listIssuesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listIssues from properties.");
      }
    }
    Retry getPullRequestCommentRetry = clientProperties.getGetPullRequestCommentRetry();
    if (getPullRequestCommentRetry != null) {
      RetrySettings getPullRequestCommentRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getPullRequestCommentSettings().getRetrySettings(),
              getPullRequestCommentRetry);
      clientSettingsBuilder
          .getPullRequestCommentSettings()
          .setRetrySettings(getPullRequestCommentRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for getPullRequestComment from properties.");
      }
    }
    Retry listPullRequestCommentsRetry = clientProperties.getListPullRequestCommentsRetry();
    if (listPullRequestCommentsRetry != null) {
      RetrySettings listPullRequestCommentsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listPullRequestCommentsSettings().getRetrySettings(),
              listPullRequestCommentsRetry);
      clientSettingsBuilder
          .listPullRequestCommentsSettings()
          .setRetrySettings(listPullRequestCommentsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listPullRequestComments from properties.");
      }
    }
    Retry getIssueCommentRetry = clientProperties.getGetIssueCommentRetry();
    if (getIssueCommentRetry != null) {
      RetrySettings getIssueCommentRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getIssueCommentSettings().getRetrySettings(),
              getIssueCommentRetry);
      clientSettingsBuilder
          .getIssueCommentSettings()
          .setRetrySettings(getIssueCommentRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getIssueComment from properties.");
      }
    }
    Retry listIssueCommentsRetry = clientProperties.getListIssueCommentsRetry();
    if (listIssueCommentsRetry != null) {
      RetrySettings listIssueCommentsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listIssueCommentsSettings().getRetrySettings(),
              listIssueCommentsRetry);
      clientSettingsBuilder
          .listIssueCommentsSettings()
          .setRetrySettings(listIssueCommentsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listIssueComments from properties.");
      }
    }
    Retry listLocationsRetry = clientProperties.getListLocationsRetry();
    if (listLocationsRetry != null) {
      RetrySettings listLocationsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listLocationsSettings().getRetrySettings(), listLocationsRetry);
      clientSettingsBuilder.listLocationsSettings().setRetrySettings(listLocationsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listLocations from properties.");
      }
    }
    Retry getLocationRetry = clientProperties.getGetLocationRetry();
    if (getLocationRetry != null) {
      RetrySettings getLocationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getLocationSettings().getRetrySettings(), getLocationRetry);
      clientSettingsBuilder.getLocationSettings().setRetrySettings(getLocationRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getLocation from properties.");
      }
    }
    Retry setIamPolicyRetry = clientProperties.getSetIamPolicyRetry();
    if (setIamPolicyRetry != null) {
      RetrySettings setIamPolicyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.setIamPolicySettings().getRetrySettings(), setIamPolicyRetry);
      clientSettingsBuilder.setIamPolicySettings().setRetrySettings(setIamPolicyRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for setIamPolicy from properties.");
      }
    }
    Retry getIamPolicyRetry = clientProperties.getGetIamPolicyRetry();
    if (getIamPolicyRetry != null) {
      RetrySettings getIamPolicyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getIamPolicySettings().getRetrySettings(), getIamPolicyRetry);
      clientSettingsBuilder.getIamPolicySettings().setRetrySettings(getIamPolicyRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getIamPolicy from properties.");
      }
    }
    Retry testIamPermissionsRetry = clientProperties.getTestIamPermissionsRetry();
    if (testIamPermissionsRetry != null) {
      RetrySettings testIamPermissionsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.testIamPermissionsSettings().getRetrySettings(),
              testIamPermissionsRetry);
      clientSettingsBuilder
          .testIamPermissionsSettings()
          .setRetrySettings(testIamPermissionsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for testIamPermissions from properties.");
      }
    }
    return clientSettingsBuilder.build();
  }

  /**
   * Provides a SecureSourceManagerClient bean configured with SecureSourceManagerSettings.
   *
   * @param secureSourceManagerSettings settings to configure an instance of client bean.
   * @return a {@link SecureSourceManagerClient} bean configured with {@link
   *     SecureSourceManagerSettings}
   */
  @Bean
  @ConditionalOnMissingBean
  public SecureSourceManagerClient secureSourceManagerClient(
      SecureSourceManagerSettings secureSourceManagerSettings) throws IOException {
    return SecureSourceManagerClient.create(secureSourceManagerSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-secure-source-manager";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
