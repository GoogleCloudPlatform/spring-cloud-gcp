/*
 * Copyright 2024 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.backupdr.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.backupdr.v1.BackupDRClient;
import com.google.cloud.backupdr.v1.BackupDRSettings;
import com.google.cloud.spring.autoconfigure.core.GcpContextAutoConfiguration;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.core.Retry;
import com.google.cloud.spring.core.util.RetryUtil;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.AutoConfigureAfter;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link BackupDRClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@AutoConfigureAfter(GcpContextAutoConfiguration.class)
@ConditionalOnClass(BackupDRClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.backupdr.v1.backup-d-r.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties(BackupDRSpringProperties.class)
public class BackupDRSpringAutoConfiguration {
  private final BackupDRSpringProperties clientProperties;
  private final CredentialsProvider credentialsProvider;
  private static final Log LOGGER = LogFactory.getLog(BackupDRSpringAutoConfiguration.class);

  protected BackupDRSpringAutoConfiguration(
      BackupDRSpringProperties clientProperties, CredentialsProvider credentialsProvider)
      throws IOException {
    this.clientProperties = clientProperties;
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from BackupDR-specific configuration");
      }
      this.credentialsProvider =
          ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    } else {
      this.credentialsProvider = credentialsProvider;
    }
  }

  /**
   * Provides a default transport channel provider bean, corresponding to the client library's
   * default transport channel provider. If the library supports both GRPC and REST transport, and
   * the useRest property is configured, the HTTP/JSON transport provider will be used instead of
   * GRPC.
   *
   * @return a default transport channel provider.
   */
  @Bean
  @ConditionalOnMissingBean(name = "defaultBackupDRTransportChannelProvider")
  public TransportChannelProvider defaultBackupDRTransportChannelProvider() {
    if (this.clientProperties.getUseRest()) {
      return BackupDRSettings.defaultHttpJsonTransportProviderBuilder().build();
    }
    return BackupDRSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a BackupDRSettings bean configured to use a DefaultCredentialsProvider and the client
   * library's default transport channel provider (defaultBackupDRTransportChannelProvider()). It
   * also configures the quota project ID and executor thread count, if provided through properties.
   *
   * <p>Retry settings are also configured from service-level and method-level properties specified
   * in BackupDRSpringProperties. Method-level properties will take precedence over service-level
   * properties if available, and client library defaults will be used if neither are specified.
   *
   * @param defaultTransportChannelProvider TransportChannelProvider to use in the settings.
   * @return a {@link BackupDRSettings} bean configured with {@link TransportChannelProvider} bean.
   */
  @Bean
  @ConditionalOnMissingBean
  public BackupDRSettings backupDRSettings(
      @Qualifier("defaultBackupDRTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    BackupDRSettings.Builder clientSettingsBuilder;
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder = BackupDRSettings.newHttpJsonBuilder();
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using REST (HTTP/JSON) transport.");
      }
    } else {
      clientSettingsBuilder = BackupDRSettings.newBuilder();
    }
    clientSettingsBuilder
        .setCredentialsProvider(this.credentialsProvider)
        .setTransportChannelProvider(defaultTransportChannelProvider)
        .setEndpoint(BackupDRSettings.getDefaultEndpoint())
        .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          BackupDRSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    Retry serviceRetry = clientProperties.getRetry();
    if (serviceRetry != null) {
      RetrySettings listManagementServersRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listManagementServersSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .listManagementServersSettings()
          .setRetrySettings(listManagementServersRetrySettings);

      RetrySettings getManagementServerRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getManagementServerSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .getManagementServerSettings()
          .setRetrySettings(getManagementServerRetrySettings);

      RetrySettings listBackupVaultsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listBackupVaultsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .listBackupVaultsSettings()
          .setRetrySettings(listBackupVaultsRetrySettings);

      RetrySettings fetchUsableBackupVaultsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.fetchUsableBackupVaultsSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .fetchUsableBackupVaultsSettings()
          .setRetrySettings(fetchUsableBackupVaultsRetrySettings);

      RetrySettings getBackupVaultRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getBackupVaultSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getBackupVaultSettings().setRetrySettings(getBackupVaultRetrySettings);

      RetrySettings testIamPermissionsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.testIamPermissionsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .testIamPermissionsSettings()
          .setRetrySettings(testIamPermissionsRetrySettings);

      RetrySettings listDataSourcesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listDataSourcesSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .listDataSourcesSettings()
          .setRetrySettings(listDataSourcesRetrySettings);

      RetrySettings getDataSourceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getDataSourceSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getDataSourceSettings().setRetrySettings(getDataSourceRetrySettings);

      RetrySettings initiateBackupRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.initiateBackupSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.initiateBackupSettings().setRetrySettings(initiateBackupRetrySettings);

      RetrySettings fetchAccessTokenRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.fetchAccessTokenSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .fetchAccessTokenSettings()
          .setRetrySettings(fetchAccessTokenRetrySettings);

      RetrySettings listBackupsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listBackupsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.listBackupsSettings().setRetrySettings(listBackupsRetrySettings);

      RetrySettings getBackupRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getBackupSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getBackupSettings().setRetrySettings(getBackupRetrySettings);

      RetrySettings getBackupPlanRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getBackupPlanSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getBackupPlanSettings().setRetrySettings(getBackupPlanRetrySettings);

      RetrySettings listBackupPlansRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listBackupPlansSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .listBackupPlansSettings()
          .setRetrySettings(listBackupPlansRetrySettings);

      RetrySettings getBackupPlanAssociationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getBackupPlanAssociationSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .getBackupPlanAssociationSettings()
          .setRetrySettings(getBackupPlanAssociationRetrySettings);

      RetrySettings listBackupPlanAssociationsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listBackupPlanAssociationsSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .listBackupPlanAssociationsSettings()
          .setRetrySettings(listBackupPlanAssociationsRetrySettings);

      RetrySettings listLocationsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listLocationsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.listLocationsSettings().setRetrySettings(listLocationsRetrySettings);

      RetrySettings getLocationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getLocationSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getLocationSettings().setRetrySettings(getLocationRetrySettings);

      RetrySettings setIamPolicyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.setIamPolicySettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.setIamPolicySettings().setRetrySettings(setIamPolicyRetrySettings);

      RetrySettings getIamPolicyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getIamPolicySettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getIamPolicySettings().setRetrySettings(getIamPolicyRetrySettings);

      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured service-level retry settings from properties.");
      }
    }
    Retry listManagementServersRetry = clientProperties.getListManagementServersRetry();
    if (listManagementServersRetry != null) {
      RetrySettings listManagementServersRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listManagementServersSettings().getRetrySettings(),
              listManagementServersRetry);
      clientSettingsBuilder
          .listManagementServersSettings()
          .setRetrySettings(listManagementServersRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listManagementServers from properties.");
      }
    }
    Retry getManagementServerRetry = clientProperties.getGetManagementServerRetry();
    if (getManagementServerRetry != null) {
      RetrySettings getManagementServerRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getManagementServerSettings().getRetrySettings(),
              getManagementServerRetry);
      clientSettingsBuilder
          .getManagementServerSettings()
          .setRetrySettings(getManagementServerRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for getManagementServer from properties.");
      }
    }
    Retry listBackupVaultsRetry = clientProperties.getListBackupVaultsRetry();
    if (listBackupVaultsRetry != null) {
      RetrySettings listBackupVaultsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listBackupVaultsSettings().getRetrySettings(),
              listBackupVaultsRetry);
      clientSettingsBuilder
          .listBackupVaultsSettings()
          .setRetrySettings(listBackupVaultsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listBackupVaults from properties.");
      }
    }
    Retry fetchUsableBackupVaultsRetry = clientProperties.getFetchUsableBackupVaultsRetry();
    if (fetchUsableBackupVaultsRetry != null) {
      RetrySettings fetchUsableBackupVaultsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.fetchUsableBackupVaultsSettings().getRetrySettings(),
              fetchUsableBackupVaultsRetry);
      clientSettingsBuilder
          .fetchUsableBackupVaultsSettings()
          .setRetrySettings(fetchUsableBackupVaultsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for fetchUsableBackupVaults from properties.");
      }
    }
    Retry getBackupVaultRetry = clientProperties.getGetBackupVaultRetry();
    if (getBackupVaultRetry != null) {
      RetrySettings getBackupVaultRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getBackupVaultSettings().getRetrySettings(),
              getBackupVaultRetry);
      clientSettingsBuilder.getBackupVaultSettings().setRetrySettings(getBackupVaultRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getBackupVault from properties.");
      }
    }
    Retry testIamPermissionsRetry = clientProperties.getTestIamPermissionsRetry();
    if (testIamPermissionsRetry != null) {
      RetrySettings testIamPermissionsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.testIamPermissionsSettings().getRetrySettings(),
              testIamPermissionsRetry);
      clientSettingsBuilder
          .testIamPermissionsSettings()
          .setRetrySettings(testIamPermissionsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for testIamPermissions from properties.");
      }
    }
    Retry listDataSourcesRetry = clientProperties.getListDataSourcesRetry();
    if (listDataSourcesRetry != null) {
      RetrySettings listDataSourcesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listDataSourcesSettings().getRetrySettings(),
              listDataSourcesRetry);
      clientSettingsBuilder
          .listDataSourcesSettings()
          .setRetrySettings(listDataSourcesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listDataSources from properties.");
      }
    }
    Retry getDataSourceRetry = clientProperties.getGetDataSourceRetry();
    if (getDataSourceRetry != null) {
      RetrySettings getDataSourceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getDataSourceSettings().getRetrySettings(), getDataSourceRetry);
      clientSettingsBuilder.getDataSourceSettings().setRetrySettings(getDataSourceRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getDataSource from properties.");
      }
    }
    Retry initiateBackupRetry = clientProperties.getInitiateBackupRetry();
    if (initiateBackupRetry != null) {
      RetrySettings initiateBackupRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.initiateBackupSettings().getRetrySettings(),
              initiateBackupRetry);
      clientSettingsBuilder.initiateBackupSettings().setRetrySettings(initiateBackupRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for initiateBackup from properties.");
      }
    }
    Retry fetchAccessTokenRetry = clientProperties.getFetchAccessTokenRetry();
    if (fetchAccessTokenRetry != null) {
      RetrySettings fetchAccessTokenRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.fetchAccessTokenSettings().getRetrySettings(),
              fetchAccessTokenRetry);
      clientSettingsBuilder
          .fetchAccessTokenSettings()
          .setRetrySettings(fetchAccessTokenRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for fetchAccessToken from properties.");
      }
    }
    Retry listBackupsRetry = clientProperties.getListBackupsRetry();
    if (listBackupsRetry != null) {
      RetrySettings listBackupsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listBackupsSettings().getRetrySettings(), listBackupsRetry);
      clientSettingsBuilder.listBackupsSettings().setRetrySettings(listBackupsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listBackups from properties.");
      }
    }
    Retry getBackupRetry = clientProperties.getGetBackupRetry();
    if (getBackupRetry != null) {
      RetrySettings getBackupRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getBackupSettings().getRetrySettings(), getBackupRetry);
      clientSettingsBuilder.getBackupSettings().setRetrySettings(getBackupRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getBackup from properties.");
      }
    }
    Retry getBackupPlanRetry = clientProperties.getGetBackupPlanRetry();
    if (getBackupPlanRetry != null) {
      RetrySettings getBackupPlanRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getBackupPlanSettings().getRetrySettings(), getBackupPlanRetry);
      clientSettingsBuilder.getBackupPlanSettings().setRetrySettings(getBackupPlanRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getBackupPlan from properties.");
      }
    }
    Retry listBackupPlansRetry = clientProperties.getListBackupPlansRetry();
    if (listBackupPlansRetry != null) {
      RetrySettings listBackupPlansRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listBackupPlansSettings().getRetrySettings(),
              listBackupPlansRetry);
      clientSettingsBuilder
          .listBackupPlansSettings()
          .setRetrySettings(listBackupPlansRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listBackupPlans from properties.");
      }
    }
    Retry getBackupPlanAssociationRetry = clientProperties.getGetBackupPlanAssociationRetry();
    if (getBackupPlanAssociationRetry != null) {
      RetrySettings getBackupPlanAssociationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getBackupPlanAssociationSettings().getRetrySettings(),
              getBackupPlanAssociationRetry);
      clientSettingsBuilder
          .getBackupPlanAssociationSettings()
          .setRetrySettings(getBackupPlanAssociationRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for getBackupPlanAssociation from properties.");
      }
    }
    Retry listBackupPlanAssociationsRetry = clientProperties.getListBackupPlanAssociationsRetry();
    if (listBackupPlanAssociationsRetry != null) {
      RetrySettings listBackupPlanAssociationsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listBackupPlanAssociationsSettings().getRetrySettings(),
              listBackupPlanAssociationsRetry);
      clientSettingsBuilder
          .listBackupPlanAssociationsSettings()
          .setRetrySettings(listBackupPlanAssociationsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listBackupPlanAssociations from properties.");
      }
    }
    Retry listLocationsRetry = clientProperties.getListLocationsRetry();
    if (listLocationsRetry != null) {
      RetrySettings listLocationsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listLocationsSettings().getRetrySettings(), listLocationsRetry);
      clientSettingsBuilder.listLocationsSettings().setRetrySettings(listLocationsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listLocations from properties.");
      }
    }
    Retry getLocationRetry = clientProperties.getGetLocationRetry();
    if (getLocationRetry != null) {
      RetrySettings getLocationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getLocationSettings().getRetrySettings(), getLocationRetry);
      clientSettingsBuilder.getLocationSettings().setRetrySettings(getLocationRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getLocation from properties.");
      }
    }
    Retry setIamPolicyRetry = clientProperties.getSetIamPolicyRetry();
    if (setIamPolicyRetry != null) {
      RetrySettings setIamPolicyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.setIamPolicySettings().getRetrySettings(), setIamPolicyRetry);
      clientSettingsBuilder.setIamPolicySettings().setRetrySettings(setIamPolicyRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for setIamPolicy from properties.");
      }
    }
    Retry getIamPolicyRetry = clientProperties.getGetIamPolicyRetry();
    if (getIamPolicyRetry != null) {
      RetrySettings getIamPolicyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getIamPolicySettings().getRetrySettings(), getIamPolicyRetry);
      clientSettingsBuilder.getIamPolicySettings().setRetrySettings(getIamPolicyRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getIamPolicy from properties.");
      }
    }
    return clientSettingsBuilder.build();
  }

  /**
   * Provides a BackupDRClient bean configured with BackupDRSettings.
   *
   * @param backupDRSettings settings to configure an instance of client bean.
   * @return a {@link BackupDRClient} bean configured with {@link BackupDRSettings}
   */
  @Bean
  @ConditionalOnMissingBean
  public BackupDRClient backupDRClient(BackupDRSettings backupDRSettings) throws IOException {
    return BackupDRClient.create(backupDRSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-backup-d-r";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
