/*
 * Copyright 2024 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.backupdr.v1.spring;

import com.google.api.core.BetaApi;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.CredentialsSupplier;
import com.google.cloud.spring.core.Retry;
import javax.annotation.Generated;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.context.properties.NestedConfigurationProperty;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/** Provides default property values for BackupDR client bean */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@ConfigurationProperties("com.google.cloud.backupdr.v1.backup-d-r")
public class BackupDRSpringProperties implements CredentialsSupplier {
  /** OAuth2 credentials to authenticate and authorize calls to Google Cloud Client Libraries. */
  @NestedConfigurationProperty
  private final Credentials credentials =
      new Credentials("https://www.googleapis.com/auth/cloud-platform");
  /** Quota project to use for billing. */
  private String quotaProjectId;
  /** Number of threads used for executors. */
  private Integer executorThreadCount;
  /** Allow override of default transport channel provider to use REST instead of gRPC. */
  private boolean useRest = false;
  /** Allow override of retry settings at service level, applying to all of its RPC methods. */
  @NestedConfigurationProperty private Retry retry;
  /**
   * Allow override of retry settings at method-level for listManagementServers. If defined, this
   * takes precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry listManagementServersRetry;
  /**
   * Allow override of retry settings at method-level for getManagementServer. If defined, this
   * takes precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry getManagementServerRetry;
  /**
   * Allow override of retry settings at method-level for listBackupVaults. If defined, this takes
   * precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry listBackupVaultsRetry;
  /**
   * Allow override of retry settings at method-level for fetchUsableBackupVaults. If defined, this
   * takes precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry fetchUsableBackupVaultsRetry;
  /**
   * Allow override of retry settings at method-level for getBackupVault. If defined, this takes
   * precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry getBackupVaultRetry;
  /**
   * Allow override of retry settings at method-level for testIamPermissions. If defined, this takes
   * precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry testIamPermissionsRetry;
  /**
   * Allow override of retry settings at method-level for listDataSources. If defined, this takes
   * precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry listDataSourcesRetry;
  /**
   * Allow override of retry settings at method-level for getDataSource. If defined, this takes
   * precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry getDataSourceRetry;
  /**
   * Allow override of retry settings at method-level for initiateBackup. If defined, this takes
   * precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry initiateBackupRetry;
  /**
   * Allow override of retry settings at method-level for fetchAccessToken. If defined, this takes
   * precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry fetchAccessTokenRetry;
  /**
   * Allow override of retry settings at method-level for listBackups. If defined, this takes
   * precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry listBackupsRetry;
  /**
   * Allow override of retry settings at method-level for getBackup. If defined, this takes
   * precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry getBackupRetry;
  /**
   * Allow override of retry settings at method-level for getBackupPlan. If defined, this takes
   * precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry getBackupPlanRetry;
  /**
   * Allow override of retry settings at method-level for listBackupPlans. If defined, this takes
   * precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry listBackupPlansRetry;
  /**
   * Allow override of retry settings at method-level for getBackupPlanAssociation. If defined, this
   * takes precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry getBackupPlanAssociationRetry;
  /**
   * Allow override of retry settings at method-level for listBackupPlanAssociations. If defined,
   * this takes precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry listBackupPlanAssociationsRetry;
  /**
   * Allow override of retry settings at method-level for listLocations. If defined, this takes
   * precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry listLocationsRetry;
  /**
   * Allow override of retry settings at method-level for getLocation. If defined, this takes
   * precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry getLocationRetry;
  /**
   * Allow override of retry settings at method-level for setIamPolicy. If defined, this takes
   * precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry setIamPolicyRetry;
  /**
   * Allow override of retry settings at method-level for getIamPolicy. If defined, this takes
   * precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry getIamPolicyRetry;

  @Override
  public Credentials getCredentials() {
    return this.credentials;
  }

  public String getQuotaProjectId() {
    return this.quotaProjectId;
  }

  public void setQuotaProjectId(String quotaProjectId) {
    this.quotaProjectId = quotaProjectId;
  }

  public boolean getUseRest() {
    return this.useRest;
  }

  public void setUseRest(boolean useRest) {
    this.useRest = useRest;
  }

  public Integer getExecutorThreadCount() {
    return this.executorThreadCount;
  }

  public void setExecutorThreadCount(Integer executorThreadCount) {
    this.executorThreadCount = executorThreadCount;
  }

  public Retry getRetry() {
    return this.retry;
  }

  public void setRetry(Retry retry) {
    this.retry = retry;
  }

  public Retry getListManagementServersRetry() {
    return this.listManagementServersRetry;
  }

  public void setListManagementServersRetry(Retry listManagementServersRetry) {
    this.listManagementServersRetry = listManagementServersRetry;
  }

  public Retry getGetManagementServerRetry() {
    return this.getManagementServerRetry;
  }

  public void setGetManagementServerRetry(Retry getManagementServerRetry) {
    this.getManagementServerRetry = getManagementServerRetry;
  }

  public Retry getListBackupVaultsRetry() {
    return this.listBackupVaultsRetry;
  }

  public void setListBackupVaultsRetry(Retry listBackupVaultsRetry) {
    this.listBackupVaultsRetry = listBackupVaultsRetry;
  }

  public Retry getFetchUsableBackupVaultsRetry() {
    return this.fetchUsableBackupVaultsRetry;
  }

  public void setFetchUsableBackupVaultsRetry(Retry fetchUsableBackupVaultsRetry) {
    this.fetchUsableBackupVaultsRetry = fetchUsableBackupVaultsRetry;
  }

  public Retry getGetBackupVaultRetry() {
    return this.getBackupVaultRetry;
  }

  public void setGetBackupVaultRetry(Retry getBackupVaultRetry) {
    this.getBackupVaultRetry = getBackupVaultRetry;
  }

  public Retry getTestIamPermissionsRetry() {
    return this.testIamPermissionsRetry;
  }

  public void setTestIamPermissionsRetry(Retry testIamPermissionsRetry) {
    this.testIamPermissionsRetry = testIamPermissionsRetry;
  }

  public Retry getListDataSourcesRetry() {
    return this.listDataSourcesRetry;
  }

  public void setListDataSourcesRetry(Retry listDataSourcesRetry) {
    this.listDataSourcesRetry = listDataSourcesRetry;
  }

  public Retry getGetDataSourceRetry() {
    return this.getDataSourceRetry;
  }

  public void setGetDataSourceRetry(Retry getDataSourceRetry) {
    this.getDataSourceRetry = getDataSourceRetry;
  }

  public Retry getInitiateBackupRetry() {
    return this.initiateBackupRetry;
  }

  public void setInitiateBackupRetry(Retry initiateBackupRetry) {
    this.initiateBackupRetry = initiateBackupRetry;
  }

  public Retry getFetchAccessTokenRetry() {
    return this.fetchAccessTokenRetry;
  }

  public void setFetchAccessTokenRetry(Retry fetchAccessTokenRetry) {
    this.fetchAccessTokenRetry = fetchAccessTokenRetry;
  }

  public Retry getListBackupsRetry() {
    return this.listBackupsRetry;
  }

  public void setListBackupsRetry(Retry listBackupsRetry) {
    this.listBackupsRetry = listBackupsRetry;
  }

  public Retry getGetBackupRetry() {
    return this.getBackupRetry;
  }

  public void setGetBackupRetry(Retry getBackupRetry) {
    this.getBackupRetry = getBackupRetry;
  }

  public Retry getGetBackupPlanRetry() {
    return this.getBackupPlanRetry;
  }

  public void setGetBackupPlanRetry(Retry getBackupPlanRetry) {
    this.getBackupPlanRetry = getBackupPlanRetry;
  }

  public Retry getListBackupPlansRetry() {
    return this.listBackupPlansRetry;
  }

  public void setListBackupPlansRetry(Retry listBackupPlansRetry) {
    this.listBackupPlansRetry = listBackupPlansRetry;
  }

  public Retry getGetBackupPlanAssociationRetry() {
    return this.getBackupPlanAssociationRetry;
  }

  public void setGetBackupPlanAssociationRetry(Retry getBackupPlanAssociationRetry) {
    this.getBackupPlanAssociationRetry = getBackupPlanAssociationRetry;
  }

  public Retry getListBackupPlanAssociationsRetry() {
    return this.listBackupPlanAssociationsRetry;
  }

  public void setListBackupPlanAssociationsRetry(Retry listBackupPlanAssociationsRetry) {
    this.listBackupPlanAssociationsRetry = listBackupPlanAssociationsRetry;
  }

  public Retry getListLocationsRetry() {
    return this.listLocationsRetry;
  }

  public void setListLocationsRetry(Retry listLocationsRetry) {
    this.listLocationsRetry = listLocationsRetry;
  }

  public Retry getGetLocationRetry() {
    return this.getLocationRetry;
  }

  public void setGetLocationRetry(Retry getLocationRetry) {
    this.getLocationRetry = getLocationRetry;
  }

  public Retry getSetIamPolicyRetry() {
    return this.setIamPolicyRetry;
  }

  public void setSetIamPolicyRetry(Retry setIamPolicyRetry) {
    this.setIamPolicyRetry = setIamPolicyRetry;
  }

  public Retry getGetIamPolicyRetry() {
    return this.getIamPolicyRetry;
  }

  public void setGetIamPolicyRetry(Retry getIamPolicyRetry) {
    this.getIamPolicyRetry = getIamPolicyRetry;
  }
}
