/*
 * Copyright 2024 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.datacatalog.lineage.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.datacatalog.lineage.v1.LineageClient;
import com.google.cloud.datacatalog.lineage.v1.LineageSettings;
import com.google.cloud.spring.autoconfigure.core.GcpContextAutoConfiguration;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.core.Retry;
import com.google.cloud.spring.core.util.RetryUtil;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.AutoConfigureAfter;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link LineageClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@AutoConfigureAfter(GcpContextAutoConfiguration.class)
@ConditionalOnClass(LineageClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.datacatalog.lineage.v1.lineage.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties(LineageSpringProperties.class)
public class LineageSpringAutoConfiguration {
  private final LineageSpringProperties clientProperties;
  private final CredentialsProvider credentialsProvider;
  private static final Log LOGGER = LogFactory.getLog(LineageSpringAutoConfiguration.class);

  protected LineageSpringAutoConfiguration(
      LineageSpringProperties clientProperties, CredentialsProvider credentialsProvider)
      throws IOException {
    this.clientProperties = clientProperties;
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from Lineage-specific configuration");
      }
      this.credentialsProvider =
          ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    } else {
      this.credentialsProvider = credentialsProvider;
    }
  }

  /**
   * Provides a default transport channel provider bean, corresponding to the client library's
   * default transport channel provider. If the library supports both GRPC and REST transport, and
   * the useRest property is configured, the HTTP/JSON transport provider will be used instead of
   * GRPC.
   *
   * @return a default transport channel provider.
   */
  @Bean
  @ConditionalOnMissingBean(name = "defaultLineageTransportChannelProvider")
  public TransportChannelProvider defaultLineageTransportChannelProvider() {
    if (this.clientProperties.getUseRest()) {
      return LineageSettings.defaultHttpJsonTransportProviderBuilder().build();
    }
    return LineageSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a LineageSettings bean configured to use a DefaultCredentialsProvider and the client
   * library's default transport channel provider (defaultLineageTransportChannelProvider()). It
   * also configures the quota project ID and executor thread count, if provided through properties.
   *
   * <p>Retry settings are also configured from service-level and method-level properties specified
   * in LineageSpringProperties. Method-level properties will take precedence over service-level
   * properties if available, and client library defaults will be used if neither are specified.
   *
   * @param defaultTransportChannelProvider TransportChannelProvider to use in the settings.
   * @return a {@link LineageSettings} bean configured with {@link TransportChannelProvider} bean.
   */
  @Bean
  @ConditionalOnMissingBean
  public LineageSettings lineageSettings(
      @Qualifier("defaultLineageTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    LineageSettings.Builder clientSettingsBuilder;
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder = LineageSettings.newHttpJsonBuilder();
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using REST (HTTP/JSON) transport.");
      }
    } else {
      clientSettingsBuilder = LineageSettings.newBuilder();
    }
    clientSettingsBuilder
        .setCredentialsProvider(this.credentialsProvider)
        .setTransportChannelProvider(defaultTransportChannelProvider)
        .setEndpoint(LineageSettings.getDefaultEndpoint())
        .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          LineageSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    Retry serviceRetry = clientProperties.getRetry();
    if (serviceRetry != null) {
      RetrySettings processOpenLineageRunEventRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.processOpenLineageRunEventSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .processOpenLineageRunEventSettings()
          .setRetrySettings(processOpenLineageRunEventRetrySettings);

      RetrySettings createProcessRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createProcessSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.createProcessSettings().setRetrySettings(createProcessRetrySettings);

      RetrySettings updateProcessRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateProcessSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.updateProcessSettings().setRetrySettings(updateProcessRetrySettings);

      RetrySettings getProcessRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getProcessSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getProcessSettings().setRetrySettings(getProcessRetrySettings);

      RetrySettings listProcessesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listProcessesSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.listProcessesSettings().setRetrySettings(listProcessesRetrySettings);

      RetrySettings createRunRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createRunSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.createRunSettings().setRetrySettings(createRunRetrySettings);

      RetrySettings updateRunRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateRunSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.updateRunSettings().setRetrySettings(updateRunRetrySettings);

      RetrySettings getRunRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getRunSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getRunSettings().setRetrySettings(getRunRetrySettings);

      RetrySettings listRunsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listRunsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.listRunsSettings().setRetrySettings(listRunsRetrySettings);

      RetrySettings createLineageEventRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createLineageEventSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .createLineageEventSettings()
          .setRetrySettings(createLineageEventRetrySettings);

      RetrySettings getLineageEventRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getLineageEventSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .getLineageEventSettings()
          .setRetrySettings(getLineageEventRetrySettings);

      RetrySettings listLineageEventsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listLineageEventsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .listLineageEventsSettings()
          .setRetrySettings(listLineageEventsRetrySettings);

      RetrySettings deleteLineageEventRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteLineageEventSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .deleteLineageEventSettings()
          .setRetrySettings(deleteLineageEventRetrySettings);

      RetrySettings searchLinksRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.searchLinksSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.searchLinksSettings().setRetrySettings(searchLinksRetrySettings);

      RetrySettings batchSearchLinkProcessesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.batchSearchLinkProcessesSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .batchSearchLinkProcessesSettings()
          .setRetrySettings(batchSearchLinkProcessesRetrySettings);

      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured service-level retry settings from properties.");
      }
    }
    Retry processOpenLineageRunEventRetry = clientProperties.getProcessOpenLineageRunEventRetry();
    if (processOpenLineageRunEventRetry != null) {
      RetrySettings processOpenLineageRunEventRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.processOpenLineageRunEventSettings().getRetrySettings(),
              processOpenLineageRunEventRetry);
      clientSettingsBuilder
          .processOpenLineageRunEventSettings()
          .setRetrySettings(processOpenLineageRunEventRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for processOpenLineageRunEvent from properties.");
      }
    }
    Retry createProcessRetry = clientProperties.getCreateProcessRetry();
    if (createProcessRetry != null) {
      RetrySettings createProcessRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createProcessSettings().getRetrySettings(), createProcessRetry);
      clientSettingsBuilder.createProcessSettings().setRetrySettings(createProcessRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for createProcess from properties.");
      }
    }
    Retry updateProcessRetry = clientProperties.getUpdateProcessRetry();
    if (updateProcessRetry != null) {
      RetrySettings updateProcessRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateProcessSettings().getRetrySettings(), updateProcessRetry);
      clientSettingsBuilder.updateProcessSettings().setRetrySettings(updateProcessRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for updateProcess from properties.");
      }
    }
    Retry getProcessRetry = clientProperties.getGetProcessRetry();
    if (getProcessRetry != null) {
      RetrySettings getProcessRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getProcessSettings().getRetrySettings(), getProcessRetry);
      clientSettingsBuilder.getProcessSettings().setRetrySettings(getProcessRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getProcess from properties.");
      }
    }
    Retry listProcessesRetry = clientProperties.getListProcessesRetry();
    if (listProcessesRetry != null) {
      RetrySettings listProcessesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listProcessesSettings().getRetrySettings(), listProcessesRetry);
      clientSettingsBuilder.listProcessesSettings().setRetrySettings(listProcessesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listProcesses from properties.");
      }
    }
    Retry createRunRetry = clientProperties.getCreateRunRetry();
    if (createRunRetry != null) {
      RetrySettings createRunRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createRunSettings().getRetrySettings(), createRunRetry);
      clientSettingsBuilder.createRunSettings().setRetrySettings(createRunRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for createRun from properties.");
      }
    }
    Retry updateRunRetry = clientProperties.getUpdateRunRetry();
    if (updateRunRetry != null) {
      RetrySettings updateRunRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateRunSettings().getRetrySettings(), updateRunRetry);
      clientSettingsBuilder.updateRunSettings().setRetrySettings(updateRunRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for updateRun from properties.");
      }
    }
    Retry getRunRetry = clientProperties.getGetRunRetry();
    if (getRunRetry != null) {
      RetrySettings getRunRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getRunSettings().getRetrySettings(), getRunRetry);
      clientSettingsBuilder.getRunSettings().setRetrySettings(getRunRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getRun from properties.");
      }
    }
    Retry listRunsRetry = clientProperties.getListRunsRetry();
    if (listRunsRetry != null) {
      RetrySettings listRunsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listRunsSettings().getRetrySettings(), listRunsRetry);
      clientSettingsBuilder.listRunsSettings().setRetrySettings(listRunsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listRuns from properties.");
      }
    }
    Retry createLineageEventRetry = clientProperties.getCreateLineageEventRetry();
    if (createLineageEventRetry != null) {
      RetrySettings createLineageEventRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createLineageEventSettings().getRetrySettings(),
              createLineageEventRetry);
      clientSettingsBuilder
          .createLineageEventSettings()
          .setRetrySettings(createLineageEventRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for createLineageEvent from properties.");
      }
    }
    Retry getLineageEventRetry = clientProperties.getGetLineageEventRetry();
    if (getLineageEventRetry != null) {
      RetrySettings getLineageEventRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getLineageEventSettings().getRetrySettings(),
              getLineageEventRetry);
      clientSettingsBuilder
          .getLineageEventSettings()
          .setRetrySettings(getLineageEventRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getLineageEvent from properties.");
      }
    }
    Retry listLineageEventsRetry = clientProperties.getListLineageEventsRetry();
    if (listLineageEventsRetry != null) {
      RetrySettings listLineageEventsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listLineageEventsSettings().getRetrySettings(),
              listLineageEventsRetry);
      clientSettingsBuilder
          .listLineageEventsSettings()
          .setRetrySettings(listLineageEventsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listLineageEvents from properties.");
      }
    }
    Retry deleteLineageEventRetry = clientProperties.getDeleteLineageEventRetry();
    if (deleteLineageEventRetry != null) {
      RetrySettings deleteLineageEventRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteLineageEventSettings().getRetrySettings(),
              deleteLineageEventRetry);
      clientSettingsBuilder
          .deleteLineageEventSettings()
          .setRetrySettings(deleteLineageEventRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for deleteLineageEvent from properties.");
      }
    }
    Retry searchLinksRetry = clientProperties.getSearchLinksRetry();
    if (searchLinksRetry != null) {
      RetrySettings searchLinksRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.searchLinksSettings().getRetrySettings(), searchLinksRetry);
      clientSettingsBuilder.searchLinksSettings().setRetrySettings(searchLinksRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for searchLinks from properties.");
      }
    }
    Retry batchSearchLinkProcessesRetry = clientProperties.getBatchSearchLinkProcessesRetry();
    if (batchSearchLinkProcessesRetry != null) {
      RetrySettings batchSearchLinkProcessesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.batchSearchLinkProcessesSettings().getRetrySettings(),
              batchSearchLinkProcessesRetry);
      clientSettingsBuilder
          .batchSearchLinkProcessesSettings()
          .setRetrySettings(batchSearchLinkProcessesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for batchSearchLinkProcesses from properties.");
      }
    }
    return clientSettingsBuilder.build();
  }

  /**
   * Provides a LineageClient bean configured with LineageSettings.
   *
   * @param lineageSettings settings to configure an instance of client bean.
   * @return a {@link LineageClient} bean configured with {@link LineageSettings}
   */
  @Bean
  @ConditionalOnMissingBean
  public LineageClient lineageClient(LineageSettings lineageSettings) throws IOException {
    return LineageClient.create(lineageSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-lineage";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
