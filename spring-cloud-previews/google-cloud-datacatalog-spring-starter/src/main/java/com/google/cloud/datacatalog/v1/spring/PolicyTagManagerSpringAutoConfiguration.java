/*
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.datacatalog.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.datacatalog.v1.PolicyTagManagerClient;
import com.google.cloud.datacatalog.v1.PolicyTagManagerSettings;
import com.google.cloud.spring.autoconfigure.core.GcpContextAutoConfiguration;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.core.Retry;
import com.google.cloud.spring.core.util.RetryUtil;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.AutoConfigureAfter;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link PolicyTagManagerClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@AutoConfigureAfter(GcpContextAutoConfiguration.class)
@ConditionalOnClass(PolicyTagManagerClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.datacatalog.v1.policy-tag-manager.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties(PolicyTagManagerSpringProperties.class)
public class PolicyTagManagerSpringAutoConfiguration {
  private final PolicyTagManagerSpringProperties clientProperties;
  private final CredentialsProvider credentialsProvider;
  private static final Log LOGGER =
      LogFactory.getLog(PolicyTagManagerSpringAutoConfiguration.class);

  protected PolicyTagManagerSpringAutoConfiguration(
      PolicyTagManagerSpringProperties clientProperties, CredentialsProvider credentialsProvider)
      throws IOException {
    this.clientProperties = clientProperties;
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from PolicyTagManager-specific configuration");
      }
      this.credentialsProvider =
          ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    } else {
      this.credentialsProvider = credentialsProvider;
    }
  }

  /**
   * Provides a default transport channel provider bean, corresponding to the client library's
   * default transport channel provider. If the library supports both GRPC and REST transport, and
   * the useRest property is configured, the HTTP/JSON transport provider will be used instead of
   * GRPC.
   *
   * @return a default transport channel provider.
   */
  @Bean
  @ConditionalOnMissingBean(name = "defaultPolicyTagManagerTransportChannelProvider")
  public TransportChannelProvider defaultPolicyTagManagerTransportChannelProvider() {
    if (this.clientProperties.getUseRest()) {
      return PolicyTagManagerSettings.defaultHttpJsonTransportProviderBuilder().build();
    }
    return PolicyTagManagerSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a PolicyTagManagerSettings bean configured to use a DefaultCredentialsProvider and the
   * client library's default transport channel provider
   * (defaultPolicyTagManagerTransportChannelProvider()). It also configures the quota project ID
   * and executor thread count, if provided through properties.
   *
   * <p>Retry settings are also configured from service-level and method-level properties specified
   * in PolicyTagManagerSpringProperties. Method-level properties will take precedence over
   * service-level properties if available, and client library defaults will be used if neither are
   * specified.
   *
   * @param defaultTransportChannelProvider TransportChannelProvider to use in the settings.
   * @return a {@link PolicyTagManagerSettings} bean configured with {@link
   *     TransportChannelProvider} bean.
   */
  @Bean
  @ConditionalOnMissingBean
  public PolicyTagManagerSettings policyTagManagerSettings(
      @Qualifier("defaultPolicyTagManagerTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    PolicyTagManagerSettings.Builder clientSettingsBuilder;
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder = PolicyTagManagerSettings.newHttpJsonBuilder();
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using REST (HTTP/JSON) transport.");
      }
    } else {
      clientSettingsBuilder = PolicyTagManagerSettings.newBuilder();
    }
    clientSettingsBuilder
        .setCredentialsProvider(this.credentialsProvider)
        .setTransportChannelProvider(defaultTransportChannelProvider)
        .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          PolicyTagManagerSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    Retry serviceRetry = clientProperties.getRetry();
    if (serviceRetry != null) {
      RetrySettings createTaxonomyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createTaxonomySettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.createTaxonomySettings().setRetrySettings(createTaxonomyRetrySettings);

      RetrySettings deleteTaxonomyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteTaxonomySettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.deleteTaxonomySettings().setRetrySettings(deleteTaxonomyRetrySettings);

      RetrySettings updateTaxonomyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateTaxonomySettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.updateTaxonomySettings().setRetrySettings(updateTaxonomyRetrySettings);

      RetrySettings listTaxonomiesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listTaxonomiesSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.listTaxonomiesSettings().setRetrySettings(listTaxonomiesRetrySettings);

      RetrySettings getTaxonomyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getTaxonomySettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getTaxonomySettings().setRetrySettings(getTaxonomyRetrySettings);

      RetrySettings createPolicyTagRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createPolicyTagSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .createPolicyTagSettings()
          .setRetrySettings(createPolicyTagRetrySettings);

      RetrySettings deletePolicyTagRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deletePolicyTagSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .deletePolicyTagSettings()
          .setRetrySettings(deletePolicyTagRetrySettings);

      RetrySettings updatePolicyTagRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updatePolicyTagSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .updatePolicyTagSettings()
          .setRetrySettings(updatePolicyTagRetrySettings);

      RetrySettings listPolicyTagsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listPolicyTagsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.listPolicyTagsSettings().setRetrySettings(listPolicyTagsRetrySettings);

      RetrySettings getPolicyTagRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getPolicyTagSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getPolicyTagSettings().setRetrySettings(getPolicyTagRetrySettings);

      RetrySettings getIamPolicyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getIamPolicySettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getIamPolicySettings().setRetrySettings(getIamPolicyRetrySettings);

      RetrySettings setIamPolicyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.setIamPolicySettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.setIamPolicySettings().setRetrySettings(setIamPolicyRetrySettings);

      RetrySettings testIamPermissionsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.testIamPermissionsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .testIamPermissionsSettings()
          .setRetrySettings(testIamPermissionsRetrySettings);

      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured service-level retry settings from properties.");
      }
    }
    Retry createTaxonomyRetry = clientProperties.getCreateTaxonomyRetry();
    if (createTaxonomyRetry != null) {
      RetrySettings createTaxonomyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createTaxonomySettings().getRetrySettings(),
              createTaxonomyRetry);
      clientSettingsBuilder.createTaxonomySettings().setRetrySettings(createTaxonomyRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for createTaxonomy from properties.");
      }
    }
    Retry deleteTaxonomyRetry = clientProperties.getDeleteTaxonomyRetry();
    if (deleteTaxonomyRetry != null) {
      RetrySettings deleteTaxonomyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteTaxonomySettings().getRetrySettings(),
              deleteTaxonomyRetry);
      clientSettingsBuilder.deleteTaxonomySettings().setRetrySettings(deleteTaxonomyRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for deleteTaxonomy from properties.");
      }
    }
    Retry updateTaxonomyRetry = clientProperties.getUpdateTaxonomyRetry();
    if (updateTaxonomyRetry != null) {
      RetrySettings updateTaxonomyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateTaxonomySettings().getRetrySettings(),
              updateTaxonomyRetry);
      clientSettingsBuilder.updateTaxonomySettings().setRetrySettings(updateTaxonomyRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for updateTaxonomy from properties.");
      }
    }
    Retry listTaxonomiesRetry = clientProperties.getListTaxonomiesRetry();
    if (listTaxonomiesRetry != null) {
      RetrySettings listTaxonomiesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listTaxonomiesSettings().getRetrySettings(),
              listTaxonomiesRetry);
      clientSettingsBuilder.listTaxonomiesSettings().setRetrySettings(listTaxonomiesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listTaxonomies from properties.");
      }
    }
    Retry getTaxonomyRetry = clientProperties.getGetTaxonomyRetry();
    if (getTaxonomyRetry != null) {
      RetrySettings getTaxonomyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getTaxonomySettings().getRetrySettings(), getTaxonomyRetry);
      clientSettingsBuilder.getTaxonomySettings().setRetrySettings(getTaxonomyRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getTaxonomy from properties.");
      }
    }
    Retry createPolicyTagRetry = clientProperties.getCreatePolicyTagRetry();
    if (createPolicyTagRetry != null) {
      RetrySettings createPolicyTagRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createPolicyTagSettings().getRetrySettings(),
              createPolicyTagRetry);
      clientSettingsBuilder
          .createPolicyTagSettings()
          .setRetrySettings(createPolicyTagRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for createPolicyTag from properties.");
      }
    }
    Retry deletePolicyTagRetry = clientProperties.getDeletePolicyTagRetry();
    if (deletePolicyTagRetry != null) {
      RetrySettings deletePolicyTagRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deletePolicyTagSettings().getRetrySettings(),
              deletePolicyTagRetry);
      clientSettingsBuilder
          .deletePolicyTagSettings()
          .setRetrySettings(deletePolicyTagRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for deletePolicyTag from properties.");
      }
    }
    Retry updatePolicyTagRetry = clientProperties.getUpdatePolicyTagRetry();
    if (updatePolicyTagRetry != null) {
      RetrySettings updatePolicyTagRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updatePolicyTagSettings().getRetrySettings(),
              updatePolicyTagRetry);
      clientSettingsBuilder
          .updatePolicyTagSettings()
          .setRetrySettings(updatePolicyTagRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for updatePolicyTag from properties.");
      }
    }
    Retry listPolicyTagsRetry = clientProperties.getListPolicyTagsRetry();
    if (listPolicyTagsRetry != null) {
      RetrySettings listPolicyTagsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listPolicyTagsSettings().getRetrySettings(),
              listPolicyTagsRetry);
      clientSettingsBuilder.listPolicyTagsSettings().setRetrySettings(listPolicyTagsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listPolicyTags from properties.");
      }
    }
    Retry getPolicyTagRetry = clientProperties.getGetPolicyTagRetry();
    if (getPolicyTagRetry != null) {
      RetrySettings getPolicyTagRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getPolicyTagSettings().getRetrySettings(), getPolicyTagRetry);
      clientSettingsBuilder.getPolicyTagSettings().setRetrySettings(getPolicyTagRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getPolicyTag from properties.");
      }
    }
    Retry getIamPolicyRetry = clientProperties.getGetIamPolicyRetry();
    if (getIamPolicyRetry != null) {
      RetrySettings getIamPolicyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getIamPolicySettings().getRetrySettings(), getIamPolicyRetry);
      clientSettingsBuilder.getIamPolicySettings().setRetrySettings(getIamPolicyRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getIamPolicy from properties.");
      }
    }
    Retry setIamPolicyRetry = clientProperties.getSetIamPolicyRetry();
    if (setIamPolicyRetry != null) {
      RetrySettings setIamPolicyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.setIamPolicySettings().getRetrySettings(), setIamPolicyRetry);
      clientSettingsBuilder.setIamPolicySettings().setRetrySettings(setIamPolicyRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for setIamPolicy from properties.");
      }
    }
    Retry testIamPermissionsRetry = clientProperties.getTestIamPermissionsRetry();
    if (testIamPermissionsRetry != null) {
      RetrySettings testIamPermissionsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.testIamPermissionsSettings().getRetrySettings(),
              testIamPermissionsRetry);
      clientSettingsBuilder
          .testIamPermissionsSettings()
          .setRetrySettings(testIamPermissionsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for testIamPermissions from properties.");
      }
    }
    return clientSettingsBuilder.build();
  }

  /**
   * Provides a PolicyTagManagerClient bean configured with PolicyTagManagerSettings.
   *
   * @param policyTagManagerSettings settings to configure an instance of client bean.
   * @return a {@link PolicyTagManagerClient} bean configured with {@link PolicyTagManagerSettings}
   */
  @Bean
  @ConditionalOnMissingBean
  public PolicyTagManagerClient policyTagManagerClient(
      PolicyTagManagerSettings policyTagManagerSettings) throws IOException {
    return PolicyTagManagerClient.create(policyTagManagerSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-policy-tag-manager";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
