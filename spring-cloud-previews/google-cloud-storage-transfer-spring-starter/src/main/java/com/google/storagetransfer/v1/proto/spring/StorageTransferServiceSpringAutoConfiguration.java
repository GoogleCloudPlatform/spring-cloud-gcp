/*
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.storagetransfer.v1.proto.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.spring.autoconfigure.core.GcpContextAutoConfiguration;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.core.Retry;
import com.google.cloud.spring.core.util.RetryUtil;
import com.google.storagetransfer.v1.proto.StorageTransferServiceClient;
import com.google.storagetransfer.v1.proto.StorageTransferServiceSettings;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.AutoConfigureAfter;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link StorageTransferServiceClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@AutoConfigureAfter(GcpContextAutoConfiguration.class)
@ConditionalOnClass(StorageTransferServiceClient.class)
@ConditionalOnProperty(
    value = "com.google.storagetransfer.v1.proto.storage-transfer-service.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties(StorageTransferServiceSpringProperties.class)
public class StorageTransferServiceSpringAutoConfiguration {
  private final StorageTransferServiceSpringProperties clientProperties;
  private final CredentialsProvider credentialsProvider;
  private static final Log LOGGER =
      LogFactory.getLog(StorageTransferServiceSpringAutoConfiguration.class);

  protected StorageTransferServiceSpringAutoConfiguration(
      StorageTransferServiceSpringProperties clientProperties,
      CredentialsProvider credentialsProvider)
      throws IOException {
    this.clientProperties = clientProperties;
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from StorageTransferService-specific configuration");
      }
      this.credentialsProvider =
          ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    } else {
      this.credentialsProvider = credentialsProvider;
    }
  }

  /**
   * Provides a default transport channel provider bean, corresponding to the client library's
   * default transport channel provider. If the library supports both GRPC and REST transport, and
   * the useRest property is configured, the HTTP/JSON transport provider will be used instead of
   * GRPC.
   *
   * @return a default transport channel provider.
   */
  @Bean
  @ConditionalOnMissingBean(name = "defaultStorageTransferServiceTransportChannelProvider")
  public TransportChannelProvider defaultStorageTransferServiceTransportChannelProvider() {
    if (this.clientProperties.getUseRest()) {
      return StorageTransferServiceSettings.defaultHttpJsonTransportProviderBuilder().build();
    }
    return StorageTransferServiceSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a StorageTransferServiceSettings bean configured to use a DefaultCredentialsProvider
   * and the client library's default transport channel provider
   * (defaultStorageTransferServiceTransportChannelProvider()). It also configures the quota project
   * ID and executor thread count, if provided through properties.
   *
   * <p>Retry settings are also configured from service-level and method-level properties specified
   * in StorageTransferServiceSpringProperties. Method-level properties will take precedence over
   * service-level properties if available, and client library defaults will be used if neither are
   * specified.
   *
   * @param defaultTransportChannelProvider TransportChannelProvider to use in the settings.
   * @return a {@link StorageTransferServiceSettings} bean configured with {@link
   *     TransportChannelProvider} bean.
   */
  @Bean
  @ConditionalOnMissingBean
  public StorageTransferServiceSettings storageTransferServiceSettings(
      @Qualifier("defaultStorageTransferServiceTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    StorageTransferServiceSettings.Builder clientSettingsBuilder;
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder = StorageTransferServiceSettings.newHttpJsonBuilder();
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using REST (HTTP/JSON) transport.");
      }
    } else {
      clientSettingsBuilder = StorageTransferServiceSettings.newBuilder();
    }
    clientSettingsBuilder
        .setCredentialsProvider(this.credentialsProvider)
        .setTransportChannelProvider(defaultTransportChannelProvider)
        .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          StorageTransferServiceSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    Retry serviceRetry = clientProperties.getRetry();
    if (serviceRetry != null) {
      RetrySettings getGoogleServiceAccountRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getGoogleServiceAccountSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .getGoogleServiceAccountSettings()
          .setRetrySettings(getGoogleServiceAccountRetrySettings);

      RetrySettings createTransferJobRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createTransferJobSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .createTransferJobSettings()
          .setRetrySettings(createTransferJobRetrySettings);

      RetrySettings updateTransferJobRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateTransferJobSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .updateTransferJobSettings()
          .setRetrySettings(updateTransferJobRetrySettings);

      RetrySettings getTransferJobRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getTransferJobSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getTransferJobSettings().setRetrySettings(getTransferJobRetrySettings);

      RetrySettings listTransferJobsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listTransferJobsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .listTransferJobsSettings()
          .setRetrySettings(listTransferJobsRetrySettings);

      RetrySettings pauseTransferOperationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.pauseTransferOperationSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .pauseTransferOperationSettings()
          .setRetrySettings(pauseTransferOperationRetrySettings);

      RetrySettings resumeTransferOperationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.resumeTransferOperationSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .resumeTransferOperationSettings()
          .setRetrySettings(resumeTransferOperationRetrySettings);

      RetrySettings deleteTransferJobRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteTransferJobSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .deleteTransferJobSettings()
          .setRetrySettings(deleteTransferJobRetrySettings);

      RetrySettings createAgentPoolRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createAgentPoolSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .createAgentPoolSettings()
          .setRetrySettings(createAgentPoolRetrySettings);

      RetrySettings updateAgentPoolRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateAgentPoolSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .updateAgentPoolSettings()
          .setRetrySettings(updateAgentPoolRetrySettings);

      RetrySettings getAgentPoolRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getAgentPoolSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getAgentPoolSettings().setRetrySettings(getAgentPoolRetrySettings);

      RetrySettings listAgentPoolsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listAgentPoolsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.listAgentPoolsSettings().setRetrySettings(listAgentPoolsRetrySettings);

      RetrySettings deleteAgentPoolRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteAgentPoolSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .deleteAgentPoolSettings()
          .setRetrySettings(deleteAgentPoolRetrySettings);

      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured service-level retry settings from properties.");
      }
    }
    Retry getGoogleServiceAccountRetry = clientProperties.getGetGoogleServiceAccountRetry();
    if (getGoogleServiceAccountRetry != null) {
      RetrySettings getGoogleServiceAccountRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getGoogleServiceAccountSettings().getRetrySettings(),
              getGoogleServiceAccountRetry);
      clientSettingsBuilder
          .getGoogleServiceAccountSettings()
          .setRetrySettings(getGoogleServiceAccountRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for getGoogleServiceAccount from properties.");
      }
    }
    Retry createTransferJobRetry = clientProperties.getCreateTransferJobRetry();
    if (createTransferJobRetry != null) {
      RetrySettings createTransferJobRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createTransferJobSettings().getRetrySettings(),
              createTransferJobRetry);
      clientSettingsBuilder
          .createTransferJobSettings()
          .setRetrySettings(createTransferJobRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for createTransferJob from properties.");
      }
    }
    Retry updateTransferJobRetry = clientProperties.getUpdateTransferJobRetry();
    if (updateTransferJobRetry != null) {
      RetrySettings updateTransferJobRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateTransferJobSettings().getRetrySettings(),
              updateTransferJobRetry);
      clientSettingsBuilder
          .updateTransferJobSettings()
          .setRetrySettings(updateTransferJobRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for updateTransferJob from properties.");
      }
    }
    Retry getTransferJobRetry = clientProperties.getGetTransferJobRetry();
    if (getTransferJobRetry != null) {
      RetrySettings getTransferJobRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getTransferJobSettings().getRetrySettings(),
              getTransferJobRetry);
      clientSettingsBuilder.getTransferJobSettings().setRetrySettings(getTransferJobRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getTransferJob from properties.");
      }
    }
    Retry listTransferJobsRetry = clientProperties.getListTransferJobsRetry();
    if (listTransferJobsRetry != null) {
      RetrySettings listTransferJobsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listTransferJobsSettings().getRetrySettings(),
              listTransferJobsRetry);
      clientSettingsBuilder
          .listTransferJobsSettings()
          .setRetrySettings(listTransferJobsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listTransferJobs from properties.");
      }
    }
    Retry pauseTransferOperationRetry = clientProperties.getPauseTransferOperationRetry();
    if (pauseTransferOperationRetry != null) {
      RetrySettings pauseTransferOperationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.pauseTransferOperationSettings().getRetrySettings(),
              pauseTransferOperationRetry);
      clientSettingsBuilder
          .pauseTransferOperationSettings()
          .setRetrySettings(pauseTransferOperationRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for pauseTransferOperation from properties.");
      }
    }
    Retry resumeTransferOperationRetry = clientProperties.getResumeTransferOperationRetry();
    if (resumeTransferOperationRetry != null) {
      RetrySettings resumeTransferOperationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.resumeTransferOperationSettings().getRetrySettings(),
              resumeTransferOperationRetry);
      clientSettingsBuilder
          .resumeTransferOperationSettings()
          .setRetrySettings(resumeTransferOperationRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for resumeTransferOperation from properties.");
      }
    }
    Retry deleteTransferJobRetry = clientProperties.getDeleteTransferJobRetry();
    if (deleteTransferJobRetry != null) {
      RetrySettings deleteTransferJobRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteTransferJobSettings().getRetrySettings(),
              deleteTransferJobRetry);
      clientSettingsBuilder
          .deleteTransferJobSettings()
          .setRetrySettings(deleteTransferJobRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for deleteTransferJob from properties.");
      }
    }
    Retry createAgentPoolRetry = clientProperties.getCreateAgentPoolRetry();
    if (createAgentPoolRetry != null) {
      RetrySettings createAgentPoolRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createAgentPoolSettings().getRetrySettings(),
              createAgentPoolRetry);
      clientSettingsBuilder
          .createAgentPoolSettings()
          .setRetrySettings(createAgentPoolRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for createAgentPool from properties.");
      }
    }
    Retry updateAgentPoolRetry = clientProperties.getUpdateAgentPoolRetry();
    if (updateAgentPoolRetry != null) {
      RetrySettings updateAgentPoolRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateAgentPoolSettings().getRetrySettings(),
              updateAgentPoolRetry);
      clientSettingsBuilder
          .updateAgentPoolSettings()
          .setRetrySettings(updateAgentPoolRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for updateAgentPool from properties.");
      }
    }
    Retry getAgentPoolRetry = clientProperties.getGetAgentPoolRetry();
    if (getAgentPoolRetry != null) {
      RetrySettings getAgentPoolRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getAgentPoolSettings().getRetrySettings(), getAgentPoolRetry);
      clientSettingsBuilder.getAgentPoolSettings().setRetrySettings(getAgentPoolRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getAgentPool from properties.");
      }
    }
    Retry listAgentPoolsRetry = clientProperties.getListAgentPoolsRetry();
    if (listAgentPoolsRetry != null) {
      RetrySettings listAgentPoolsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listAgentPoolsSettings().getRetrySettings(),
              listAgentPoolsRetry);
      clientSettingsBuilder.listAgentPoolsSettings().setRetrySettings(listAgentPoolsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listAgentPools from properties.");
      }
    }
    Retry deleteAgentPoolRetry = clientProperties.getDeleteAgentPoolRetry();
    if (deleteAgentPoolRetry != null) {
      RetrySettings deleteAgentPoolRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteAgentPoolSettings().getRetrySettings(),
              deleteAgentPoolRetry);
      clientSettingsBuilder
          .deleteAgentPoolSettings()
          .setRetrySettings(deleteAgentPoolRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for deleteAgentPool from properties.");
      }
    }
    return clientSettingsBuilder.build();
  }

  /**
   * Provides a StorageTransferServiceClient bean configured with StorageTransferServiceSettings.
   *
   * @param storageTransferServiceSettings settings to configure an instance of client bean.
   * @return a {@link StorageTransferServiceClient} bean configured with {@link
   *     StorageTransferServiceSettings}
   */
  @Bean
  @ConditionalOnMissingBean
  public StorageTransferServiceClient storageTransferServiceClient(
      StorageTransferServiceSettings storageTransferServiceSettings) throws IOException {
    return StorageTransferServiceClient.create(storageTransferServiceSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-storage-transfer-service";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
