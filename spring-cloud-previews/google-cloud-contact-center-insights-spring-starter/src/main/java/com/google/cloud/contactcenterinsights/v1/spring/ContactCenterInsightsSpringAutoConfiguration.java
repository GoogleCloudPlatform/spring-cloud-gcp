/*
 * Copyright 2024 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.contactcenterinsights.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.contactcenterinsights.v1.ContactCenterInsightsClient;
import com.google.cloud.contactcenterinsights.v1.ContactCenterInsightsSettings;
import com.google.cloud.spring.autoconfigure.core.GcpContextAutoConfiguration;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.core.Retry;
import com.google.cloud.spring.core.util.RetryUtil;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.AutoConfigureAfter;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link ContactCenterInsightsClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@AutoConfigureAfter(GcpContextAutoConfiguration.class)
@ConditionalOnClass(ContactCenterInsightsClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.contactcenterinsights.v1.contact-center-insights.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties(ContactCenterInsightsSpringProperties.class)
public class ContactCenterInsightsSpringAutoConfiguration {
  private final ContactCenterInsightsSpringProperties clientProperties;
  private final CredentialsProvider credentialsProvider;
  private static final Log LOGGER =
      LogFactory.getLog(ContactCenterInsightsSpringAutoConfiguration.class);

  protected ContactCenterInsightsSpringAutoConfiguration(
      ContactCenterInsightsSpringProperties clientProperties,
      CredentialsProvider credentialsProvider)
      throws IOException {
    this.clientProperties = clientProperties;
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from ContactCenterInsights-specific configuration");
      }
      this.credentialsProvider =
          ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    } else {
      this.credentialsProvider = credentialsProvider;
    }
  }

  /**
   * Provides a default transport channel provider bean, corresponding to the client library's
   * default transport channel provider. If the library supports both GRPC and REST transport, and
   * the useRest property is configured, the HTTP/JSON transport provider will be used instead of
   * GRPC.
   *
   * @return a default transport channel provider.
   */
  @Bean
  @ConditionalOnMissingBean(name = "defaultContactCenterInsightsTransportChannelProvider")
  public TransportChannelProvider defaultContactCenterInsightsTransportChannelProvider() {
    if (this.clientProperties.getUseRest()) {
      return ContactCenterInsightsSettings.defaultHttpJsonTransportProviderBuilder().build();
    }
    return ContactCenterInsightsSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a ContactCenterInsightsSettings bean configured to use a DefaultCredentialsProvider
   * and the client library's default transport channel provider
   * (defaultContactCenterInsightsTransportChannelProvider()). It also configures the quota project
   * ID and executor thread count, if provided through properties.
   *
   * <p>Retry settings are also configured from service-level and method-level properties specified
   * in ContactCenterInsightsSpringProperties. Method-level properties will take precedence over
   * service-level properties if available, and client library defaults will be used if neither are
   * specified.
   *
   * @param defaultTransportChannelProvider TransportChannelProvider to use in the settings.
   * @return a {@link ContactCenterInsightsSettings} bean configured with {@link
   *     TransportChannelProvider} bean.
   */
  @Bean
  @ConditionalOnMissingBean
  public ContactCenterInsightsSettings contactCenterInsightsSettings(
      @Qualifier("defaultContactCenterInsightsTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    ContactCenterInsightsSettings.Builder clientSettingsBuilder;
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder = ContactCenterInsightsSettings.newHttpJsonBuilder();
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using REST (HTTP/JSON) transport.");
      }
    } else {
      clientSettingsBuilder = ContactCenterInsightsSettings.newBuilder();
    }
    clientSettingsBuilder
        .setCredentialsProvider(this.credentialsProvider)
        .setTransportChannelProvider(defaultTransportChannelProvider)
        .setEndpoint(ContactCenterInsightsSettings.getDefaultEndpoint())
        .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          ContactCenterInsightsSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    Retry serviceRetry = clientProperties.getRetry();
    if (serviceRetry != null) {
      RetrySettings createConversationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createConversationSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .createConversationSettings()
          .setRetrySettings(createConversationRetrySettings);

      RetrySettings updateConversationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateConversationSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .updateConversationSettings()
          .setRetrySettings(updateConversationRetrySettings);

      RetrySettings getConversationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getConversationSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .getConversationSettings()
          .setRetrySettings(getConversationRetrySettings);

      RetrySettings listConversationsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listConversationsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .listConversationsSettings()
          .setRetrySettings(listConversationsRetrySettings);

      RetrySettings deleteConversationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteConversationSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .deleteConversationSettings()
          .setRetrySettings(deleteConversationRetrySettings);

      RetrySettings getAnalysisRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getAnalysisSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getAnalysisSettings().setRetrySettings(getAnalysisRetrySettings);

      RetrySettings listAnalysesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listAnalysesSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.listAnalysesSettings().setRetrySettings(listAnalysesRetrySettings);

      RetrySettings deleteAnalysisRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteAnalysisSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.deleteAnalysisSettings().setRetrySettings(deleteAnalysisRetrySettings);

      RetrySettings updateIssueModelRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateIssueModelSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .updateIssueModelSettings()
          .setRetrySettings(updateIssueModelRetrySettings);

      RetrySettings getIssueModelRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getIssueModelSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getIssueModelSettings().setRetrySettings(getIssueModelRetrySettings);

      RetrySettings listIssueModelsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listIssueModelsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .listIssueModelsSettings()
          .setRetrySettings(listIssueModelsRetrySettings);

      RetrySettings getIssueRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getIssueSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getIssueSettings().setRetrySettings(getIssueRetrySettings);

      RetrySettings listIssuesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listIssuesSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.listIssuesSettings().setRetrySettings(listIssuesRetrySettings);

      RetrySettings updateIssueRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateIssueSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.updateIssueSettings().setRetrySettings(updateIssueRetrySettings);

      RetrySettings deleteIssueRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteIssueSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.deleteIssueSettings().setRetrySettings(deleteIssueRetrySettings);

      RetrySettings calculateIssueModelStatsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.calculateIssueModelStatsSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .calculateIssueModelStatsSettings()
          .setRetrySettings(calculateIssueModelStatsRetrySettings);

      RetrySettings createPhraseMatcherRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createPhraseMatcherSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .createPhraseMatcherSettings()
          .setRetrySettings(createPhraseMatcherRetrySettings);

      RetrySettings getPhraseMatcherRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getPhraseMatcherSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .getPhraseMatcherSettings()
          .setRetrySettings(getPhraseMatcherRetrySettings);

      RetrySettings listPhraseMatchersRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listPhraseMatchersSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .listPhraseMatchersSettings()
          .setRetrySettings(listPhraseMatchersRetrySettings);

      RetrySettings deletePhraseMatcherRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deletePhraseMatcherSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .deletePhraseMatcherSettings()
          .setRetrySettings(deletePhraseMatcherRetrySettings);

      RetrySettings updatePhraseMatcherRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updatePhraseMatcherSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .updatePhraseMatcherSettings()
          .setRetrySettings(updatePhraseMatcherRetrySettings);

      RetrySettings calculateStatsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.calculateStatsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.calculateStatsSettings().setRetrySettings(calculateStatsRetrySettings);

      RetrySettings getSettingsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getSettingsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getSettingsSettings().setRetrySettings(getSettingsRetrySettings);

      RetrySettings updateSettingsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateSettingsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.updateSettingsSettings().setRetrySettings(updateSettingsRetrySettings);

      RetrySettings createAnalysisRuleRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createAnalysisRuleSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .createAnalysisRuleSettings()
          .setRetrySettings(createAnalysisRuleRetrySettings);

      RetrySettings getAnalysisRuleRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getAnalysisRuleSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .getAnalysisRuleSettings()
          .setRetrySettings(getAnalysisRuleRetrySettings);

      RetrySettings listAnalysisRulesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listAnalysisRulesSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .listAnalysisRulesSettings()
          .setRetrySettings(listAnalysisRulesRetrySettings);

      RetrySettings updateAnalysisRuleRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateAnalysisRuleSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .updateAnalysisRuleSettings()
          .setRetrySettings(updateAnalysisRuleRetrySettings);

      RetrySettings deleteAnalysisRuleRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteAnalysisRuleSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .deleteAnalysisRuleSettings()
          .setRetrySettings(deleteAnalysisRuleRetrySettings);

      RetrySettings getEncryptionSpecRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getEncryptionSpecSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .getEncryptionSpecSettings()
          .setRetrySettings(getEncryptionSpecRetrySettings);

      RetrySettings createViewRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createViewSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.createViewSettings().setRetrySettings(createViewRetrySettings);

      RetrySettings getViewRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getViewSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getViewSettings().setRetrySettings(getViewRetrySettings);

      RetrySettings listViewsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listViewsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.listViewsSettings().setRetrySettings(listViewsRetrySettings);

      RetrySettings updateViewRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateViewSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.updateViewSettings().setRetrySettings(updateViewRetrySettings);

      RetrySettings deleteViewRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteViewSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.deleteViewSettings().setRetrySettings(deleteViewRetrySettings);

      RetrySettings createQaQuestionRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createQaQuestionSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .createQaQuestionSettings()
          .setRetrySettings(createQaQuestionRetrySettings);

      RetrySettings getQaQuestionRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getQaQuestionSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getQaQuestionSettings().setRetrySettings(getQaQuestionRetrySettings);

      RetrySettings updateQaQuestionRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateQaQuestionSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .updateQaQuestionSettings()
          .setRetrySettings(updateQaQuestionRetrySettings);

      RetrySettings deleteQaQuestionRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteQaQuestionSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .deleteQaQuestionSettings()
          .setRetrySettings(deleteQaQuestionRetrySettings);

      RetrySettings listQaQuestionsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listQaQuestionsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .listQaQuestionsSettings()
          .setRetrySettings(listQaQuestionsRetrySettings);

      RetrySettings createQaScorecardRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createQaScorecardSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .createQaScorecardSettings()
          .setRetrySettings(createQaScorecardRetrySettings);

      RetrySettings getQaScorecardRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getQaScorecardSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getQaScorecardSettings().setRetrySettings(getQaScorecardRetrySettings);

      RetrySettings updateQaScorecardRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateQaScorecardSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .updateQaScorecardSettings()
          .setRetrySettings(updateQaScorecardRetrySettings);

      RetrySettings deleteQaScorecardRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteQaScorecardSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .deleteQaScorecardSettings()
          .setRetrySettings(deleteQaScorecardRetrySettings);

      RetrySettings listQaScorecardsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listQaScorecardsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .listQaScorecardsSettings()
          .setRetrySettings(listQaScorecardsRetrySettings);

      RetrySettings createQaScorecardRevisionRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createQaScorecardRevisionSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .createQaScorecardRevisionSettings()
          .setRetrySettings(createQaScorecardRevisionRetrySettings);

      RetrySettings getQaScorecardRevisionRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getQaScorecardRevisionSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .getQaScorecardRevisionSettings()
          .setRetrySettings(getQaScorecardRevisionRetrySettings);

      RetrySettings deployQaScorecardRevisionRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deployQaScorecardRevisionSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .deployQaScorecardRevisionSettings()
          .setRetrySettings(deployQaScorecardRevisionRetrySettings);

      RetrySettings undeployQaScorecardRevisionRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.undeployQaScorecardRevisionSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .undeployQaScorecardRevisionSettings()
          .setRetrySettings(undeployQaScorecardRevisionRetrySettings);

      RetrySettings deleteQaScorecardRevisionRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteQaScorecardRevisionSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .deleteQaScorecardRevisionSettings()
          .setRetrySettings(deleteQaScorecardRevisionRetrySettings);

      RetrySettings listQaScorecardRevisionsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listQaScorecardRevisionsSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .listQaScorecardRevisionsSettings()
          .setRetrySettings(listQaScorecardRevisionsRetrySettings);

      RetrySettings createFeedbackLabelRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createFeedbackLabelSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .createFeedbackLabelSettings()
          .setRetrySettings(createFeedbackLabelRetrySettings);

      RetrySettings listFeedbackLabelsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listFeedbackLabelsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .listFeedbackLabelsSettings()
          .setRetrySettings(listFeedbackLabelsRetrySettings);

      RetrySettings getFeedbackLabelRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getFeedbackLabelSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .getFeedbackLabelSettings()
          .setRetrySettings(getFeedbackLabelRetrySettings);

      RetrySettings updateFeedbackLabelRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateFeedbackLabelSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .updateFeedbackLabelSettings()
          .setRetrySettings(updateFeedbackLabelRetrySettings);

      RetrySettings deleteFeedbackLabelRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteFeedbackLabelSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .deleteFeedbackLabelSettings()
          .setRetrySettings(deleteFeedbackLabelRetrySettings);

      RetrySettings listAllFeedbackLabelsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listAllFeedbackLabelsSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .listAllFeedbackLabelsSettings()
          .setRetrySettings(listAllFeedbackLabelsRetrySettings);

      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured service-level retry settings from properties.");
      }
    }
    Retry createConversationRetry = clientProperties.getCreateConversationRetry();
    if (createConversationRetry != null) {
      RetrySettings createConversationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createConversationSettings().getRetrySettings(),
              createConversationRetry);
      clientSettingsBuilder
          .createConversationSettings()
          .setRetrySettings(createConversationRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for createConversation from properties.");
      }
    }
    Retry updateConversationRetry = clientProperties.getUpdateConversationRetry();
    if (updateConversationRetry != null) {
      RetrySettings updateConversationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateConversationSettings().getRetrySettings(),
              updateConversationRetry);
      clientSettingsBuilder
          .updateConversationSettings()
          .setRetrySettings(updateConversationRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for updateConversation from properties.");
      }
    }
    Retry getConversationRetry = clientProperties.getGetConversationRetry();
    if (getConversationRetry != null) {
      RetrySettings getConversationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getConversationSettings().getRetrySettings(),
              getConversationRetry);
      clientSettingsBuilder
          .getConversationSettings()
          .setRetrySettings(getConversationRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getConversation from properties.");
      }
    }
    Retry listConversationsRetry = clientProperties.getListConversationsRetry();
    if (listConversationsRetry != null) {
      RetrySettings listConversationsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listConversationsSettings().getRetrySettings(),
              listConversationsRetry);
      clientSettingsBuilder
          .listConversationsSettings()
          .setRetrySettings(listConversationsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listConversations from properties.");
      }
    }
    Retry deleteConversationRetry = clientProperties.getDeleteConversationRetry();
    if (deleteConversationRetry != null) {
      RetrySettings deleteConversationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteConversationSettings().getRetrySettings(),
              deleteConversationRetry);
      clientSettingsBuilder
          .deleteConversationSettings()
          .setRetrySettings(deleteConversationRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for deleteConversation from properties.");
      }
    }
    Retry getAnalysisRetry = clientProperties.getGetAnalysisRetry();
    if (getAnalysisRetry != null) {
      RetrySettings getAnalysisRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getAnalysisSettings().getRetrySettings(), getAnalysisRetry);
      clientSettingsBuilder.getAnalysisSettings().setRetrySettings(getAnalysisRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getAnalysis from properties.");
      }
    }
    Retry listAnalysesRetry = clientProperties.getListAnalysesRetry();
    if (listAnalysesRetry != null) {
      RetrySettings listAnalysesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listAnalysesSettings().getRetrySettings(), listAnalysesRetry);
      clientSettingsBuilder.listAnalysesSettings().setRetrySettings(listAnalysesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listAnalyses from properties.");
      }
    }
    Retry deleteAnalysisRetry = clientProperties.getDeleteAnalysisRetry();
    if (deleteAnalysisRetry != null) {
      RetrySettings deleteAnalysisRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteAnalysisSettings().getRetrySettings(),
              deleteAnalysisRetry);
      clientSettingsBuilder.deleteAnalysisSettings().setRetrySettings(deleteAnalysisRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for deleteAnalysis from properties.");
      }
    }
    Retry updateIssueModelRetry = clientProperties.getUpdateIssueModelRetry();
    if (updateIssueModelRetry != null) {
      RetrySettings updateIssueModelRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateIssueModelSettings().getRetrySettings(),
              updateIssueModelRetry);
      clientSettingsBuilder
          .updateIssueModelSettings()
          .setRetrySettings(updateIssueModelRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for updateIssueModel from properties.");
      }
    }
    Retry getIssueModelRetry = clientProperties.getGetIssueModelRetry();
    if (getIssueModelRetry != null) {
      RetrySettings getIssueModelRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getIssueModelSettings().getRetrySettings(), getIssueModelRetry);
      clientSettingsBuilder.getIssueModelSettings().setRetrySettings(getIssueModelRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getIssueModel from properties.");
      }
    }
    Retry listIssueModelsRetry = clientProperties.getListIssueModelsRetry();
    if (listIssueModelsRetry != null) {
      RetrySettings listIssueModelsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listIssueModelsSettings().getRetrySettings(),
              listIssueModelsRetry);
      clientSettingsBuilder
          .listIssueModelsSettings()
          .setRetrySettings(listIssueModelsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listIssueModels from properties.");
      }
    }
    Retry getIssueRetry = clientProperties.getGetIssueRetry();
    if (getIssueRetry != null) {
      RetrySettings getIssueRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getIssueSettings().getRetrySettings(), getIssueRetry);
      clientSettingsBuilder.getIssueSettings().setRetrySettings(getIssueRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getIssue from properties.");
      }
    }
    Retry listIssuesRetry = clientProperties.getListIssuesRetry();
    if (listIssuesRetry != null) {
      RetrySettings listIssuesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listIssuesSettings().getRetrySettings(), listIssuesRetry);
      clientSettingsBuilder.listIssuesSettings().setRetrySettings(listIssuesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listIssues from properties.");
      }
    }
    Retry updateIssueRetry = clientProperties.getUpdateIssueRetry();
    if (updateIssueRetry != null) {
      RetrySettings updateIssueRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateIssueSettings().getRetrySettings(), updateIssueRetry);
      clientSettingsBuilder.updateIssueSettings().setRetrySettings(updateIssueRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for updateIssue from properties.");
      }
    }
    Retry deleteIssueRetry = clientProperties.getDeleteIssueRetry();
    if (deleteIssueRetry != null) {
      RetrySettings deleteIssueRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteIssueSettings().getRetrySettings(), deleteIssueRetry);
      clientSettingsBuilder.deleteIssueSettings().setRetrySettings(deleteIssueRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for deleteIssue from properties.");
      }
    }
    Retry calculateIssueModelStatsRetry = clientProperties.getCalculateIssueModelStatsRetry();
    if (calculateIssueModelStatsRetry != null) {
      RetrySettings calculateIssueModelStatsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.calculateIssueModelStatsSettings().getRetrySettings(),
              calculateIssueModelStatsRetry);
      clientSettingsBuilder
          .calculateIssueModelStatsSettings()
          .setRetrySettings(calculateIssueModelStatsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for calculateIssueModelStats from properties.");
      }
    }
    Retry createPhraseMatcherRetry = clientProperties.getCreatePhraseMatcherRetry();
    if (createPhraseMatcherRetry != null) {
      RetrySettings createPhraseMatcherRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createPhraseMatcherSettings().getRetrySettings(),
              createPhraseMatcherRetry);
      clientSettingsBuilder
          .createPhraseMatcherSettings()
          .setRetrySettings(createPhraseMatcherRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for createPhraseMatcher from properties.");
      }
    }
    Retry getPhraseMatcherRetry = clientProperties.getGetPhraseMatcherRetry();
    if (getPhraseMatcherRetry != null) {
      RetrySettings getPhraseMatcherRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getPhraseMatcherSettings().getRetrySettings(),
              getPhraseMatcherRetry);
      clientSettingsBuilder
          .getPhraseMatcherSettings()
          .setRetrySettings(getPhraseMatcherRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for getPhraseMatcher from properties.");
      }
    }
    Retry listPhraseMatchersRetry = clientProperties.getListPhraseMatchersRetry();
    if (listPhraseMatchersRetry != null) {
      RetrySettings listPhraseMatchersRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listPhraseMatchersSettings().getRetrySettings(),
              listPhraseMatchersRetry);
      clientSettingsBuilder
          .listPhraseMatchersSettings()
          .setRetrySettings(listPhraseMatchersRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listPhraseMatchers from properties.");
      }
    }
    Retry deletePhraseMatcherRetry = clientProperties.getDeletePhraseMatcherRetry();
    if (deletePhraseMatcherRetry != null) {
      RetrySettings deletePhraseMatcherRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deletePhraseMatcherSettings().getRetrySettings(),
              deletePhraseMatcherRetry);
      clientSettingsBuilder
          .deletePhraseMatcherSettings()
          .setRetrySettings(deletePhraseMatcherRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for deletePhraseMatcher from properties.");
      }
    }
    Retry updatePhraseMatcherRetry = clientProperties.getUpdatePhraseMatcherRetry();
    if (updatePhraseMatcherRetry != null) {
      RetrySettings updatePhraseMatcherRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updatePhraseMatcherSettings().getRetrySettings(),
              updatePhraseMatcherRetry);
      clientSettingsBuilder
          .updatePhraseMatcherSettings()
          .setRetrySettings(updatePhraseMatcherRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for updatePhraseMatcher from properties.");
      }
    }
    Retry calculateStatsRetry = clientProperties.getCalculateStatsRetry();
    if (calculateStatsRetry != null) {
      RetrySettings calculateStatsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.calculateStatsSettings().getRetrySettings(),
              calculateStatsRetry);
      clientSettingsBuilder.calculateStatsSettings().setRetrySettings(calculateStatsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for calculateStats from properties.");
      }
    }
    Retry getSettingsRetry = clientProperties.getGetSettingsRetry();
    if (getSettingsRetry != null) {
      RetrySettings getSettingsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getSettingsSettings().getRetrySettings(), getSettingsRetry);
      clientSettingsBuilder.getSettingsSettings().setRetrySettings(getSettingsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getSettings from properties.");
      }
    }
    Retry updateSettingsRetry = clientProperties.getUpdateSettingsRetry();
    if (updateSettingsRetry != null) {
      RetrySettings updateSettingsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateSettingsSettings().getRetrySettings(),
              updateSettingsRetry);
      clientSettingsBuilder.updateSettingsSettings().setRetrySettings(updateSettingsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for updateSettings from properties.");
      }
    }
    Retry createAnalysisRuleRetry = clientProperties.getCreateAnalysisRuleRetry();
    if (createAnalysisRuleRetry != null) {
      RetrySettings createAnalysisRuleRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createAnalysisRuleSettings().getRetrySettings(),
              createAnalysisRuleRetry);
      clientSettingsBuilder
          .createAnalysisRuleSettings()
          .setRetrySettings(createAnalysisRuleRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for createAnalysisRule from properties.");
      }
    }
    Retry getAnalysisRuleRetry = clientProperties.getGetAnalysisRuleRetry();
    if (getAnalysisRuleRetry != null) {
      RetrySettings getAnalysisRuleRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getAnalysisRuleSettings().getRetrySettings(),
              getAnalysisRuleRetry);
      clientSettingsBuilder
          .getAnalysisRuleSettings()
          .setRetrySettings(getAnalysisRuleRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getAnalysisRule from properties.");
      }
    }
    Retry listAnalysisRulesRetry = clientProperties.getListAnalysisRulesRetry();
    if (listAnalysisRulesRetry != null) {
      RetrySettings listAnalysisRulesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listAnalysisRulesSettings().getRetrySettings(),
              listAnalysisRulesRetry);
      clientSettingsBuilder
          .listAnalysisRulesSettings()
          .setRetrySettings(listAnalysisRulesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listAnalysisRules from properties.");
      }
    }
    Retry updateAnalysisRuleRetry = clientProperties.getUpdateAnalysisRuleRetry();
    if (updateAnalysisRuleRetry != null) {
      RetrySettings updateAnalysisRuleRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateAnalysisRuleSettings().getRetrySettings(),
              updateAnalysisRuleRetry);
      clientSettingsBuilder
          .updateAnalysisRuleSettings()
          .setRetrySettings(updateAnalysisRuleRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for updateAnalysisRule from properties.");
      }
    }
    Retry deleteAnalysisRuleRetry = clientProperties.getDeleteAnalysisRuleRetry();
    if (deleteAnalysisRuleRetry != null) {
      RetrySettings deleteAnalysisRuleRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteAnalysisRuleSettings().getRetrySettings(),
              deleteAnalysisRuleRetry);
      clientSettingsBuilder
          .deleteAnalysisRuleSettings()
          .setRetrySettings(deleteAnalysisRuleRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for deleteAnalysisRule from properties.");
      }
    }
    Retry getEncryptionSpecRetry = clientProperties.getGetEncryptionSpecRetry();
    if (getEncryptionSpecRetry != null) {
      RetrySettings getEncryptionSpecRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getEncryptionSpecSettings().getRetrySettings(),
              getEncryptionSpecRetry);
      clientSettingsBuilder
          .getEncryptionSpecSettings()
          .setRetrySettings(getEncryptionSpecRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for getEncryptionSpec from properties.");
      }
    }
    Retry createViewRetry = clientProperties.getCreateViewRetry();
    if (createViewRetry != null) {
      RetrySettings createViewRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createViewSettings().getRetrySettings(), createViewRetry);
      clientSettingsBuilder.createViewSettings().setRetrySettings(createViewRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for createView from properties.");
      }
    }
    Retry getViewRetry = clientProperties.getGetViewRetry();
    if (getViewRetry != null) {
      RetrySettings getViewRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getViewSettings().getRetrySettings(), getViewRetry);
      clientSettingsBuilder.getViewSettings().setRetrySettings(getViewRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getView from properties.");
      }
    }
    Retry listViewsRetry = clientProperties.getListViewsRetry();
    if (listViewsRetry != null) {
      RetrySettings listViewsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listViewsSettings().getRetrySettings(), listViewsRetry);
      clientSettingsBuilder.listViewsSettings().setRetrySettings(listViewsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listViews from properties.");
      }
    }
    Retry updateViewRetry = clientProperties.getUpdateViewRetry();
    if (updateViewRetry != null) {
      RetrySettings updateViewRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateViewSettings().getRetrySettings(), updateViewRetry);
      clientSettingsBuilder.updateViewSettings().setRetrySettings(updateViewRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for updateView from properties.");
      }
    }
    Retry deleteViewRetry = clientProperties.getDeleteViewRetry();
    if (deleteViewRetry != null) {
      RetrySettings deleteViewRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteViewSettings().getRetrySettings(), deleteViewRetry);
      clientSettingsBuilder.deleteViewSettings().setRetrySettings(deleteViewRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for deleteView from properties.");
      }
    }
    Retry createQaQuestionRetry = clientProperties.getCreateQaQuestionRetry();
    if (createQaQuestionRetry != null) {
      RetrySettings createQaQuestionRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createQaQuestionSettings().getRetrySettings(),
              createQaQuestionRetry);
      clientSettingsBuilder
          .createQaQuestionSettings()
          .setRetrySettings(createQaQuestionRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for createQaQuestion from properties.");
      }
    }
    Retry getQaQuestionRetry = clientProperties.getGetQaQuestionRetry();
    if (getQaQuestionRetry != null) {
      RetrySettings getQaQuestionRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getQaQuestionSettings().getRetrySettings(), getQaQuestionRetry);
      clientSettingsBuilder.getQaQuestionSettings().setRetrySettings(getQaQuestionRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getQaQuestion from properties.");
      }
    }
    Retry updateQaQuestionRetry = clientProperties.getUpdateQaQuestionRetry();
    if (updateQaQuestionRetry != null) {
      RetrySettings updateQaQuestionRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateQaQuestionSettings().getRetrySettings(),
              updateQaQuestionRetry);
      clientSettingsBuilder
          .updateQaQuestionSettings()
          .setRetrySettings(updateQaQuestionRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for updateQaQuestion from properties.");
      }
    }
    Retry deleteQaQuestionRetry = clientProperties.getDeleteQaQuestionRetry();
    if (deleteQaQuestionRetry != null) {
      RetrySettings deleteQaQuestionRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteQaQuestionSettings().getRetrySettings(),
              deleteQaQuestionRetry);
      clientSettingsBuilder
          .deleteQaQuestionSettings()
          .setRetrySettings(deleteQaQuestionRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for deleteQaQuestion from properties.");
      }
    }
    Retry listQaQuestionsRetry = clientProperties.getListQaQuestionsRetry();
    if (listQaQuestionsRetry != null) {
      RetrySettings listQaQuestionsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listQaQuestionsSettings().getRetrySettings(),
              listQaQuestionsRetry);
      clientSettingsBuilder
          .listQaQuestionsSettings()
          .setRetrySettings(listQaQuestionsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listQaQuestions from properties.");
      }
    }
    Retry createQaScorecardRetry = clientProperties.getCreateQaScorecardRetry();
    if (createQaScorecardRetry != null) {
      RetrySettings createQaScorecardRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createQaScorecardSettings().getRetrySettings(),
              createQaScorecardRetry);
      clientSettingsBuilder
          .createQaScorecardSettings()
          .setRetrySettings(createQaScorecardRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for createQaScorecard from properties.");
      }
    }
    Retry getQaScorecardRetry = clientProperties.getGetQaScorecardRetry();
    if (getQaScorecardRetry != null) {
      RetrySettings getQaScorecardRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getQaScorecardSettings().getRetrySettings(),
              getQaScorecardRetry);
      clientSettingsBuilder.getQaScorecardSettings().setRetrySettings(getQaScorecardRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getQaScorecard from properties.");
      }
    }
    Retry updateQaScorecardRetry = clientProperties.getUpdateQaScorecardRetry();
    if (updateQaScorecardRetry != null) {
      RetrySettings updateQaScorecardRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateQaScorecardSettings().getRetrySettings(),
              updateQaScorecardRetry);
      clientSettingsBuilder
          .updateQaScorecardSettings()
          .setRetrySettings(updateQaScorecardRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for updateQaScorecard from properties.");
      }
    }
    Retry deleteQaScorecardRetry = clientProperties.getDeleteQaScorecardRetry();
    if (deleteQaScorecardRetry != null) {
      RetrySettings deleteQaScorecardRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteQaScorecardSettings().getRetrySettings(),
              deleteQaScorecardRetry);
      clientSettingsBuilder
          .deleteQaScorecardSettings()
          .setRetrySettings(deleteQaScorecardRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for deleteQaScorecard from properties.");
      }
    }
    Retry listQaScorecardsRetry = clientProperties.getListQaScorecardsRetry();
    if (listQaScorecardsRetry != null) {
      RetrySettings listQaScorecardsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listQaScorecardsSettings().getRetrySettings(),
              listQaScorecardsRetry);
      clientSettingsBuilder
          .listQaScorecardsSettings()
          .setRetrySettings(listQaScorecardsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listQaScorecards from properties.");
      }
    }
    Retry createQaScorecardRevisionRetry = clientProperties.getCreateQaScorecardRevisionRetry();
    if (createQaScorecardRevisionRetry != null) {
      RetrySettings createQaScorecardRevisionRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createQaScorecardRevisionSettings().getRetrySettings(),
              createQaScorecardRevisionRetry);
      clientSettingsBuilder
          .createQaScorecardRevisionSettings()
          .setRetrySettings(createQaScorecardRevisionRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for createQaScorecardRevision from properties.");
      }
    }
    Retry getQaScorecardRevisionRetry = clientProperties.getGetQaScorecardRevisionRetry();
    if (getQaScorecardRevisionRetry != null) {
      RetrySettings getQaScorecardRevisionRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getQaScorecardRevisionSettings().getRetrySettings(),
              getQaScorecardRevisionRetry);
      clientSettingsBuilder
          .getQaScorecardRevisionSettings()
          .setRetrySettings(getQaScorecardRevisionRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for getQaScorecardRevision from properties.");
      }
    }
    Retry deployQaScorecardRevisionRetry = clientProperties.getDeployQaScorecardRevisionRetry();
    if (deployQaScorecardRevisionRetry != null) {
      RetrySettings deployQaScorecardRevisionRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deployQaScorecardRevisionSettings().getRetrySettings(),
              deployQaScorecardRevisionRetry);
      clientSettingsBuilder
          .deployQaScorecardRevisionSettings()
          .setRetrySettings(deployQaScorecardRevisionRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for deployQaScorecardRevision from properties.");
      }
    }
    Retry undeployQaScorecardRevisionRetry = clientProperties.getUndeployQaScorecardRevisionRetry();
    if (undeployQaScorecardRevisionRetry != null) {
      RetrySettings undeployQaScorecardRevisionRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.undeployQaScorecardRevisionSettings().getRetrySettings(),
              undeployQaScorecardRevisionRetry);
      clientSettingsBuilder
          .undeployQaScorecardRevisionSettings()
          .setRetrySettings(undeployQaScorecardRevisionRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for undeployQaScorecardRevision from properties.");
      }
    }
    Retry deleteQaScorecardRevisionRetry = clientProperties.getDeleteQaScorecardRevisionRetry();
    if (deleteQaScorecardRevisionRetry != null) {
      RetrySettings deleteQaScorecardRevisionRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteQaScorecardRevisionSettings().getRetrySettings(),
              deleteQaScorecardRevisionRetry);
      clientSettingsBuilder
          .deleteQaScorecardRevisionSettings()
          .setRetrySettings(deleteQaScorecardRevisionRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for deleteQaScorecardRevision from properties.");
      }
    }
    Retry listQaScorecardRevisionsRetry = clientProperties.getListQaScorecardRevisionsRetry();
    if (listQaScorecardRevisionsRetry != null) {
      RetrySettings listQaScorecardRevisionsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listQaScorecardRevisionsSettings().getRetrySettings(),
              listQaScorecardRevisionsRetry);
      clientSettingsBuilder
          .listQaScorecardRevisionsSettings()
          .setRetrySettings(listQaScorecardRevisionsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listQaScorecardRevisions from properties.");
      }
    }
    Retry createFeedbackLabelRetry = clientProperties.getCreateFeedbackLabelRetry();
    if (createFeedbackLabelRetry != null) {
      RetrySettings createFeedbackLabelRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createFeedbackLabelSettings().getRetrySettings(),
              createFeedbackLabelRetry);
      clientSettingsBuilder
          .createFeedbackLabelSettings()
          .setRetrySettings(createFeedbackLabelRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for createFeedbackLabel from properties.");
      }
    }
    Retry listFeedbackLabelsRetry = clientProperties.getListFeedbackLabelsRetry();
    if (listFeedbackLabelsRetry != null) {
      RetrySettings listFeedbackLabelsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listFeedbackLabelsSettings().getRetrySettings(),
              listFeedbackLabelsRetry);
      clientSettingsBuilder
          .listFeedbackLabelsSettings()
          .setRetrySettings(listFeedbackLabelsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listFeedbackLabels from properties.");
      }
    }
    Retry getFeedbackLabelRetry = clientProperties.getGetFeedbackLabelRetry();
    if (getFeedbackLabelRetry != null) {
      RetrySettings getFeedbackLabelRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getFeedbackLabelSettings().getRetrySettings(),
              getFeedbackLabelRetry);
      clientSettingsBuilder
          .getFeedbackLabelSettings()
          .setRetrySettings(getFeedbackLabelRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for getFeedbackLabel from properties.");
      }
    }
    Retry updateFeedbackLabelRetry = clientProperties.getUpdateFeedbackLabelRetry();
    if (updateFeedbackLabelRetry != null) {
      RetrySettings updateFeedbackLabelRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateFeedbackLabelSettings().getRetrySettings(),
              updateFeedbackLabelRetry);
      clientSettingsBuilder
          .updateFeedbackLabelSettings()
          .setRetrySettings(updateFeedbackLabelRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for updateFeedbackLabel from properties.");
      }
    }
    Retry deleteFeedbackLabelRetry = clientProperties.getDeleteFeedbackLabelRetry();
    if (deleteFeedbackLabelRetry != null) {
      RetrySettings deleteFeedbackLabelRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteFeedbackLabelSettings().getRetrySettings(),
              deleteFeedbackLabelRetry);
      clientSettingsBuilder
          .deleteFeedbackLabelSettings()
          .setRetrySettings(deleteFeedbackLabelRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for deleteFeedbackLabel from properties.");
      }
    }
    Retry listAllFeedbackLabelsRetry = clientProperties.getListAllFeedbackLabelsRetry();
    if (listAllFeedbackLabelsRetry != null) {
      RetrySettings listAllFeedbackLabelsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listAllFeedbackLabelsSettings().getRetrySettings(),
              listAllFeedbackLabelsRetry);
      clientSettingsBuilder
          .listAllFeedbackLabelsSettings()
          .setRetrySettings(listAllFeedbackLabelsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listAllFeedbackLabels from properties.");
      }
    }
    return clientSettingsBuilder.build();
  }

  /**
   * Provides a ContactCenterInsightsClient bean configured with ContactCenterInsightsSettings.
   *
   * @param contactCenterInsightsSettings settings to configure an instance of client bean.
   * @return a {@link ContactCenterInsightsClient} bean configured with {@link
   *     ContactCenterInsightsSettings}
   */
  @Bean
  @ConditionalOnMissingBean
  public ContactCenterInsightsClient contactCenterInsightsClient(
      ContactCenterInsightsSettings contactCenterInsightsSettings) throws IOException {
    return ContactCenterInsightsClient.create(contactCenterInsightsSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-contact-center-insights";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
