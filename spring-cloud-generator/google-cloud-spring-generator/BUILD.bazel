load("@rules_java//java:defs.bzl", "java_binary", "java_proto_library")

package(default_visibility = ["//visibility:public"])

# TODO: some dependencies may be runtime only.
MAIN_DEPS = [
    ":service_config_java_proto",
    "@com_google_api_api_common//jar",
    "@com_google_api_gax_java//gax",
    "@com_google_api_gax_java//gax:gax_testlib",
    "@com_google_api_gax_java//gax-grpc:gax_grpc",
    "@com_google_api_gax_java//gax-grpc:gax_grpc_testlib",
    "@com_google_api_gax_java//gax-httpjson:gax_httpjson",
    "@com_google_api_gax_java//gax-httpjson:gax_httpjson_testlib",
    "@com_google_api_grpc_proto_google_common_protos",
    "@com_google_auto_value_auto_value_annotations//jar", # Ideally should be compile-time only, but this is OK.
    "@com_google_code_gson//jar",
    "@com_google_googleapis//gapic/metadata:metadata_java_proto",
    "@com_google_guava_guava",
    "@com_google_http_client_google_http_client//jar",
    "@com_google_protobuf//:protobuf_java",
    "@com_google_protobuf//:protobuf_java_util",
    "@google_java_format_all_deps//jar",
    "@io_grpc_grpc_java//api",
    "@io_grpc_grpc_java//protobuf",
    "@io_grpc_grpc_java//stub",
    "@javax_annotation_javax_annotation_api//jar",
    "@junit_junit//jar",
    "@org_threeten_threetenbp//jar",
    "@org_yaml_snakeyaml//jar",
]

MAIN_DEPS_DEBUG_RUNTIME_ONLY = [
    "@com_google_googleapis//google/api:api_java_proto",
    "@com_google_googleapis//google/cloud:extended_operations_java_proto",
    "@com_google_googleapis//google/longrunning:longrunning_java_proto",
    "@com_google_protobuf//java/core",
]

# Some dependencies are runtime only, but that's fine for tests.
TEST_DEPS = [
    ":test_java_protos",
    "@com_google_googleapis//google/logging/v2:logging_java_proto",
    "@com_google_googleapis//google/pubsub/v1:pubsub_java_proto",
    "@com_google_googleapis//google/rpc:rpc_java_proto",
    "@com_google_truth_truth//jar",
    "@io_github_java_diff_utils//jar",
]

SPRING_DEPS = [
    "@maven//:org_springframework_boot_spring_boot_starter",
    "@maven//:org_springframework_boot_spring_boot_autoconfigure",
    "@maven//:org_springframework_boot_spring_boot",
    "@maven//:org_springframework_spring_context",
    "@maven//:org_springframework_spring_beans",
    "@maven//:com_google_cloud_spring_cloud_gcp_autoconfigure",
    "@maven//:com_google_cloud_spring_cloud_gcp_core",
    "@maven//:commons_logging_commons_logging",
]

proto_library(
    name = "service_config_proto",
    srcs = ["src/main/proto/service_config.proto"],
    deps = [
        "@com_google_googleapis//google/rpc:code_proto",
        "@com_google_protobuf//:duration_proto",
        "@com_google_protobuf//:wrappers_proto",
        "@com_google_protobuf//:struct_proto",
    ],
)
java_proto_library(
    name = "service_config_java_proto",
    deps = [":service_config_proto"],
)

proto_library(
    name = "test_protos",
    srcs = glob(["src/test/proto/*.proto"]),
    deps = [
        "@com_google_googleapis//google/api:annotations_proto",
        "@com_google_googleapis//google/api:client_proto",
        "@com_google_googleapis//google/api:field_behavior_proto",
        "@com_google_googleapis//google/api:routing_proto",
        "@com_google_googleapis//google/api:resource_proto",
        "@com_google_googleapis//google/cloud:extended_operations_proto",
        "@com_google_googleapis//google/longrunning:operations_proto",
        "@com_google_googleapis//google/rpc:error_details_proto",
        "@com_google_googleapis//google/rpc:status_proto",
        "@com_google_protobuf//:duration_proto",
        "@com_google_protobuf//:empty_proto",
        "@com_google_protobuf//:field_mask_proto",
        "@com_google_protobuf//:timestamp_proto",
        "@com_google_protobuf//:struct_proto",
    ],
)
java_proto_library(
    name = "test_java_protos",
    deps = [
        ":test_protos",
        "@com_google_googleapis//google/cloud:common_resources_proto"
    ],
)

java_plugin(
    name = "autovalue_plugin",
    processor_class = "com.google.auto.value.processor.AutoValueProcessor",
    deps = ["@com_google_auto_value_auto_value//jar"],
)

java_library(
    name = "gapic_generator_java",
    srcs = glob(["src/main/java/**/*.java"]),
    plugins = [":autovalue_plugin"],
    deps = MAIN_DEPS + SPRING_DEPS,
)

java_library(
    name = "gapic_generator_java_test",
    srcs = glob(["src/test/java/**/*.java"]),
    deps = [":gapic_generator_java"] + MAIN_DEPS + TEST_DEPS + SPRING_DEPS,
)

java_binary(
    name = "protoc-gen-java_gapic",
    main_class = "com.google.api.generator.Main",
    runtime_deps = [":gapic_generator_java"] + MAIN_DEPS,
)

java_binary(
    name = "protoc-gen-java_gapic_spring",
    main_class = "com.google.api.generator.spring.Main",
    runtime_deps = [":gapic_generator_java"] + MAIN_DEPS + SPRING_DEPS,
)

# Request dumper binary, which dumps the CodeGeneratorRequest to a file on disk
# which will be identical to the one passed to the protoc-gen-java_gapic during
# normal execution. The dumped file then can be used to run this gapic-generator
# directly (instead of relying on protoc to start the process), which would give
# much greater flexibility in terms of debugging features, like attaching a
# debugger, easier work with stdout and stderr etc.
#
# Usage example, via the rule in a corresponding BUILD.bazel file:
#
# load("@gapic_generator_java//rules_java_gapic:java_gapic.bzl", "java_generator_request_dump")
# java_generator_request_dump(
#     name = "compute_small_request_dump",
#     srcs = [":compute_small_proto_with_info"],
#     transport = "rest",
# )
#
java_binary(
    name = "protoc-gen-code_generator_request_dumper",
    main_class = "com.google.api.generator.debug.CodeGeneratorRequestDumper",
    runtime_deps = [":gapic_generator_java"] + MAIN_DEPS + MAIN_DEPS_DEBUG_RUNTIME_ONLY,
)

# A binary similar to protoc-gen-java_gapic but reads the CodeGeneratorRequest
# directly from a file instead of relying on protoc to pipe it in.
#
# Usage example:
#
# bazel run code_generator_request_file_to_gapic_main desc-dump.bin dump.jar
#
java_binary(
    name = "code_generator_request_file_to_gapic_main",
    main_class = "com.google.api.generator.debug.CodeGeneratorRequestFileToGapicMain",
    runtime_deps = [":gapic_generator_java"] + MAIN_DEPS + MAIN_DEPS_DEBUG_RUNTIME_ONLY,
)

# another test resource
genrule(
    name = "basic_proto_descriptor",
    srcs = ["src/test/proto/basic.proto"],
    outs = ["test-proto.descriptorset"],
    cmd = "$(location @com_google_protobuf//:protoc) " +
          "--include_source_info --include_imports --descriptor_set_out=$(OUTS) $(SRCS)",
    message = "Generating proto descriptor",
    tools = ["@com_google_protobuf//:protoc"],
)

# Unit tests. Run each test with, e.g.,
# bazel test //:unit_com_google_api_generator_engine_JavaCodeGeneratorTest
[java_test(
    name = "unit_" + file[14:-5].replace('/', '_'),
    test_class = file[14:-5].replace('/', '.'),
    runtime_deps = [
        ":gapic_generator_java",
        ":gapic_generator_java_test",
    ] + MAIN_DEPS + TEST_DEPS,
    data = [":basic_proto_descriptor"] + glob([
        "src/test/java/**/*.golden",
        "src/test/resources/**",
    ]),
    tags = ["small"],
) for file in glob(["src/test/java/**/*Test.java"])]

test_suite(name = "units", tags = ["small"])

# Tests that generate and save unit golden (.golden) files.
GOLDEN_UPDATING_UNIT_TESTS = [
    "com.google.api.generator.engine.JavaCodeGeneratorTest",
    "com.google.api.generator.gapic.composer.ComposerTest",
    "com.google.api.generator.gapic.composer.common.BatchingDescriptorComposerTest",
    "com.google.api.generator.gapic.composer.grpc.GrpcServiceCallableFactoryClassComposerTest",
    "com.google.api.generator.gapic.composer.grpc.GrpcServiceStubClassComposerTest",
    "com.google.api.generator.gapic.composer.grpc.MockServiceClassComposerTest",
    "com.google.api.generator.gapic.composer.grpc.MockServiceImplClassComposerTest",
    "com.google.api.generator.gapic.composer.grpc.ServiceClientClassComposerTest",
    "com.google.api.generator.gapic.composer.grpc.ServiceClientTestClassComposerTest",
    "com.google.api.generator.gapic.composer.grpc.ServiceSettingsClassComposerTest",
    "com.google.api.generator.gapic.composer.grpc.ServiceStubClassComposerTest",
    "com.google.api.generator.gapic.composer.grpc.ServiceStubSettingsClassComposerTest",
    "com.google.api.generator.gapic.composer.grpcrest.GrpcServiceCallableFactoryClassComposerTest",
    "com.google.api.generator.gapic.composer.grpcrest.GrpcServiceStubClassComposerTest",
    "com.google.api.generator.gapic.composer.grpcrest.HttpJsonServiceCallableFactoryClassComposerTest",
    "com.google.api.generator.gapic.composer.grpcrest.HttpJsonServiceClientTestClassComposerTest",
    "com.google.api.generator.gapic.composer.grpcrest.HttpJsonServiceStubClassComposerTest",
    "com.google.api.generator.gapic.composer.grpcrest.ServiceClientClassComposerTest",
    "com.google.api.generator.gapic.composer.grpcrest.ServiceClientTestClassComposerTest",
    "com.google.api.generator.gapic.composer.grpcrest.ServiceSettingsClassComposerTest",
    "com.google.api.generator.gapic.composer.grpcrest.ServiceStubSettingsClassComposerTest",
    "com.google.api.generator.gapic.composer.resourcename.ResourceNameHelperClassComposerTest",
    "com.google.api.generator.gapic.composer.rest.HttpJsonServiceCallableFactoryClassComposerTest",
    "com.google.api.generator.gapic.composer.rest.HttpJsonServiceStubClassComposerTest",
    "com.google.api.generator.gapic.composer.rest.ServiceClientTestClassComposerTest",
    "com.google.api.generator.gapic.composer.rest.ServiceSettingsClassComposerTest",
    "com.google.api.generator.gapic.composer.rest.ServiceStubSettingsClassComposerTest",
]

# Manually runs a single JUnit test for the tests that generate and save .golden
# files. To update .golden files, run with, e.g.,
# bazel run //:update_com_google_api_generator_engine_JavaCodeGeneratorTest
[java_binary(
    name = "update_%s" % test_class.replace('.', '_'),
    main_class = "com.google.api.generator.test.framework.SingleJUnitTestRunner",
    args = [test_class],
    runtime_deps = [
        ":gapic_generator_java",
        ":gapic_generator_java_test",
    ] + MAIN_DEPS + TEST_DEPS,
    data = glob([
        "src/test/java/**/*.golden",
        "src/test/resources/**",
    ]),
) for test_class in GOLDEN_UPDATING_UNIT_TESTS]

# google-java-format
java_binary(
    name = "google_java_format_binary",
    jvm_flags = ["-Xmx512m"],
    main_class = "com.google.googlejavaformat.java.Main",
    runtime_deps = ["@google_java_format_all_deps//jar"],
)

genrule(
    name = "google_java_format",
    outs = ["google_java_format.sh"],
    cmd = "echo 'find src test -name \'*.java\' | grep -v /goldens/ | xargs $(execpath :google_java_format_binary) --replace' > $(OUTS)",
    executable = 1,
    tools = [":google_java_format_binary"],
    local = 1,
)

# Run `bazel build //:google_java_format_verification` to verify that gapic-generator-java sources
# are formatted correctly.
genrule(
    name = "google_java_format_verification",
    outs = ["google_java_format_verification.sh"],
    cmd = "echo 'find src test -name \'*.java\' | grep -v /goldens/ | xargs $(execpath :google_java_format_binary) --dry-run --set-exit-if-changed' > $(OUTS)",
    executable = 1,
    tools = [":google_java_format_binary"],
    local = 1,
)