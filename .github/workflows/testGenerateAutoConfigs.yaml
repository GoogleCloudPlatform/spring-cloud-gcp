name: Test Action for Generating Spring Auto-Configurations
# This is a simplified version of generateAutoConfigs for testing purposes
on:
  workflow_dispatch:
jobs:
  generateLibraries:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Setup Java 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: bazelisk version
      - uses: actions/setup-go@v3
      - name: Install buildozer
        run: |
          go install github.com/bazelbuild/buildtools/buildozer@latest
          export PATH=$PATH:$(go env GOPATH)/bin
          buildozer --version
      # This test workflow should only be manually triggered from a branch
      - name: Get branch name
        run: echo "$GITHUB_REF_NAME"
      - name: Clean previews folder
        continue-on-error: false
        working-directory: spring-cloud-generator
        run: |
          set -x
          bash reset-previews-folder.sh
      - name: Generate library list
        continue-on-error: false
        working-directory: spring-cloud-generator
        run: |
          set -x
          set -e
          sudo apt-get update
          sudo apt-get install libxml2-utils
          bash generate-library-list.sh
      - name: Compile non-autogen libraries
        continue-on-error: false
        run: |
          set -e
          ./mvnw \
            --batch-mode \
            --show-version \
            --threads 1.5C \
            --define maven.test.skip=true \
            --define maven.javadoc.skip=true \
            install
      - name: Generate libraries
        continue-on-error: false
        working-directory: spring-cloud-generator
        run: |
          set -x
          set -e
          bash generate-all.sh
      - name: Check for generation errors
        continue-on-error: false
        working-directory: spring-cloud-generator
        run: |
          set -x
          if [[ $(ls *failed-library-generations | wc -l) -eq 0 ]]; then
            echo 'no errors at generation'
            exit 0
          fi
          for failed_lib_name in $(find failed-library-generations -printf '%f\n' | tail -n+2); do
            echo "***** FAILED TO GENERATE LIBRARY: $failed_lib_name"
            cat failed-library-generations/$failed_lib_name
          done
          exit 1
      # Compares the current contents of spring-cloud-previews with the new generated libraries
      - name: Detect changes
        id: detect_changes
        run: |
          set -x

          # Counts number of changed files
          git add ./spring-cloud-previews
          CHANGED_FILES=`git diff --cached --numstat | wc -l | awk '{print $1}'`
          git reset -- ./spring-cloud-previews # unstage changes

          echo "$CHANGED_FILES have changed after generation"
          if [[ $CHANGED_FILES -eq 0 ]]; then
            echo "Branch will not be updated"
          fi
          echo "CHANGED_FILES=$CHANGED_FILES" >> $GITHUB_OUTPUT
      - name: Generate test results PR
        if: steps.detect_changes.outputs.CHANGED_FILES > 0
        run: |
          set -x
          # stashes the source branch with generated libs 
          MESSAGE=`echo "chore: update starter modules in spring-cloud-preview"`
          git stash push -- spring-cloud-previews/
          git reset --hard
          git remote update
          git fetch
          # pops the changes in a new branch from base
          git checkout $GITHUB_REF_NAME
          NEW_BRANCH_NAME="test-codegen-$(date '+%Y%m%d%H%M%S')"
          git checkout -b $NEW_BRANCH_NAME
          git stash pop
          git add .
          # configure author
          git config --global user.name "Cloud Java Bot"
          git config --global user.email "cloud-java-bot@google.com"
          # commit
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY
          git commit -m "$MESSAGE"
          git push --set-upstream origin $NEW_BRANCH_NAME
          # creates PR
          gh pr create --draft -B $GITHUB_REF_NAME -H $NEW_BRANCH_NAME --title "[do not merge] test PR for spring-cloud-previews" --body 'Created by Github action'

        env:
          BRANCH_NAME: ${{ steps.get_branch_name.outputs.BRANCH_NAME }}
          GITHUB_ACTOR_EMAIL: ${{ steps.determine_workflow_author_email.outputs.GITHUB_ACTOR_EMAIL }}
          GITHUB_ACTOR_NAME: ${{ steps.determine_workflow_author_email.outputs.GITHUB_ACTOR_NAME }}
          GITHUB_TOKEN: ${{ secrets.CLOUD_JAVA_BOT_GITHUB_TOKEN }}